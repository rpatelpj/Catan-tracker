#line 2 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/defargs.cpp"
#line 47 "defargs.l"
#include <stdint.h>



#line 8 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/defargs.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE defargsYYrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via defargsYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void defargsYYrestart (FILE *input_file ,yyscan_t yyscanner );
void defargsYY_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE defargsYY_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void defargsYY_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void defargsYY_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void defargsYYpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void defargsYYpop_buffer_state (yyscan_t yyscanner );

static void defargsYYensure_buffer_stack (yyscan_t yyscanner );
static void defargsYY_load_buffer_state (yyscan_t yyscanner );
static void defargsYY_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER defargsYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE defargsYY_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE defargsYY_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE defargsYY_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *defargsYYalloc (yy_size_t ,yyscan_t yyscanner );
void *defargsYYrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void defargsYYfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer defargsYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        defargsYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            defargsYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        defargsYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            defargsYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define defargsYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[337] =
    {   0,
        2,    2,   63,   61,   62,   60,   62,   61,   62,    1,
       61,   62,   37,   61,   62,   29,   37,   61,   62,   37,
       61,   62,   37,   61,   62,   37,   61,   62,   37,   61,
       62,   37,   61,   62,   37,   61,   62,   39,   61,   62,
       16,   39,   61,   62,   17,   18,   39,   61,   62,   39,
       61,   62,   38,   39,   61,   62,   17,   39,   61,   62,
       23,   39,   61,   62,   24,   39,   61,   62,   21,   39,
       61,   62,   22,   39,   61,   62,   25,   39,   61,   62,
       26,   39,   61,   62,   35,   61,   62,    2,   35,   61,
       62,   35,   61,   62,   15,   35,   61,   62,   32,   35,

       61,   62,   35,   61,   62,   35,   61,   62,   15,   35,
       61,   62,   30,   35,   61,   62,   32,   35,   61,   62,
       34,   35,   61,   62,   35,   61,   62,   34,   35,   61,
       62,   15,   35,   61,   62,    8,   37,   61,   62,   37,
       61,   62,   15,   37,   61,   62,   32,   37,   61,   62,
       15,   37,   61,   62,   32,   37,   61,   62,   37,   61,
       62,   37,   61,   62,   37,   61,   62,   13,   35,   61,
       62,   10,   34,   35,   61,   62,   10,   34,   35,   61,
       62,   45,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   53,   58,   61,   62,   57,   60,

       62,   58,   61,   62,   53,   58,   61,   62,   54,   61,
       62,   56,   60,   62,   54,   61,   62,   41,   61,   62,
       42,   60,   62,   40,   41,   61,   62,   41,   61,   62,
       50,   61,   62,   50,   61,   62,   51,   60,   62,   50,
       61,   62,   50,   61,   62,   36,   27,   28,   18,   17,
       38,   19,   20,    2,   34,16393,   14,   34,    3,   34,
       11,   12,   10,   34,   10,   34,   46,   48,   47,   53,
       55,   53,   54,   54,   54,   59,   28,   17,   17,16393,
     8201,   34,    6,    6,    7,   10,   34,   52,   53,   59,
       54,   59,   59,   28, 8201,   34,    5,    4,    5,   10,

       34,   53,   59,   54,   59,   28,   31,   34,    4,   10,
       34,   43,   28,   34,   10,   34,   49,   28,   33,   34,
       10,   33,   34,   49,   28,   44,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28
    } ;

static yyconst flex_int16_t yy_accept[266] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    8,   10,   13,   16,   20,
       23,   26,   29,   32,   35,   38,   41,   45,   50,   53,
       57,   61,   65,   69,   73,   77,   81,   85,   88,   92,
       95,   99,  103,  106,  109,  113,  117,  121,  125,  128,
      132,  136,  140,  143,  147,  151,  155,  159,  162,  165,
      168,  172,  177,  182,  185,  187,  189,  191,  193,  195,
      199,  202,  205,  209,  212,  215,  218,  221,  224,  228,

      231,  234,  237,  240,  243,  246,  246,  246,  247,  248,
      248,  249,  250,  251,  252,  252,  253,  254,  255,  256,
      256,  256,  257,  257,  257,  258,  259,  259,  260,  261,
      261,  261,  261,  261,  261,  261,  262,  263,  265,  267,
      268,  268,  268,  269,  269,  270,  270,  270,  271,  272,
      273,  274,  275,  276,  276,  276,  277,  277,  278,  279,
      280,  280,  280,  280,  281,  282,  282,  282,  283,  284,
      284,  285,  285,  285,  286,  288,  288,  289,  289,  289,
      291,  293,  293,  293,  294,  294,  295,  295,  296,  296,
      297,  298,  300,  300,  300,  302,  302,  302,  304,  306,

      306,  306,  306,  307,  308,  309,  310,  310,  310,  312,
      313,  313,  313,  313,  313,  314,  315,  315,  317,  317,
      318,  318,  318,  319,  321,  321,  324,  324,  325,  325,
      325,  326,  326,  327,  327,  327,  328,  328,  328,  329,
      329,  329,  330,  330,  330,  331,  331,  331,  332,  332,
      332,  333,  333,  333,  334,  334,  334,  335,  335,  335,
      336,  336,  337,  337,  337
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    8,    9,
       10,   11,    1,   12,   13,    1,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,   23,   23,   23,   23,
       23,   25,   23,   23,   26,   23,   23,   23,   23,   23,
       27,   28,   29,   30,   23,    1,   31,   23,   32,   33,

       34,   35,   23,   23,   36,   23,   23,   37,   23,   38,
       39,   23,   23,   40,   41,   42,   43,   44,   23,   45,
       23,   23,   46,    1,   47,    1,    1,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    4,    5,
        6,    1,    1,    1,    7,    7,    7,    7,    8,    1,
        1,    1,    9,    9,    9,    9,    1,   10,    1,    1,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    1,    1
    } ;

static yyconst flex_int16_t yy_base[317] =
    {   0,
        0,    1,    2,    3,    5,   21,   18,   26,   49,    0,
      899,  896,   88,   91,   93,   95,  142,    0,  187,    0,
      233,    0,  278,  320,   28,   34,    6,  103,  104,  109,
      200,  202,  900,  941,  941,   33,  941,  941,  941,  877,
      111,  107,  108,    0,  892,  941,  941,  889,  121,    0,
      886,  941,  941,  862,  859,  941,  941,  941,  877,    0,
      282,  122,  851,  123,  173,  941,  196,    0,  841,  819,
      941,  941,  835,  941,  206,  204,  280,  836,  850,   13,
      281,    0,  807,  839,  204,  823,  118,  804,  798,    0,
      941,  820,  208,    0,  941,  215,  941,  941,  941,  284,

      941,  193,  941,  286,  294,  300,   95,  941,  941,  823,
      822,  823,  301,    0,  817,  941,  941,  814,    0,  305,
      318,  364,  213,  317,  941,    0,  781,  941,  767,  799,
      298,  796,  789,  767,  330,  941,  941,    0,  749,  941,
      313,  760,  941,  334,  941,  745,  743,    0,  941,  331,
        0,  339,  340,  738,  729,  751,  760,  757,  344,    0,
      319,  737,  410,  344,  440,  352,  409,  721,  941,  745,
      739,  410,  735,  941,  704,  708,  941,  694,  698,  706,
      700,  681,  683,  941,  706,  703,  420,    0,  682,  663,
      941,  941,  420,  690,  655,  648,  642,    0,    0,  652,

      641,  660,  657,  941,  620,  941,  641,  638,  613,  941,
      609,  607,  598,  632,  630,  585,  610,  575,  575,  601,
      553,  580,  577,    0,  567,    0,  539,  570,  538,  565,
      564,  559,  941,  528,  556,  554,  541,  434,  433,  428,
      429,  428,  423,  425,  419,  411,  414,  411,  406,  409,
      353,  344,  342,  337,  317,  300,  282,  277,  186,  133,
      106,  941,   37,  941,  487,  497,  507,  517,  527,  537,
      547,  557,  565,  568,    4,  577,  581,  590,  600,  604,
      613,  623,  633,  641,  650,  660,  669,  679,  688,  697,
      706,  715,  724,  733,  742,  751,  760,  769,  778,  787,

      796,  805,  814,  823,  832,  841,  850,  859,  868,  877,
      886,  895,  904,  913,  922,  931
    } ;

static yyconst flex_int16_t yy_def[317] =
    {   0,
      265,  265,  265,  265,  266,  266,  266,  266,  264,    9,
        9,    9,    9,    9,    9,    9,  264,   17,  266,   19,
      264,   21,  265,  265,  267,  267,  268,  268,  269,  269,
      270,  270,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  271,  272,  264,  264,  273,  264,  274,
      273,  264,  264,  264,  264,  264,  264,  264,  264,  275,
      276,  264,  264,  264,  264,  264,  264,  277,  278,  277,
      264,  264,  279,  264,  264,  264,  264,  264,  264,  264,
      264,  280,  280,  264,  264,  264,  264,  264,  264,  281,
      264,  264,  281,  282,  264,  282,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  283,
      283,  273,  284,  274,  273,  264,  264,  264,  277,  276,
      276,  264,  264,  264,  264,  277,  278,  264,  277,  264,
      285,  264,  286,  264,  264,  264,  264,  280,  280,  264,
      264,  287,  264,  264,  264,  264,  264,  281,  264,  281,
      282,  282,  282,  264,  264,  264,  288,  288,  284,  159,
      276,  264,  276,  122,  264,  264,  264,  277,  264,  264,
      264,  264,  289,  264,  280,  287,  264,  264,  264,  281,
      282,  264,  264,  264,  290,  290,  276,  165,  264,  277,
      264,  264,  264,  291,  280,  264,  264,  281,  282,  264,

      264,  292,  292,  264,  277,  264,  264,  293,  280,  264,
      264,  264,  264,  294,  294,  277,  295,  280,  264,  264,
      264,  296,  296,  277,  297,  280,  264,  264,  264,  298,
      298,  299,  264,  264,  300,  300,  301,  302,  302,  303,
      304,  304,  305,  306,  306,  307,  308,  308,  309,  310,
      310,  311,  312,  312,  313,  314,  314,  315,  264,  264,
      316,  264,  264,    0,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264
    } ;

static yyconst flex_int16_t yy_nxt[989] =
    {   0,
      264,  264,   35,   35,   35,   35,  264,   35,   95,   39,
       37,   37,  119,   36,   36,   36,   36,   40,   41,   96,
       35,   37,   37,   35,   42,   39,   43,   45,   35,  134,
       91,   41,   44,   40,   41,   45,   91,  132,   92,   41,
       42,   93,   43,  106,   92,  174,  107,   93,   44,   46,
       46,   35,   46,   46,   46,   46,   46,   47,   48,   46,
       46,   46,   49,   46,   46,   46,   46,   46,   46,   46,
       46,   50,   50,   50,   50,   46,   46,   46,   46,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   46,   46,   52,   53,  156,   52,

       53,   46,   46,   46,   46,   95,   98,   54,  156,   55,
       54,   98,   55,   99,  174,   99,   96,  100,   99,  144,
       99,  106,  100,  123,  107,   99,  108,  108,  108,  108,
       99,  106,  145,  106,  107,  124,  107,  262,   56,   57,
       56,   57,   58,   59,   35,   58,   58,   60,   58,   58,
       61,   62,   58,   62,   63,   64,   58,   58,   58,   58,
       58,   65,   66,   67,   68,   68,   68,   68,   69,   58,
       58,   58,   68,   68,   68,   70,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   71,   58,   35,
      262,   72,  125,  125,   73,   74,   75,  123,   75,   40,

       41,  102,  103,  102,  103,  141,   76,  123,   77,  124,
       78,   79,   78,  104,  123,  104,  125,  125,  106,  124,
      105,  150,  105,  108,  108,  152,  124,  154,  153,   80,
      142,  155,   74,   58,   58,   35,   58,   58,   60,   58,
       58,   58,   81,   58,   58,   58,   64,   58,   58,   58,
       58,   58,   58,   58,   58,   82,   82,   82,   82,   58,
       58,   58,   58,   82,   82,   82,   83,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   58,   58,
       35,  123,  135,  121,   84,  174,  260,   85,  122,  136,
       86,   36,  122,  124,  106,  144,  106,  107,   87,  107,

      108,  108,  115,  156,  260,  171,  161,  137,  145,   88,
      156,  122,  172,  172,  141,  159,  159,  159,  159,  163,
      161,   89,   35,  162,  122,  174,   84,  166,  122,   85,
      167,  135,   86,   36,  180,  144,  162,  162,  136,  142,
       87,  257,  181,  181,  180,  115,  257,  122,  145,  181,
      120,   88,  174,  181,  120,  189,  137,  254,  159,  159,
      159,  159,  189,   89,  120,  164,  120,  120,  120,  120,
      122,  120,  120,  120,  122,  120,  120,  120,  120,  120,
      120,  120,  162,  120,  120,  120,  165,  165,  165,  165,
      120,  120,  120,  122,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  120,
      120,  163,  189,  254,  174,  251,  122,  192,  251,  174,
      122,  121,  189,  248,  193,  193,  122,  206,  162,  248,
      122,  174,  245,  245,  207,  207,  174,  242,  242,  122,
      120,  161,  120,  120,  120,  120,  120,  120,  120,  122,
      120,  120,  120,  120,  188,  188,  188,  188,  162,  120,
      120,  120,  188,  188,  188,  188,  120,  120,  120,  120,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  120,  120,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   38,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  109,  109,  174,
      109,  109,  109,  109,  109,  109,  109,  110,  239,  110,
      239,  220,  110,  110,  110,  110,  113,  174,  236,  236,
      234,  228,  233,  113,  114,  174,  114,  120,  120,  120,
      120,  231,  120,  120,  231,  120,  120,  126,  229,  126,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      130,  130,  228,  130,  130,  130,  130,  130,  130,  130,
      138,  227,  138,  148,  148,  226,  148,  148,  174,  148,
      148,  148,  148,  151,  151,  224,  151,  151,  151,  151,
      151,  151,  151,  157,  223,  157,  223,  221,  157,  157,
      157,  157,  160,  220,  219,  218,  174,  160,  206,  160,
      170,  170,  216,  170,  170,  170,  170,  170,  170,  170,
      173,  215,  173,  173,  215,  173,  173,  173,  173,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  185,
      213,  185,  212,  211,  185,  185,  185,  185,  194,  210,
      194,  194,  209,  194,  194,  194,  194,  202,  174,  202,

      205,  204,  202,  202,  202,  202,  208,  203,  208,  208,
      203,  208,  208,  208,  208,  214,  201,  214,  200,  199,
      214,  214,  214,  214,  217,  198,  217,  217,  197,  217,
      217,  217,  217,  222,  196,  222,  177,  195,  222,  222,
      222,  222,  225,  174,  225,  225,  191,  225,  225,  225,
      225,  230,  191,  230,  190,  187,  230,  230,  230,  230,
      232,  186,  232,  232,  186,  232,  232,  232,  232,  235,
      184,  235,  183,  182,  235,  235,  235,  235,  237,  179,
      237,  237,  178,  237,  237,  237,  237,  238,  177,  238,
      175,  132,  238,  238,  238,  238,  240,  174,  240,  240,

      133,  240,  240,  240,  240,  241,  169,  241,  168,  128,
      241,  241,  241,  241,  243,  118,  243,  243,  115,  243,
      243,  243,  243,  244,  112,  244,  158,  158,  244,  244,
      244,  244,  246,  149,  246,  246,  147,  246,  246,  246,
      246,  247,  146,  247,  143,  140,  247,  247,  247,  247,
      249,  139,  249,  249,  133,  249,  249,  249,  249,  250,
      132,  250,  131,  129,  250,  250,  250,  250,  252,  128,
      252,  252,  125,  252,  252,  252,  252,  253,  118,  253,
      117,  116,  253,  253,  253,  253,  255,  115,  255,  255,
      112,  255,  255,  255,  255,  256,  111,  256,  108,  264,

      256,  256,  256,  256,  258,   51,  258,  258,   51,  258,
      258,  258,  258,  259,  264,  259,  264,  264,  259,  259,
      259,  259,  261,  264,  261,  261,  264,  261,  261,  261,
      261,  263,  264,  263,  263,  264,  263,  263,  263,  263,
       33,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264
    } ;

static yyconst flex_int16_t yy_chk[989] =
    {   0,
        0,    0,    1,    2,    3,    4,    0,    5,   27,    5,
        3,    4,  275,    1,    2,    3,    4,    5,    5,   27,
        7,    3,    4,    6,    5,    6,    5,    7,    8,   80,
       25,    7,    5,    6,    6,    8,   26,   80,   25,    8,
        6,   25,    6,   36,   26,  263,   36,   26,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   13,   13,  107,   14,

       14,   15,   15,   16,   16,   28,   29,   13,  107,   13,
       14,   30,   14,   29,  261,   29,   28,   29,   30,   87,
       30,   41,   30,   62,   41,   29,   42,   42,   43,   43,
       30,   49,   87,   64,   49,   62,   64,  260,   15,   15,
       16,   16,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
      259,   19,   65,   65,   19,   19,   19,   67,   19,   19,

       19,   31,   31,   32,   32,   85,   19,   75,   19,   67,
       19,   19,   19,   31,  123,   32,   67,   67,   93,   75,
       31,   93,   32,   76,   76,   96,  123,  102,   96,   19,
       85,  102,   19,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   77,   81,   61,   23,  258,  257,   23,   61,   81,
       23,   23,   61,   77,  100,  105,  104,  100,   23,  104,

       77,   77,  113,  106,  256,  131,  120,   81,  105,   23,
      106,   61,  131,  131,  141,  113,  113,  113,  113,  121,
      161,   23,   24,  120,  121,  255,   24,  124,  121,   24,
      124,  135,   24,   24,  150,  144,  121,  161,  135,  141,
       24,  254,  152,  153,  150,  159,  253,  121,  144,  152,
      164,   24,  252,  153,  164,  166,  135,  251,  159,  159,
      159,  159,  166,   24,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  164,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  163,  167,  250,  249,  248,  163,  172,  247,  246,
      163,  187,  167,  245,  172,  172,  187,  193,  163,  244,
      187,  243,  242,  241,  193,  193,  240,  239,  238,  163,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  187,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  271,  271,  237,
      271,  271,  271,  271,  271,  271,  271,  272,  236,  272,
      235,  234,  272,  272,  272,  272,  273,  232,  231,  230,
      229,  228,  227,  273,  274,  225,  274,  276,  276,  276,
      276,  223,  276,  276,  222,  276,  276,  277,  221,  277,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      279,  279,  220,  279,  279,  279,  279,  279,  279,  279,
      280,  219,  280,  281,  281,  218,  281,  281,  217,  281,
      281,  281,  281,  282,  282,  216,  282,  282,  282,  282,
      282,  282,  282,  283,  215,  283,  214,  213,  283,  283,
      283,  283,  284,  212,  211,  209,  208,  284,  207,  284,
      285,  285,  205,  285,  285,  285,  285,  285,  285,  285,
      286,  203,  286,  286,  202,  286,  286,  286,  286,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  288,
      201,  288,  200,  197,  288,  288,  288,  288,  289,  196,
      289,  289,  195,  289,  289,  289,  289,  290,  194,  290,

      190,  189,  290,  290,  290,  290,  291,  186,  291,  291,
      185,  291,  291,  291,  291,  292,  183,  292,  182,  181,
      292,  292,  292,  292,  293,  180,  293,  293,  179,  293,
      293,  293,  293,  294,  178,  294,  176,  175,  294,  294,
      294,  294,  295,  173,  295,  295,  171,  295,  295,  295,
      295,  296,  170,  296,  168,  162,  296,  296,  296,  296,
      297,  158,  297,  297,  157,  297,  297,  297,  297,  298,
      156,  298,  155,  154,  298,  298,  298,  298,  299,  147,
      299,  299,  146,  299,  299,  299,  299,  300,  142,  300,
      139,  134,  300,  300,  300,  300,  301,  133,  301,  301,

      132,  301,  301,  301,  301,  302,  130,  302,  129,  127,
      302,  302,  302,  302,  303,  118,  303,  303,  115,  303,
      303,  303,  303,  304,  112,  304,  111,  110,  304,  304,
      304,  304,  305,   92,  305,  305,   89,  305,  305,  305,
      305,  306,   88,  306,   86,   84,  306,  306,  306,  306,
      307,   83,  307,  307,   79,  307,  307,  307,  307,  308,
       78,  308,   73,   70,  308,  308,  308,  308,  309,   69,
      309,  309,   63,  309,  309,  309,  309,  310,   59,  310,
       55,   54,  310,  310,  310,  310,  311,   51,  311,  311,
       48,  311,  311,  311,  311,  312,   45,  312,   40,   33,

      312,  312,  312,  312,  313,   12,  313,  313,   11,  313,
      313,  313,  313,  314,    0,  314,    0,    0,  314,  314,
      314,  314,  315,    0,  315,  315,    0,  315,  315,  315,
      315,  316,    0,  316,  316,    0,  316,  316,  316,  316,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "defargs.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*! \file
 *  This scanner is used to convert a string into a list of function or 
 *  template arguments. Each parsed argument results in a Argument struct,
 *  that is put into an ArgumentList in declaration order.
 *  Comment blocks for arguments can also be included in the string.
 *  The argument string does not contain new-lines (except inside any
 *  comment blocks).
 *  An Argument consists of the string fields: 
 *                 type,name,default value, and documentation
 *  The Argument list as a whole can be pure, constant or volatile.
 *
 *  Examples of input strings are:
 *  \code
 *    "(int a,int b) const"
 *    "(const char *s="hello world",int=5) = 0"
 *    "<class T,class N>"
 *    "(char c,const char)"
 *  \endcode
 *
 *  Note: It is not always possible to distinguish between the name and 
 *        type of an argument. In case of doubt the name is added to the
 *        type, and the matchArgumentList in util.cpp is be used to
 *        further determine the correct separation.
 */

#line 51 "defargs.l"

/*
 *	includes
 */
#include <stdio.h>
//#include <iostream.h>
#include <assert.h>
#include <ctype.h>
#include <qregexp.h>
#include <qcstringlist.h>

#include "defargs.h"
#include "entry.h"
#include "util.h"
#include "arguments.h"
#include "message.h"
  
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
  
/* -----------------------------------------------------------------
 *	state variables
 */
struct defargsYY_state
{
  defargsYY_state(const char *inStr,ArgumentList &al,SrcLangExt l)
    : inputString(inStr), argList(al), lang(l) {}
  const char      *inputString;
  ArgumentList    &argList;
  SrcLangExt       lang;
  int              inputPosition = 0;
  QCString        *copyArgValue = 0;
  QCString         curArgTypeName;
  QCString         curArgDefValue;
  QCString         curArgName;
  QCString         curArgDocs;
  QCString         curArgAttrib;
  QCString         curArgArray;
  QCString         curTypeConstraint;
  QCString         extraTypeChars;
  int              argRoundCount = 0;
  int              argSharpCount = 0;
  int              argCurlyCount = 0;
  int              readArgContext = 0;
  int              lastDocContext = 0;
  int              lastDocChar = 0;
  int              lastExtendsContext = 0;
  QCString         delimiter;
};

static const char *stateToString(int state);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);
static bool nameIsActuallyPartOfType(QCString &name);

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);
















#line 917 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/defargs.cpp"

#define INITIAL 0
#define Start 1
#define CopyArgString 2
#define CopyRawString 3
#define CopyArgRound 4
#define CopyArgRound2 5
#define CopyArgSharp 6
#define CopyArgCurly 7
#define ReadFuncArgType 8
#define ReadFuncArgDef 9
#define ReadFuncArgPtr 10
#define FuncQual 11
#define ReadDocBlock 12
#define ReadDocLine 13
#define ReadTypeConstraint 14
#define TrailingReturn 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct defargsYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int defargsYYlex_init (yyscan_t* scanner);

int defargsYYlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int defargsYYlex_destroy (yyscan_t yyscanner );

int defargsYYget_debug (yyscan_t yyscanner );

void defargsYYset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE defargsYYget_extra (yyscan_t yyscanner );

void defargsYYset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *defargsYYget_in (yyscan_t yyscanner );

void defargsYYset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *defargsYYget_out (yyscan_t yyscanner );

void defargsYYset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t defargsYYget_leng (yyscan_t yyscanner );

char *defargsYYget_text (yyscan_t yyscanner );

int defargsYYget_lineno (yyscan_t yyscanner );

void defargsYYset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int defargsYYwrap (yyscan_t yyscanner );
#else
extern int defargsYYwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int defargsYYlex (yyscan_t yyscanner);

#define YY_DECL int defargsYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 136 "defargs.l"


#line 1165 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/defargs.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)defargsYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in defargsYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			defargsYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				defargsYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		defargsYY_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 265 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 264 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 138 "defargs.l"
{ BEGIN(ReadFuncArgType); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 140 "defargs.l"
{
  					  yyextra->curArgTypeName+=" ";
  					}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 143 "defargs.l"
{ 
					  if (yyextra->curArgTypeName.stripWhiteSpace().isEmpty())
					  {
					    yyextra->curArgAttrib=yytext; // for M$-IDL
					  }
					  else // array type
					  {
					    yyextra->curArgArray+=yytext;
					  }
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 153 "defargs.l"
{ yyextra->curArgDefValue+=yytext; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 154 "defargs.l"
{ yyextra->curArgDefValue+=yytext; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 155 "defargs.l"
{ yyextra->curArgDefValue+=yytext; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 156 "defargs.l"
{ yyextra->curArgDefValue+=yytext; 
                                          QCString text=yytext;
                                          int i=text.find('"');
                                          yyextra->delimiter = yytext+i+1;
                                          yyextra->delimiter=yyextra->delimiter.left(yyextra->delimiter.length()-1);
                                          BEGIN( CopyRawString );
                                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 163 "defargs.l"
{
  					  yyextra->curArgDefValue+=*yytext;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 167 "defargs.l"
{ 
  					  // function pointer as argument
					  yyextra->curArgTypeName+=yytext;
					  //yyextra->curArgTypeName=yyextra->curArgTypeName.simplifyWhiteSpace();
					  BEGIN( ReadFuncArgPtr );
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 173 "defargs.l"
{
					  yyextra->curArgName=yytext;
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 176 "defargs.l"
{ // function pointer
					  yyextra->curArgTypeName+=yytext;
					  //yyextra->curArgTypeName=yyextra->curArgTypeName.simplifyWhiteSpace();
					  yyextra->readArgContext = ReadFuncArgType;
					  yyextra->copyArgValue=&yyextra->curArgTypeName;
					  yyextra->argRoundCount=0;
					  BEGIN( CopyArgRound2 );
					}
	YY_BREAK
case 12:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 184 "defargs.l"
{ // pointer to fixed size array
					  yyextra->curArgTypeName+=yytext;
					  yyextra->curArgTypeName+=yyextra->curArgName;
					  //yyextra->curArgTypeName=yyextra->curArgTypeName.simplifyWhiteSpace();
					  BEGIN( ReadFuncArgType );
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 190 "defargs.l"
{ // redundant braces detected / remove them
					  int i=yyextra->curArgTypeName.findRev('('),l=yyextra->curArgTypeName.length();
					  if (i!=-1)
					    yyextra->curArgTypeName=yyextra->curArgTypeName.left(i)+
					                   yyextra->curArgTypeName.right(l-i-1);
					  yyextra->curArgTypeName+=yyextra->curArgName;
					  BEGIN( ReadFuncArgType );
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 198 "defargs.l"
{ // handle operators in defargs
  					  yyextra->curArgTypeName+=yytext;
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 201 "defargs.l"
{	 
					  if (YY_START==ReadFuncArgType)
					  {
					    yyextra->curArgTypeName+=*yytext;
					    yyextra->copyArgValue=&yyextra->curArgTypeName;
					  }
					  else // YY_START==ReadFuncArgDef
					  {
					    yyextra->curArgDefValue+=*yytext;
					    yyextra->copyArgValue=&yyextra->curArgDefValue;
					  }
					  yyextra->readArgContext = YY_START; 
					  if (*yytext=='(')
					  {
					    yyextra->argRoundCount=0; 
					    BEGIN( CopyArgRound ); 
					  }
					  else if (*yytext=='{')
					  {
					    yyextra->argCurlyCount=0; 
					    BEGIN( CopyArgCurly ); 
					  }
					  else // yytext=='<'
					  {
					    yyextra->argSharpCount=0; 
					    yyextra->argRoundCount=0; 
					    BEGIN( CopyArgSharp ); 
					  }
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 230 "defargs.l"
{
  					  yyextra->argRoundCount++;
					  *yyextra->copyArgValue += *yytext;
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 234 "defargs.l"
{
					  *yyextra->copyArgValue += yytext;
					  if (yyextra->argRoundCount>0) 
					  {
					    yyextra->argRoundCount--;
					  }
					  else 
					  {
					    if (YY_START==CopyArgRound2)
					    {
					      *yyextra->copyArgValue+=" "+yyextra->curArgName;
					    }
					    BEGIN( yyextra->readArgContext );
					  }
  					}
	YY_BREAK
case 18:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 249 "defargs.l"
{
					  *yyextra->copyArgValue += *yytext;
					  if (yyextra->argRoundCount>0) yyextra->argRoundCount--;
					  else BEGIN( yyextra->readArgContext );
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 254 "defargs.l"
{
                                          if (yyextra->argRoundCount>0)
                                          {
                                            // for e.g. < typename A = (i<<3) >
					    *yyextra->copyArgValue += yytext;
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 265 "defargs.l"
{
                                          if (yyextra->argRoundCount>0)
                                          {
                                            // for e.g. < typename A = (i>>3) >
					    *yyextra->copyArgValue += yytext;
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 276 "defargs.l"
{
                                          // don't count < inside (, e.g. for things like: < typename A=(i<6) >
  					  if (yyextra->argRoundCount==0) yyextra->argSharpCount++;
					  *yyextra->copyArgValue += *yytext;
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 281 "defargs.l"
{
					  *yyextra->copyArgValue += *yytext;
                                          if (yyextra->argRoundCount>0 && yyextra->argSharpCount==0)
                                          {
                                            // don't count > inside )
                                          }
                                          else
                                          {
                                            if (yyextra->argSharpCount>0)
                                            {
                                              yyextra->argSharpCount--;
                                            }
                                            else
                                            {
                                              BEGIN( yyextra->readArgContext );
                                            }
                                          }
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 299 "defargs.l"
{
                                          yyextra->argRoundCount++;
					  *yyextra->copyArgValue += *yytext;
                                        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 303 "defargs.l"
{
                                          yyextra->argRoundCount--;
					  *yyextra->copyArgValue += *yytext;
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 307 "defargs.l"
{
  					  yyextra->argCurlyCount++;
					  *yyextra->copyArgValue += *yytext;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 311 "defargs.l"
{
					  *yyextra->copyArgValue += *yytext;
					  if (yyextra->argCurlyCount>0) yyextra->argCurlyCount--;
					  else BEGIN( yyextra->readArgContext );
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 316 "defargs.l"
{
					  yyextra->curArgDefValue+=yytext;
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 319 "defargs.l"
{
					  yyextra->curArgDefValue+=yytext;
                                          QCString delimiter = yytext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==yyextra->delimiter)
                                          {
					    BEGIN( ReadFuncArgDef );
                                          }
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 328 "defargs.l"
{
					  yyextra->curArgDefValue+=*yytext;
					  BEGIN( ReadFuncArgDef );
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 332 "defargs.l"
{
					  BEGIN( ReadFuncArgDef );
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 335 "defargs.l"
{
					  yyextra->lastDocContext=YY_START;
					  yyextra->lastDocChar=*yytext;  
					  QCString text=yytext;
					  if (text.find("//")!=-1)
					    BEGIN( ReadDocLine );
					  else
					    BEGIN( ReadDocBlock );
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 344 "defargs.l"
{
  					  if (*yytext==')' && yyextra->curArgTypeName.stripWhiteSpace().isEmpty())
					  {
					    yyextra->curArgTypeName+=*yytext;
					    BEGIN(FuncQual);
					  }
					  else
					  {
					    yyextra->curArgTypeName=removeRedundantWhiteSpace(yyextra->curArgTypeName);
					    yyextra->curArgDefValue=yyextra->curArgDefValue.stripWhiteSpace();
					    //printf("curArgType='%s' curArgDefVal='%s'\n",yyextra->curArgTypeName.data(),yyextra->curArgDefValue.data());
					    int l=yyextra->curArgTypeName.length();
					    if (l>0)
					    {
					      int i=l-1;
					      while (i>=0 && (isspace((uchar)yyextra->curArgTypeName.at(i)) || yyextra->curArgTypeName.at(i)=='.')) i--;
					      while (i>=0 && (isId(yyextra->curArgTypeName.at(i)) || yyextra->curArgTypeName.at(i)=='$')) i--;
					      Argument a;
					      a.attrib  = yyextra->curArgAttrib.copy();
                                              a.typeConstraint = yyextra->curTypeConstraint.stripWhiteSpace();
					      //printf("a->type=%s a->name=%s i=%d l=%d\n",
					      //        a->type.data(),a->name.data(),i,l);
					      a.array.resize(0);
					      if (i==l-1 && yyextra->curArgTypeName.at(i)==')') // function argument
					      {
						int bi=yyextra->curArgTypeName.find('(');
						int fi=bi-1;
						//printf("func arg fi=%d\n",fi);
						while (fi>=0 && (isId(yyextra->curArgTypeName.at(fi)) || yyextra->curArgTypeName.at(fi)==':')) fi--;
						if (fi>=0)
						{
						  a.type  = yyextra->curArgTypeName.left(fi+1);
						  a.name  = yyextra->curArgTypeName.mid(fi+1,bi-fi-1).stripWhiteSpace();
						  a.array = yyextra->curArgTypeName.right(l-bi);
						}
						else
						{
						  a.type = yyextra->curArgTypeName;
						}
					      }
					      else if (i>=0 && yyextra->curArgTypeName.at(i)!=':')
					      { // type contains a name
						a.type = removeRedundantWhiteSpace(yyextra->curArgTypeName.left(i+1)).stripWhiteSpace();
						a.name = yyextra->curArgTypeName.right(l-i-1).stripWhiteSpace();

						// if the type becomes a type specifier only then we make a mistake
						// and need to correct it to avoid seeing a nameless parameter
						// "struct A" as a parameter with type "struct" and name "A".
						int sv=0;
						if      (a.type.left(6)=="const ")    sv=6;
						else if (a.type.left(9)=="volatile ") sv=9;

						if (a.type.mid(sv)=="struct"    ||
						    a.type.mid(sv)=="union"     ||
						    a.type.mid(sv)=="class"     ||
						    a.type.mid(sv)=="typename"  ||
						    nameIsActuallyPartOfType(a.name)
						   )
						{
						  a.type = a.type + " " + a.name;
						  a.name.resize(0);
						}
						//printf(" --> a->type='%s' a->name='%s'\n",a->type.data(),a->name.data());
					      }
					      else // assume only the type was specified, try to determine name later 
					      {
						a.type = removeRedundantWhiteSpace(yyextra->curArgTypeName);  
					      }
                                              if (!a.type.isEmpty() && a.type.at(0)=='$') // typeless PHP name?
                                              {
                                                a.name = a.type;
                                                a.type = "";
                                              }
					      a.array  += removeRedundantWhiteSpace(yyextra->curArgArray);
					      //printf("array=%s\n",a->array.data());
					      int alen = a.array.length();
					      if (alen>2 && a.array.at(0)=='(' && 
						            a.array.at(alen-1)==')') // fix-up for int *(a[10])
					      {
						int i=a.array.find('[')-1;
						a.array = a.array.mid(1,alen-2);
						if (i>0 && a.name.isEmpty())
						{
						  a.name  = a.array.left(i).stripWhiteSpace();
						  a.array = a.array.mid(i);
						}
					      }
					      a.defval = yyextra->curArgDefValue.copy();
					      //printf("a->type=%s a->name=%s a->defval=\"%s\"\n",a->type.data(),a->name.data(),a->defval.data());
					      a.docs   = yyextra->curArgDocs.stripWhiteSpace();
					      //printf("Argument '%s' '%s' adding docs='%s'\n",a->type.data(),a->name.data(),a->docs.data());
					      yyextra->argList.push_back(a);
					    }
					    yyextra->curArgAttrib.resize(0);
					    yyextra->curArgTypeName.resize(0);
					    yyextra->curArgDefValue.resize(0);
					    yyextra->curArgArray.resize(0);
					    yyextra->curArgDocs.resize(0);
                                            yyextra->curTypeConstraint.resize(0);
					    if (*yytext==')')
					    {
					      BEGIN(FuncQual);
					      //printf(">>> end of argument list\n");
					    }
					    else
					    {
					      BEGIN( ReadFuncArgType );
					    }
					  }
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 454 "defargs.l"
{
                                           if (yyextra->lang!=SrcLangExt_Java)
                                           {
                                             REJECT;
                                           }
                                           else
                                           {
                                             yyextra->curTypeConstraint.resize(0);
                                             yyextra->lastExtendsContext=YY_START;
                                             BEGIN(ReadTypeConstraint);
                                           }
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 466 "defargs.l"
{ 
  					  QCString name=yytext; //resolveDefines(yytext);
					  if (YY_START==ReadFuncArgType && yyextra->curArgArray=="[]") // Java style array
					  {
					    yyextra->curArgTypeName+=" []";
					    yyextra->curArgArray.resize(0);
					  }
					  //printf("resolveName '%s'->'%s'\n",yytext,name.data());
  					  yyextra->curArgTypeName+=name;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 476 "defargs.l"
{ 
  					  yyextra->curArgTypeName+=*yytext;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 480 "defargs.l"
{
  					  yyextra->curArgDefValue+=yytext;
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 483 "defargs.l"
{
					  yyextra->curArgDefValue+=*yytext;
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 486 "defargs.l"
{
  					  QCString name=yytext; //resolveDefines(yytext);
					  *yyextra->copyArgValue+=name;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 490 "defargs.l"
{
					  *yyextra->copyArgValue += *yytext;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 493 "defargs.l"
{
                                          unput(*yytext);
                                          BEGIN(yyextra->lastExtendsContext);
                                        }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 497 "defargs.l"
{
                                          yyextra->curTypeConstraint+=yytext;
                                        }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 500 "defargs.l"
{
                                          yyextra->curTypeConstraint+=' ';
                                        }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 503 "defargs.l"
{
					  yyextra->argList.constSpecifier=TRUE;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 506 "defargs.l"
{
					  yyextra->argList.volatileSpecifier=TRUE;
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 509 "defargs.l"
{
                                          yyextra->argList.refQualifier=RefQualifierLValue;
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 512 "defargs.l"
{
                                          yyextra->argList.refQualifier=RefQualifierRValue;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 515 "defargs.l"
{
					  yyextra->argList.pureSpecifier=TRUE;
                                          BEGIN(FuncQual);
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 519 "defargs.l"
{ // C++11 trailing return type
                                          yyextra->argList.trailingReturnType=" -> ";
                                          BEGIN(TrailingReturn);
                                        }
	YY_BREAK
case 49:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 523 "defargs.l"
{
                                          unput(*yytext);
                                          BEGIN(FuncQual);
                                        }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 527 "defargs.l"
{
                                          yyextra->argList.trailingReturnType+=yytext;
                                        }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 530 "defargs.l"
{
                                          yyextra->argList.trailingReturnType+=yytext;
                                        }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 533 "defargs.l"
{ // for functions returning a pointer to an array, 
                                          // i.e. ")[]" in "int (*f(int))[4]" with argsString="(int))[4]"
  					  yyextra->extraTypeChars=yytext;
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 537 "defargs.l"
{
  					  yyextra->curArgDocs+=yytext;
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 540 "defargs.l"
{
  					  yyextra->curArgDocs+=yytext;
  					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 543 "defargs.l"
{ 
  					  if (yyextra->lastDocChar!=0)
					    unput(yyextra->lastDocChar);
  					  BEGIN(yyextra->lastDocContext); 
					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 548 "defargs.l"
{
  					  if (yyextra->lastDocChar!=0)
					    unput(yyextra->lastDocChar);
					  BEGIN(yyextra->lastDocContext);
  					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 553 "defargs.l"
{
  					  yyextra->curArgDocs+=*yytext;
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 556 "defargs.l"
{
  					  yyextra->curArgDocs+=*yytext;
  					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 559 "defargs.l"
{
  					  yyextra->lastDocContext=YY_START;
					  yyextra->lastDocChar=0;  
					  if (yytext[1]=='/')
					    BEGIN( ReadDocLine );
					  else
  					    BEGIN( ReadDocBlock );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 567 "defargs.l"

	YY_BREAK
case 61:
YY_RULE_SETUP
#line 568 "defargs.l"

	YY_BREAK
case 62:
YY_RULE_SETUP
#line 570 "defargs.l"
ECHO;
	YY_BREAK
#line 1978 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/defargs.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Start):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyRawString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgRound2):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgCurly):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadFuncArgDef):
			case YY_STATE_EOF(ReadFuncArgPtr):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(ReadDocBlock):
			case YY_STATE_EOF(ReadDocLine):
			case YY_STATE_EOF(ReadTypeConstraint):
			case YY_STATE_EOF(TrailingReturn):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * defargsYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( defargsYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of defargsYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			defargsYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) defargsYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 265 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 265 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 264);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					defargsYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( defargsYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void defargsYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        defargsYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            defargsYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	defargsYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	defargsYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void defargsYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		defargsYYpop_buffer_state();
	 *		defargsYYpush_buffer_state(new_buffer);
     */
	defargsYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	defargsYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (defargsYYwrap()) processing, but the only time this flag
	 * is looked at is after defargsYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void defargsYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE defargsYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) defargsYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) defargsYYalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	defargsYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with defargsYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void defargsYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		defargsYYfree((void *) b->yy_ch_buf ,yyscanner );

	defargsYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a defargsYYrestart() or at EOF.
 */
    static void defargsYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	defargsYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then defargsYY_init_buffer was _probably_
     * called from defargsYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void defargsYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		defargsYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void defargsYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	defargsYYensure_buffer_stack(yyscanner);

	/* This block is copied from defargsYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from defargsYY_switch_to_buffer. */
	defargsYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void defargsYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	defargsYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		defargsYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void defargsYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)defargsYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in defargsYYensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)defargsYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in defargsYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE defargsYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) defargsYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	defargsYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to defargsYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       defargsYY_scan_bytes() instead.
 */
YY_BUFFER_STATE defargsYY_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return defargsYY_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to defargsYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE defargsYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) defargsYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in defargsYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = defargsYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in defargsYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE defargsYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int defargsYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int defargsYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *defargsYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *defargsYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t defargsYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *defargsYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void defargsYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void defargsYYset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "defargsYYset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void defargsYYset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "defargsYYset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see defargsYY_switch_to_buffer
 */
void defargsYYset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void defargsYYset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int defargsYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void defargsYYset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* defargsYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int defargsYYlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) defargsYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* defargsYYlex_init_extra has the same functionality as defargsYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to defargsYYalloc in
 * the yyextra field.
 */

int defargsYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    defargsYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) defargsYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    defargsYYset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from defargsYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * defargsYYlex_init()
     */
    return 0;
}

/* defargsYYlex_destroy is for both reentrant and non-reentrant scanners. */
int defargsYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		defargsYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		defargsYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	defargsYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        defargsYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    defargsYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * defargsYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    defargsYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *defargsYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *defargsYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void defargsYYfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see defargsYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 570 "defargs.l"



/* ----------------------------------------------------------------------------
 */

static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int c=0;
  while( c < max_size && yyextra->inputString[yyextra->inputPosition] )
  {
      *buf = yyextra->inputString[yyextra->inputPosition++] ;
      c++; buf++;
  }
  return c;
}

/*
The following code is generated using 'gperf keywords.txt'
where keywords.txt has the following content

---------------------------------
%define class-name KeywordHash
%define lookup-function-name find
%readonly-tables
%language=C++
%%
unsigned
signed
bool
char
char8_t
char16_t
char32_t
wchar_t
int
short
long
float
double
int8_t
int16_t
int32_t
int64_t
intmax_t
intptr_t
uint8_t
uint16_t
uint32_t
uint64_t
uintmax_t
uintptr_t
const
volatile
void
%%
---------------------------------
*/
//--- begin gperf generated code ----------------------------------------------------------

#define TOTAL_KEYWORDS 28
#define MIN_WORD_LENGTH 3
#define MAX_WORD_LENGTH 9
#define MIN_HASH_VALUE 3
#define MAX_HASH_VALUE 48
/* maximum key range = 46, duplicates = 0 */

class KeywordHash
{
  private:
    static inline unsigned int hash (const char *str, size_t len);
  public:
    static const char *find (const char *str, size_t len);
};

inline unsigned int
KeywordHash::hash (const char *str, size_t len)
{
  static const unsigned char asso_values[] =
  {
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49,  5,
     5, 30,  0, 49, 25, 49, 10, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49,  0, 49,  0,  5, 49,
    15,  0, 49, 10, 49, 30, 49, 49,  0, 20,
     0, 49, 15, 49,  5, 10,  0, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49
  };
  unsigned int hval = len;

  switch (hval)
  {
    default:
      hval += asso_values[static_cast<unsigned char>(str[4])];
      /*FALLTHROUGH*/
    case 4:
      hval += asso_values[static_cast<unsigned char>(str[3])];
      /*FALLTHROUGH*/
    case 3:
      break;
  }
  return hval;
}

const char *
KeywordHash::find (const char *str, size_t len)
{
  static const char * const wordlist[] =
  {
    "", "", "",
    "int",
    "bool",
    "float",
    "signed",
    "",
    "volatile",
    "char",
    "short",
    "double",
    "wchar_t",
    "uint16_t",
    "long",
    "const",
    "int8_t",
    "uint8_t",
    "char16_t",
    "void",
    "", "",
    "char8_t",
    "intptr_t",
    "uintptr_t",
    "", "", "",
    "intmax_t",
    "uintmax_t",
    "", "",
    "int64_t",
    "uint64_t",
    "", "", "",
    "int16_t",
    "uint32_t",
    "", "", "",
    "int32_t",
    "char32_t",
    "", "", "", "",
    "unsigned"
  };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
  {
    unsigned int key = hash (str, len);

    if (key <= MAX_HASH_VALUE)
    {
      const char *s = wordlist[key];

      if (*str == *s && !qstrcmp (str + 1, s + 1))
        return s;
    }
  }
  return 0;
}

//--- end gperf generated code ----------------------------------------------------------

/* bug_520975 */
static bool nameIsActuallyPartOfType(QCString &name)
{
  return KeywordHash::find(name.data(),name.length())!=0;
}

/*! Converts an argument string into an ArgumentList.
 *  \param[in] argsString the list of Arguments.
 *  \param[out] al a reference to resulting argument list pointer.
 *  \param[out] extraTypeChars point to string to which trailing characters 
 *              for complex types are written to
 */
 
void stringToArgumentList(SrcLangExt lang, const char *argsString,ArgumentList& al,QCString *extraTypeChars)
{
  if (argsString==0) return;

  yyscan_t yyscanner;
  defargsYY_state extra(argsString,al,lang);
  defargsYYlex_init_extra(&extra,&yyscanner);
#ifdef FLEX_DEBUG
  defargsYYset_debug(1,yyscanner);
#endif
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  printlex(yy_flex_debug, TRUE, __FILE__, NULL);

  defargsYYrestart( 0, yyscanner );
  BEGIN( Start );
  defargsYYlex(yyscanner);
  if (yyextra->argList.empty())
  {
    yyextra->argList.noParameters = TRUE;
  }
  if (extraTypeChars) *extraTypeChars=yyextra->extraTypeChars;
  //printf("stringToArgumentList(%s) result=%s\n",argsString,argListToString(al).data());
  printlex(yy_flex_debug, FALSE, __FILE__, NULL);
  defargsYYlex_destroy(yyscanner);
}

#include "defargs.l.h"

