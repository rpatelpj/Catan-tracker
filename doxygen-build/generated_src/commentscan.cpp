#line 2 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/commentscan.cpp"
#line 21 "commentscan.l"
#include <stdint.h>



#line 8 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/commentscan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void commentscanYYrestart (FILE *input_file ,yyscan_t yyscanner );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void commentscanYYpop_buffer_state (yyscan_t yyscanner );

static void commentscanYYensure_buffer_stack (yyscan_t yyscanner );
static void commentscanYY_load_buffer_state (yyscan_t yyscanner );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *commentscanYYalloc (yy_size_t ,yyscan_t yyscanner );
void *commentscanYYrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void commentscanYYfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 222
#define YY_END_OF_BUFFER 223
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[816] =
    {   0,
       86,   86,  138,  138,  152,  152,  167,  167,  213,  213,
      158,  158,  223,  222,   48,  222,   48,  222,   47,  222,
       48,  222,   48,  222,   48,  222,   48,  222,   46,   48,
      222,   48,  222,   48,  222,   29,   48,  222,   48,  222,
       48,  222,   48,  222,   48,  222,   48,  222,   46,   48,
      222,   48,  222,   48,  222,  101,  222,  100,  222,  101,
      222,   98,  101,  222,  101,  222,  101,  222,  104,  222,
      102,  222,  104,  222,  104,  222,  128,  222,  127,  222,
      128,  222,  125,  128,  222,  128,  222,   81,  222,   81,
      222,   80,  222,   81,  222,   81,  222,   81,  222,   77,

       81,  222,   81,  222,   81,  222,   85,  222,   84,  222,
       85,  222,   82,   85,  222,   85,  222,   85,  222,   85,
      222,   89,  222,   88,  222,   86,   89,  222,   86,   89,
      222,   89,  222,   86,   89,  222,   86,   89,  222,   89,
      222,   81,  222,   80,  222,   81,  222,   81,  222,   81,
      222,   81,  222,   81,  222,  116,  222,  115,  222,  113,
      116,  222,  116,  222,  120,  222,  119,  222,  120,  222,
      120,  222,  124,  222,  123,  222,  124,  222,  124,  222,
      112,  222,  109,  222,  112,  222,  110,  112,  222,  112,
      222,  112,  222,  108,  222,  108,  222,  106,  108,  222,

      107,  108,  222,16489,   67,  222,   66,  222,   67,  222,
       64,   67,  222,   67,  222,   71,  222,   71,  222,   70,
      222,   71,  222,   71,  222,   71,  222,   68,   71,  222,
       71,  222,   71,  222,   75,  222,   74,  222,   75,  222,
       72,   75,  222,   75,  222,   93,  222,   92,  222,   90,
       93,  222,   93,  222,   95,   97,  222,   96,  222,   97,
      222,  134,  222,  133,  222,  132,  134,  222,  134,  222,
      138,  141,  222,  135,  222,  138,  141,  222,  141,  222,
      141,  222,  143,  222,  142,  222,  222,  146,  222,  146,
      222,  144,  222,  146,  222,  146,  222,  152,  156,  222,

      153,  222,  156,  222,  156,  222,  156,  222,  156,  222,
      156,  222,  131,  222,  129,  222,  131,  222,  165,  222,
      165,  222,  163,  222,  157,  165,  222,  162,  165,  222,
      165,  222,  168,  222,  167,  168,  222,  166,  222,  168,
      222,  175,  176,  222,  174,  222,  176,  222,  176,  222,
      176,  222,  186,  187,  222,  177,  222,  187,  222,  187,
      222,  187,  222,  190,  222,  188,  222,  190,  222,  196,
      222,  194,  222,  193,  196,  222,  196,  222,  199,  202,
      222,  197,  222,  200,  202,  222,  201,  202,  222,  202,
      222,  202,  222,  205,  222,  203,  222,  205,  222,  208,

      222,  207,  222,  208,  222,  206,  208,  222,  208,  222,
      211,  222,  210,  222,  211,  222,  209,  211,  222,  211,
      222,   61,   63,  222,   62,  222,   63,  222,   63,  222,
      149,  222,  148,  222,  147,  149,  222,  149,  222,   51,
       52,  222,   50,  222,   52,  222,   52,  222,  213,  215,
      222,  214,  222,  215,  222,  215,  222,  215,  222,  218,
      222,  217,  222,  218,  222,  216,  218,  222,  218,  222,
      220,  221,  222,  219,  222,  221,  222,  158,  222,  158,
      161,  222,  159,  222,  160,  222,   56,   57,  222,   54,
      222,   55,   57,  222,   57,  222,   57,  222,  192,  222,

      191,  222,  192,  222,   45,    4,   38,   40,   42,   40,
       28,   28,   20,   20,   20,   26,   27,   22,   28,   29,
       20,   20,   20,   20,   32,   33,   38,   30,   98,   98,
       99,   98,  103,  125,  125,  126,   77,   77,   79,   77,
       82,   82,   83,   82,   86,   86,   86,   86,   86,   86,
       87,   86,  113,  114,  117,  118,  122,  121,  122,  110,
      110,  111,  110,  107,16489, 8297,  107,16489,   64,   64,
       64,   65,   68,   68,   69,   68,   72,   72,   73,   90,
       91,   95,   94,  132,  138,  135,  138,  140,  140,  137,
      142,  145,  152,  155,  154,  130,  157,  162,  164,  167,

      166,  175,  186,  189,  193,  195,  199,  198,  204,  206,
      206,  209,  209,   61,  147,   51,  213,  212,  216,  220,
      158,   56,   28,   39,   37,   44,   40,   44,   44,   44,
       40,   44,   44,   41,    6,   36,    1,    1,    2,   20,
       20,   24,   25,   22,    5,   20,   20,   34,   37,   31,
       98,   98,   77,   82,   82,   86,   86,   86,  110,  110,
       64,   64,   64,   64,   68,   72,  139,   58,   59,   60,
       49,  212,  216,  216,   53,   44,   44,   16,   35,    1,
       21,    2,   19,   20,   20,   20,   98,   76,   82,   86,
       86,   78,  110,   64,   64,   64,   72,  139,  170,  178,

       49,  216,   15,   43,    6,   13,   19,   20,   23,   19,
       23,   20,   20,   98,   82,   86,  110,    3,   14,    7,
       20,   23,   20,   20,   98,   82,   86,  110,   90,  172,
      180,   20,   20,   20,   98,   82,   86,  110,  151,  171,
      169,  179,   20,   20,   20,   98,  100,  102,  127,   80,
       82,   84,   86,   88,  115,  119,  123,  109,  110,   66,
       70,   74,   92,   96,  133,  136,  143,  144,  150,  153,
      129,  163,  173,  174,  177,  188,  194,  197,  203,  207,
      210,  148,   50,  214,  217,  219,   54,  191,   17,   12,
        9,    8,   20,   20,    5,   20,  181,   11,   10,   20,

       20,   20,   20,  184,   18,   20,   18,   20,  185,  182,
       18,   20,  185,  183,   45
    } ;

static yyconst flex_int16_t yy_accept[1210] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    6,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       11,   11,   11,   11,   11,   12,   13,   13,   13,   13,
       13,   14,   15,   17,   19,   21,   23,   25,   27,   29,

       32,   34,   36,   39,   41,   43,   45,   47,   49,   52,
       54,   56,   58,   60,   62,   65,   67,   69,   71,   73,
       75,   77,   79,   81,   83,   86,   88,   90,   92,   94,
       96,   98,  100,  103,  105,  107,  109,  111,  113,  116,
      118,  120,  122,  124,  126,  129,  132,  134,  137,  140,
      142,  144,  146,  148,  150,  152,  154,  156,  158,  160,
      163,  165,  167,  169,  171,  173,  175,  177,  179,  181,
      183,  185,  187,  190,  192,  194,  196,  198,  201,  205,
      207,  209,  211,  214,  216,  218,  220,  222,  224,  226,
      228,  231,  233,  235,  237,  239,  241,  244,  246,  248,

      250,  253,  255,  258,  260,  262,  264,  266,  269,  271,
      274,  276,  279,  281,  283,  285,  287,  288,  290,  292,
      294,  296,  298,  301,  303,  305,  307,  309,  311,  313,
      315,  317,  319,  321,  323,  325,  328,  331,  333,  335,
      338,  340,  342,  345,  347,  349,  351,  353,  356,  358,
      360,  362,  364,  366,  368,  370,  372,  374,  377,  379,
      382,  384,  387,  390,  392,  394,  396,  398,  400,  402,
      404,  406,  409,  411,  413,  415,  417,  420,  422,  425,
      427,  429,  431,  433,  435,  438,  440,  443,  445,  447,
      449,  452,  454,  456,  458,  460,  462,  464,  466,  469,

      471,  474,  476,  478,  480,  483,  485,  487,  490,  492,
      495,  497,  499,  501,  503,  505,  505,  505,  505,  506,
      506,  506,  507,  507,  507,  507,  507,  507,  508,  509,
      510,  510,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  512,  512,  513,  514,
      515,  516,  517,  518,  520,  521,  522,  523,  524,  525,
      525,  525,  525,  525,  525,  525,  526,  527,  528,  528,
      529,  529,  529,  529,  529,  529,  530,  531,  531,  531,
      531,  532,  533,  534,  534,  535,  535,  536,  536,  536,
      537,  537,  537,  537,  537,  537,  538,  538,  538,  539,

      539,  539,  540,  540,  540,  540,  541,  541,  542,  543,
      543,  543,  543,  544,  545,  545,  546,  547,  547,  548,
      549,  550,  550,  550,  551,  551,  552,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  554,  554,  555,  555,  555,  556,  556,  558,  558,
      558,  559,  559,  560,  560,  560,  561,  562,  562,  562,
      562,  563,  564,  566,  566,  567,  569,  570,  570,  570,
      571,  571,  572,  572,  573,  573,  573,  573,  573,  573,
      574,  574,  574,  575,  575,  576,  576,  576,  576,  577,
      578,  578,  579,  579,  580,  580,  581,  581,  581,  582,

      582,  583,  583,  584,  584,  585,  585,  586,  587,  588,
      588,  589,  590,  590,  591,  591,  592,  592,  592,  592,
      592,  593,  593,  594,  595,  596,  596,  596,  596,  597,
      597,  597,  598,  599,  599,  600,  600,  601,  602,  602,
      602,  603,  603,  603,  603,  604,  604,  604,  604,  604,
      604,  604,  605,  605,  606,  606,  607,  607,  608,  608,
      609,  609,  609,  610,  610,  611,  611,  612,  612,  612,
      613,  613,  614,  614,  614,  615,  615,  615,  616,  616,
      617,  617,  617,  618,  619,  619,  619,  620,  620,  620,
      621,  621,  622,  623,  623,  623,  623,  624,  624,  624,

      624,  624,  625,  626,  627,  629,  630,  631,  633,  634,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  636,  636,  636,  636,  636,  636,  637,
      638,  639,  640,  641,  641,  642,  643,  644,  644,  645,
      646,  647,  648,  648,  648,  648,  648,  649,  650,  650,
      651,  652,  652,  653,  653,  653,  653,  653,  653,  653,
      654,  655,  655,  656,  657,  657,  658,  658,  659,  659,
      659,  659,  659,  659,  659,  660,  660,  661,  662,  663,
      664,  665,  665,  665,  666,  666,  667,  667,  667,  667,
      667,  667,  667,  668,  668,  668,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      669,  670,  671,  671,  671,  672,  672,  673,  673,  674,
      674,  674,  675,  675,  675,  675,  676,  676,  676,  676,
      676,  676,  677,  678,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  680,
      681,  682,  683,  683,  684,  685,  685,  685,  685,  686,
      687,  687,  687,  687,  688,  688,  688,  688,  689,  689,
      689,  690,  691,  691,  692,  693,  693,  693,  693,  694,
      694,  695,  696,  697,  697,  697,  698,  698,  698,  698,

      698,  698,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  703,
      704,  704,  704,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  707,  707,  707,  707,  708,  709,  710,  712,
      713,  714,  714,  715,  715,  715,  715,  716,  717,  717,
      717,  717,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  719,  719,  720,  720,  720,  720,  720,  720,
      721,  721,  721,  721,  721,  722,  723,  724,  725,  726,
      726,  726,  726,  727,  728,  728,  728,  728,  729,  729,
      729,  729,  729,  729,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  731,  731,  731,  731,
      731,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  733,  734,  735,  736,  736,  736,  736,  737,  738,
      738,  738,  738,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  741,
      742,  742,  742,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  744,
      745,  746,  748,  749,  750,  751,  753,  755,  756,  757,
      758,  760,  761,  762,  763,  764,  765,  766,  767,  768,

      769,  769,  770,  770,  770,  770,  770,  770,  770,  770,
      771,  772,  773,  774,  775,  775,  775,  775,  775,  775,
      776,  777,  778,  779,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  789,  790,  790,  790,  790,  791,  792,
      793,  794,  795,  796,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  798,  798,  798,  799,  800,
      800,  800,  801,  801,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  803,  803,  804,
      804,  804,  804,  804,  804,  804,  805,  805,  805,  807,
      807,  809,  809,  809,  810,  811,  811,  813,  813,  813,

      814,  814,  814,  814,  814,  814,  815,  816,  816
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   33,   33,   37,   38,   39,   40,   41,
       33,   42,   33,   43,   44,   45,   33,   33,   33,   33,
       46,   47,   48,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   33,   59,   60,   61,   62,
       63,   64,   33,   65,   66,   67,   68,   69,   70,   71,
       72,   33,   73,   74,   75,   76,    1,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   20,   21,   22,   23,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    1,   26,   27,   28,   25,
       25,   25,   25,   25,   25,   25,   25,   29,   25,   25,
       25,   30,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   31,   32,   33,   34,   35
    } ;

static yyconst flex_int16_t yy_base[1455] =
    {   0,
        0,    0,    0,   76,  150,  226,   76,   77,  302,    0,
      379,    0,  456,  532,  608,  684,  760,    0,  837,    0,
       79,   80,   81,   82,  914,  990, 1066,    0, 1143,    0,
     1220,    0, 1297,    0, 1374,    0,   89,   92, 1451,    0,
       93,   98, 1528,    0,  111,  130,  167,  190,   97,   99,
     1605, 1682,  187,  200,  114,  144,  216,  243,  118,  131,
     1759,    0,  464,  480,  135,  140, 1836,    0, 1913,    0,
      238,  250,  251,  461, 1990,    0,  468,  470,  496,  546,
     2067, 2143,  164,  209,  203,  254,  550,  625,  215,  217,
     5534,10650,10650,  493,  516, 5526, 5520, 5501,  252,  549,

     2214, 2275,  266, 2344, 2419,  103,  104,  640,  939,  550,
      641,10650,10650, 5518,  161,  478,  657,10650,10650,   86,
      465,10650,10650,    0,  165,  580,10650,  715,  719, 1636,
     2093, 5501,  723,  586,  635,10650,10650, 5516,  576,  693,
     5497, 1653,10650,10650, 2493,  928,  951,  960,10650, 2174,
     1016, 1022, 2225, 2233, 5494, 1039,  746,10650,10650,    0,
      598,10650,10650, 5508,  979,10650,10650, 5507, 1620,10650,
    10650, 5502,  954, 1012, 2116,10650,    0,10650,  266,10650,
    10650,    0, 1711, 1661,10650, 1644, 1719, 2301, 2309, 5479,
     2102, 2124, 1044,10650,10650,    0, 5483, 2182,10650,10650,

     5482, 2198,    0,10650, 2203,10650,10650,    0, 5450,  578,
    10650, 5448, 2332, 2568,10650,    0, 5445,10650,  287,10650,
     5485, 5442,    0,10650,10650, 5471, 5475, 5432,  226,10650,
    10650, 2210,10650,  504,10650,10650,  666, 2258,10650, 1672,
    10650, 5435,    0,10650,10650,  201,  612,    0,10650,10650,
     1681, 2035,10650,10650, 2271,10650,10650,    0, 2285,    0,
    10650,10650,10650,10650, 2323,10650,10650, 2333,10650,10650,
        0,  273, 5434,10650,10650,    0,  482, 5433,    0,10650,
     5426, 5425,10650,10650,    0, 5429,    0,10650, 5460, 5427,
        0,10650,10650, 5399,   66,10650,10650,    0, 5456, 5418,

        0,10650, 5417,    0,    0,10650,10650,    0,10650,10650,
     5416, 5413,10650,10650, 5411, 2360, 2637, 2128, 2193, 5409,
     5450,10650,    0, 5433, 5428,    0,  205,  467,10650,10650,
     2713, 5426,  256,  570,  688, 2338,  996,  609,  161,  487,
     2407,  591,  632, 5398, 5381,10650, 5431,  514, 2789, 5385,
      513,10650,10650,    0, 2433, 2342, 2358, 2409, 2474, 2864,
      734, 2457, 1631, 1728, 2468,  920, 2487, 2527, 1738,10650,
     2205, 2506, 2520, 2557, 5439,10650, 2246, 1680, 2298, 1749,
    10650, 2537,10650, 5381,  911, 5425,  913, 5410, 2107,10650,
     5372, 2584, 2601, 5408, 2609, 2618, 2371, 2665, 2635, 2292,

     2169,10650, 5367, 2647, 2677, 5399, 5414,10650, 2420, 2113,
     2534, 2381,10650, 2686, 5408,  123, 2938, 3014, 5406,10650,
     2653, 2381, 2745, 5405, 2392,10650, 2748, 2693, 2800, 5388,
     2817, 2825, 2740, 2829, 2892,    0, 2896, 2772, 2851, 2401,
        0, 2420,10650, 5349, 5401,10650, 2424,10650, 5313, 5362,
    10650, 2442,10650, 5308, 5360,10650, 2607, 2467, 2610, 2533,
    10650, 2823,  943, 2178,10650, 2209, 2967, 2869,    0, 3043,
     5343, 3071, 2543,10650, 5302, 2918, 3093, 5335, 3101, 2975,
     2922, 3118, 2999, 2580,10650, 5297, 3126, 3135,    0, 5338,
     5341, 5330, 2745,10650, 5287, 5328, 5287, 2751,10650, 5283,

        0, 2777,10650, 5249,    0, 5245, 1008,10650, 5257, 5254,
    10650, 5293, 2856,10650, 5238,    0, 5237, 1663, 5287, 5286,
    10650, 5232,    0,10650,10650, 5229, 5226, 2904,10650, 5224,
     2456,10650, 2476, 2927,10650, 5223, 2963,10650, 5229, 5211,
        0,  466, 5215, 5209,    0, 5206, 5209, 5213,  611, 5201,
     2932,10650, 5200,    0, 2989,10650, 5199,    0, 2994,10650,
     5195, 3003,10650, 5193,  945, 5243,  987, 5228, 5190,  994,
     5240, 1619, 5222, 5184,    0, 5227,  438,    0, 5175,    0,
      270, 5170,    0,    0, 5169,  727, 5209,    0, 5166,    0,
     5165,    0,    0, 5164, 5197, 5161, 5163, 5157, 5193,    0,

     5197, 1056, 5183,10650,10650, 5176, 3194, 5175, 5183,10650,
     5183, 5166,  987, 5141, 5125, 1586, 2061,  646, 2119, 2760,
      679, 3029,10650, 2144,  911,  920, 5131, 5130, 5173, 1655,
     3141,    0, 2344, 5112, 3079,10650,10650, 3271,    0,    0,
     3107, 3113, 3153, 2362, 2578, 3176,10650, 3220, 3228, 2482,
     2671, 2792, 3216, 5126,    0, 5125, 3053, 3159, 5124, 5157,
     3149, 3242, 3281,  577, 3348, 3304, 3318, 3361, 5164, 2661,
     3039, 5115, 5114, 5113, 3287, 3312, 3358, 3408, 3253, 3430,
     3438, 5107, 5105,    0,    0, 5144, 5103, 5092, 5100, 5066,
     5061,    0,    0, 5056, 5052, 5049, 5047, 5041, 5040, 5032,

     5031, 5017, 5025, 5012, 5011, 5012, 2911, 4997, 5005, 5004,
     4996, 4995, 4987, 4980, 4973,    0, 4967,    0, 4961,10650,
    10650,10650, 4956, 4986, 2570, 4952,    0, 4951,10650, 1718,
        0, 4990, 4945, 4943, 4942,10650, 4937, 2195, 4935, 4983,
        0, 3211, 2697,10650, 4957, 1672, 4926, 4891, 2135, 2179,
     2221, 3943, 3146, 2287, 3307, 2202, 3917, 3902,10650, 2701,
    10650,    0, 3884, 2767, 3186, 3882, 3461, 3895, 3112, 3443,
     3380, 3479, 3495, 3492, 3877, 3876, 3489,10650, 3501, 3875,
     3501, 3569, 3645, 3537,10650, 3871, 3869, 3868, 3510,    0,
     3598, 3674, 3397, 3861, 3856, 3897, 3843, 3841, 3833, 3816,

     3810,    0, 3804, 3803, 3786, 3570, 3785, 3777, 3776, 3775,
     3779, 3774,10650, 3757, 3754, 3746,10650, 3740, 3749, 3726,
     3721, 3724, 3722, 3714, 3707, 3705, 3699, 3696, 3692, 2791,
     3686, 3684, 2110, 3723, 3673, 3666, 3661, 3660, 3653,10650,
     3696, 3532,10650, 3685, 3684, 3648, 3628, 2394, 2469, 3373,
     3402,10650, 2611, 3623, 3630, 2875, 3080, 3602, 3247, 3559,
     3563, 3682, 3586, 3620, 3619, 3606, 3663, 3683, 3602, 3599,
     3583, 3693, 3722, 3574, 3572, 3570, 3552, 3554, 3543, 3542,
     3537, 3535, 3532, 3504, 3495, 3485, 3501,  135, 3475, 3480,
     2892, 3479, 3478, 3477, 3471, 3469, 3463, 3458, 3432, 3441,

     1656, 3422, 3427, 3421,  896, 3423, 3412, 3410, 3403, 3402,
     3401, 3390, 3383, 3382, 3372, 2457, 3371, 3360, 3355, 3339,
     3335, 3352, 3320,10650, 3291, 3292, 2268, 2316, 3413,10650,
     3315, 3541, 3279, 3268, 3698,10650, 3702, 3727, 3715, 3275,
     3264, 3263, 3732, 3745, 3257, 3256, 3252, 3754, 3786, 3808,
     3250, 3242, 3241,10650, 3240, 3236, 3215, 3213, 3203, 3202,
     3195, 1686, 3185, 3169, 3170, 3164, 3160, 3137, 3125, 3130,
     3122, 3124, 3122, 3106, 3098,10650, 3092,    0,    0, 3094,
    10650, 3067, 2953, 3068, 3063, 3073, 3057, 3056, 3050, 3049,
     3048, 3028, 3026, 3021, 3008, 2998, 2992, 2991, 2985, 2984,

     2978, 2974, 2981, 2948, 2935, 2695, 2970, 3609, 2917, 2910,
     3575, 3776, 3780, 3779, 2916, 2910, 2909, 3796, 3817, 2902,
     2895, 2894, 3827, 2888, 2868, 2863, 2853, 2852, 2847, 2838,
     2837, 2825, 2814, 2816,    0, 2803, 2803, 2788, 2787,10650,
     2798, 2785, 2781, 2760, 2759, 2752, 2742,    0,10650,10650,
     2741, 2730,10650, 2733, 2716, 2691, 2685, 2670, 2650, 2643,
     2642, 2636, 2628, 2622, 2610, 2590, 2570, 2569, 2551, 2544,
     2543, 2526, 2544, 2499, 2492, 3734, 2538, 2533, 3525, 3849,
     3816, 3837,10650,10650,10650, 3839, 3852,10650,10650,10650,
     3850,10650,10650,10650,10650,10650,10650,10650,10650,10650,

     2488,10650, 2486, 2463, 2453, 2451, 2458, 2441, 2415,10650,
    10650,10650,10650,10650, 2404, 2401, 3048, 2405, 2362,10650,
    10650,10650,10650,10650,10650,10650,10650,10650,10650,10650,
    10650,10650,10650,10650, 2385, 2377, 3755,10650,10650,10650,
     3874, 3066, 2347, 3878, 2327, 2277, 2270, 2263, 2229, 2203,
     2166, 2164, 2120, 2081,10650, 2074, 2072,10650,10650, 2097,
     3883, 3319,  153, 3885, 2049, 2027, 1682, 1645, 1601, 1603,
     1580, 1563, 1010, 3065,  988,  956, 3889, 2754, 3896,  917,
      684,  684,  682,  625,  593,10650, 3081,  594, 3444, 2041,
     3820,  542,  482, 3187,10650,  489, 3311, 2244,  452, 3385,

      416,  654,   50, 3386, 1579,10650, 3901,10650, 3969, 4004,
     4039, 4074, 4109, 4144, 4179, 4214, 4249, 4284, 4319, 4354,
     4389, 4424, 4459, 4494, 4529, 4564, 4599, 4634, 4669, 4704,
     4739, 4774, 4809, 4844, 4879, 4914, 4949, 4977, 4999, 5018,
     5042, 5063, 5087, 5121, 5150, 3637, 5169, 5203, 5237, 5271,
     5306, 5335, 5370, 5400, 5434, 5468, 5502, 5522, 5557, 5592,
     5627, 5656, 3882, 5690, 3891, 5724, 5758, 5792, 5826, 3899,
     5845, 5865, 5900, 5920, 5955, 5990, 6010, 6045, 6080, 6114,
     6144, 6179, 6199, 6234, 3925, 6253, 4961, 6272, 6307, 6327,
     6362, 6397, 6417, 6439, 6474, 6509, 6544, 6573, 6607, 4969,

     6624, 6646, 6661, 6691, 4992, 3936, 6713, 6742, 6773, 6802,
     6831, 6850, 6878, 6912, 6946, 6980, 7015, 7032, 7067, 7096,
     7125, 7160, 7195, 7225, 7254, 7288, 7322, 7356, 7391, 7425,
     7445, 7480, 7515, 7550, 7579, 7608, 7642, 7676, 5184, 7710,
     7744, 7778, 7812, 7829, 7848, 7876, 7896, 7931, 7951, 7986,
     8021, 8049, 8069, 8104, 8139, 8173, 8203, 8238, 8258, 8293,
     8312, 8340, 8359, 8387, 8422, 8442, 8477, 8512, 2859, 8542,
     8564, 8584, 8619, 8654, 8689, 8706, 8741, 8761, 8778, 8808,
     8843, 8877, 3916, 8903, 8935, 8966, 5218, 5011, 9000, 9025,
     9054, 5252, 9089, 9106, 9135, 9164, 9199, 9229, 9259, 9294,

     9328, 9357, 9386, 9420, 9454, 9488, 9505, 5260, 9524, 5415,
     9541, 9576, 5483, 5491, 3884, 9606, 9626, 9648, 9683, 9703,
     9722, 9752, 5031, 9783, 9815, 9846, 9881, 5076, 9915, 9945,
     9971,10006,10035,10070,10100,10129, 5514,10163,10197,10216,
    10233,10263,10285,10305,10335,10369,10404,10439,10474,10509,
    10544,10579,10614, 5056
    } ;

static yyconst flex_int16_t yy_def[1455] =
    {   0,
     1209, 1209, 1208,    3, 1210, 1210, 1211, 1211, 1208,    9,
     1208,   11, 1212, 1212, 1213, 1213, 1208,   17, 1208,   19,
     1214, 1214, 1215, 1215, 1216, 1216, 1208,   27, 1208,   29,
     1208,   31, 1208,   33, 1208,   35, 1217, 1217, 1208,   39,
     1218, 1218, 1208,   43, 1219, 1219, 1220, 1220, 1221, 1221,
     1222, 1222, 1223, 1223, 1224, 1224, 1225, 1225, 1226, 1226,
     1208,   61, 1227, 1227, 1228, 1228, 1208,   67, 1208,   69,
     1229, 1229, 1229, 1229, 1208,   75, 1230, 1230, 1231, 1231,
     1232, 1232, 1233, 1233, 1234, 1234, 1235, 1235, 1236, 1236,
     1208, 1208, 1208, 1208, 1208, 1237, 1238, 1239, 1239, 1240,

     1208, 1241, 1242, 1243, 1208, 1208, 1239, 1239, 1240, 1239,
     1208, 1208, 1208, 1244, 1245, 1245, 1245, 1208, 1208, 1208,
     1208, 1208, 1208, 1246, 1247, 1208, 1208, 1208, 1208, 1248,
     1248, 1208, 1249, 1208, 1250, 1208, 1208, 1251, 1252, 1252,
     1208, 1252, 1208, 1208, 1253, 1254, 1254, 1254, 1208, 1254,
     1208, 1208, 1255, 1255, 1208, 1256, 1257, 1208, 1208, 1258,
     1208, 1208, 1208, 1259, 1208, 1208, 1208, 1260, 1208, 1208,
     1208, 1261, 1262, 1262, 1262, 1208, 1263, 1208, 1264, 1208,
     1208, 1265, 1266, 1208, 1208, 1208, 1208, 1267, 1267, 1208,
     1268, 1208, 1269, 1208, 1208, 1270, 1271, 1208, 1208, 1208,

     1272, 1208, 1273, 1208, 1208, 1208, 1208, 1274, 1208, 1275,
     1208, 1276, 1208, 1208, 1208, 1277, 1208, 1208, 1208, 1208,
     1278, 1208, 1279, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1280, 1208, 1208, 1280, 1208, 1208, 1208,
     1208, 1208, 1281, 1208, 1208, 1208, 1208, 1282, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1283, 1208, 1284,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1285, 1286, 1208, 1208, 1208, 1287, 1288, 1208, 1289, 1208,
     1208, 1208, 1208, 1208, 1290, 1208, 1291, 1208, 1208, 1208,
     1292, 1208, 1208, 1208, 1208, 1208, 1208, 1293, 1294, 1208,

     1295, 1208, 1208, 1296, 1296, 1208, 1208, 1297, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1298, 1208, 1208, 1208,
     1299, 1208, 1300, 1301, 1302, 1303, 1208, 1302, 1208, 1208,
     1304, 1302, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1305, 1298,  349,
      349, 1208, 1208, 1306, 1307, 1308, 1308, 1308, 1308, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1302, 1208, 1208,
     1302, 1302, 1208, 1208, 1309, 1208, 1310, 1311, 1310, 1208,
     1208, 1310, 1208, 1208, 1312, 1313, 1312, 1208, 1208, 1208,
     1208, 1208, 1314, 1208, 1314, 1315, 1316, 1314, 1315, 1317,

     1208, 1208, 1208, 1316, 1316, 1318, 1319, 1208, 1320, 1321,
     1320, 1208, 1208, 1320, 1322, 1322, 1323, 1323, 1322, 1208,
     1324, 1325, 1324, 1322, 1208, 1208, 1324, 1208, 1326, 1208,
     1326, 1327, 1328, 1326, 1208, 1329, 1327, 1328, 1328, 1330,
     1331, 1208, 1208, 1208, 1332, 1208, 1208, 1208, 1208, 1333,
     1208, 1208, 1208, 1208, 1334, 1208, 1335, 1336, 1335, 1208,
     1208, 1335, 1337, 1208, 1208, 1337, 1338, 1208, 1339, 1338,
     1208, 1340, 1208, 1208, 1208, 1208, 1341, 1208, 1341, 1342,
     1343, 1341, 1342, 1208, 1208, 1208, 1343, 1343, 1344, 1345,
     1346, 1345, 1208, 1208, 1208, 1347, 1208, 1208, 1208, 1208,

     1348, 1208, 1208, 1208, 1349, 1208, 1350, 1208, 1351, 1208,
     1208, 1352, 1208, 1208, 1208, 1353, 1208, 1208, 1354, 1354,
     1208, 1208, 1355, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1356, 1208, 1356, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1357, 1208, 1208, 1208, 1358, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1359, 1208, 1208, 1208, 1360, 1208, 1208,
     1208, 1208, 1208, 1208, 1361, 1362, 1361, 1208, 1208, 1363,
     1364, 1363, 1208, 1208, 1365, 1208, 1208, 1366, 1208, 1367,
     1208, 1208, 1368, 1369, 1208, 1370, 1371, 1372, 1208, 1373,
     1208, 1374, 1375, 1208, 1208, 1208, 1208, 1208, 1376, 1377,

     1378, 1208, 1379, 1208, 1208, 1379, 1380, 1379, 1378, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1381, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1382,
     1382, 1383, 1208, 1384, 1385, 1208, 1208, 1386, 1387, 1388,
     1389, 1389, 1208, 1208, 1208, 1208, 1208, 1379, 1208, 1208,
     1390, 1390, 1391, 1208, 1392, 1208, 1393, 1393, 1208, 1394,
     1395, 1395, 1396, 1208, 1397, 1398, 1398, 1399, 1400, 1208,
     1401, 1208, 1208, 1208, 1402, 1402, 1403, 1404, 1405, 1406,
     1406, 1208, 1208, 1407, 1408, 1409, 1208, 1208, 1208, 1208,
     1208, 1410, 1411, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1412, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1413, 1208, 1414, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1415, 1208, 1208, 1416,
     1417, 1418, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1419,
     1420, 1421, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1422, 1422, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1423, 1424, 1208, 1425, 1426, 1427, 1428, 1429, 1429,
     1208, 1208, 1430, 1431, 1208, 1208, 1432, 1208, 1432, 1208,
     1433, 1434, 1434, 1435, 1208, 1208, 1208, 1208, 1436, 1437,
     1438, 1438, 1439, 1208, 1208, 1440, 1208, 1208, 1208, 1208,

     1208, 1441, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1442, 1443, 1208, 1208, 1208, 1208, 1208, 1208,
     1444, 1421, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1445, 1208, 1208, 1208, 1208, 1208, 1425, 1208, 1208, 1429,
     1429, 1208, 1431, 1208, 1208, 1208, 1433, 1435, 1208, 1208,
     1208, 1436, 1446, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1447, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1442, 1208, 1208, 1208, 1208,
     1208, 1444, 1208, 1208, 1208, 1208, 1208, 1208, 1448, 1208,
     1445, 1445, 1208, 1208, 1425, 1208, 1429, 1429, 1431, 1208,
     1208, 1208, 1433, 1435, 1208, 1208, 1208, 1436, 1446, 1446,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1449, 1450, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1448, 1448, 1208, 1208,
     1425, 1429, 1429, 1431, 1208, 1208, 1208, 1433, 1435, 1208,
     1208, 1208, 1436, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1451, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1452, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1425, 1429,
     1429, 1431, 1208, 1208, 1208, 1433, 1435, 1208, 1208, 1208,
     1436, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1453, 1208, 1208, 1208,
     1425, 1208, 1454, 1429, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1453,
     1453, 1425, 1454, 1429, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1425, 1454, 1429, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1425, 1454,
     1429, 1208, 1208, 1208, 1208, 1208, 1208, 1454, 1208, 1208,

     1208, 1454, 1208, 1208, 1454, 1208, 1454,    0, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208
    } ;

static yyconst flex_int16_t yy_nxt[10728] =
    {   0,
       93,   94,   95,   93,   94,   93,   96,   93,   97,   93,
       93,   93,   93,   93,   98,   93,   99,  100,   93,   98,
       98,   98,   93,  101,   93,   93,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,   93,  104,   93,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   93,   93,   93,   93,   93,  105,  119,  119,
      105,  163,  163,  167,  167,  164,  164,  168,  168,  106,
      107,  204,  108,  109,  204,  211,  110,  110,  111,  231,

      211,  231,  120,  120,  366,  366,  212,  366,  366,  383,
      383,  212,  219,  220,  585,  219,  244,  221,  245,  213,
      254, 1035,  121,  121,  213,  165,  165,  169,  169,  664,
      326,  219,  220,  254,  219,  205,  221,  267,  205,  214,
      246,  584,  267,  232,  214,  232,  244,  419,  245,  111,
      112,  112,  113,  112,  112,  112,  114,  222,  112,  112,
      247,  112,  112,  112,  255,  112,  302,  112,  116,  224,
      246,  225,  116,  112,  112,  112,  222,  255,  378,  379,
      226,  268,  386,  379,  965,  227,  268,  388,  240,  241,
      247,  240,  224,  228,  225,  112,  117,  112,  621,  640,

      966,  240,  241,  226,  240,  305,  602,  379,  227,  602,
      303,  302, 1178,  229,  306,  307,  228,  314,  249,  314,
      250,  621,  112,  112,  112,  112,  112,  112,  113,  112,
      112,  112,  114,  242,  112,  112,  229,  112,  112,  112,
      280,  112,  251,  112,  116,  249,  242,  250,  116,  112,
      112,  112,  280,  280,  542,  303,  305,  610,  543,  327,
      610,  315,  252,  315,  281,  306,  307,  464,  328,  251,
      464,  112,  117,  112,  527,  724,  281,  282,  326,  526,
      325,  465,  325,  325,  281,  325,  325,  325,  518,  252,
      566,  518,  326,  519,  725,  568,  281,  282,  112,  112,

      112,  112,  122,  122,  123,  122,  122,  122,  122,  122,
      124,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  122,  126,  122,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  122,  122,  122,  122,  125,  127,
      128,  129,  128,  128,  127,  127,  127,  130,  127,  127,
      127,  127,  127,  127,  127,  127,  131,  127,  127,  127,

      127,  132,  127,  127,  127,  127,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  127,  134,  127,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  127,  127,  127,  135,  133,  136,  136,  137,  136,
      136,  136,  138,  280,  136,  136,  261,  136,  136,  136,
      288,  136,  288,  136,  140,  262,  263, 1204,  140,  141,
      136,  136,  261,  603,  289,  721,  289,  282,  383,  383,
      264,  262,  263,  326,  316, 1208,  379,  316,  292,  571,

      379,  136,  142,  136,  573,  531,  264,  282,  531,  293,
      265, 1203,  722,  384,  290,  532,  290,  318,  319,  317,
      318,  636,  294,  620,  379,  702,  265,  703,  136,  136,
      136,  136,  136,  136,  137,  136,  136,  136,  138,  317,
      136,  136,  295,  136,  136,  136,  620,  136,  292,  136,
      140, 1201,  309, 1035,  140,  141,  136,  136,  637,  293,
      310,  329,  320,  325,  330,  325,  331,  371,  631,  372,
      372,  372,  294,  310,  310,  326,  326,  136,  142,  136,
      508,  389,  390,  420,  389,  638,  611,  401,  402,  632,
      401,  509,  295,  410,  411,  333,  311,  312,  411,  442,

      443,  420,  442, 1199,  136,  136,  136,  136,  143,  143,
      144,  143,  143,  143,  145,  612,  143,  143,  626,  143,
      143,  143,  411,  143,  510,  143,  147,  309,  391,  620,
      147,  148,  149,  143,  403,  310,  404,  404,  404,  404,
      626,  367,  373,  405,  367,  373,  444,  327,  310,  310,
      620, 1196, 1194,  143,  150,  143,  368,  374,  380,  381,
      544,  380,  365,  365,  709,  542,  326, 1208,  620,  543,
     1208,  311,  312,  620, 1208,  379,  751, 1208,  710,  379,
      143,  143,  143,  143,  143,  143,  144,  143,  143,  143,
      145,  620,  143,  143, 1035,  143,  143,  143,  751,  143,

      640,  143,  147,  379, 1205,  382,  147,  148,  149,  143,
     1208,  411,  620,  365,  365,  411,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  613,  143,
      150,  143,  393,  729,  620,  366,  393,  394,  366,  411,
      393,  394, 1035, 1193,  731,  394,  400,  438,  438,  438,
      438,  613,  614,  615,  439, 1035,  143,  143,  143,  143,
      127,  151,  152,  151,  151,  127,  127,  127,  153,  127,
      127,  127,  127,  127,  127,  127,  127,  154,  127,  127,
      127,  127,  155,  127,  127,  127,  127,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  127,  134,  127,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  127,  127,  127,  157,  156,  158,  158,  159,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  158,  161,  158,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  160,  158,
      158,  158,  158,  160,  170,  170,  171,  170,  170,  170,
      172,  366,  170,  170,  366,  170,  170,  170,  386,  170,
      386,  170,  174,  388,  420,  388,  174,  170,  170,  170,
      369,  370,  755,  369,  464,  422,  423,  464,  756,  986,
      423,  329,  420,  325,  330,  325,  331, 1208,  465,  170,
      175,  170,  566,  987,  755,  326,  424,  568, 1208,  423,
      756,  458,  459,  423,  423, 1208,  459, 1208,  423, 1192,
      447,  448,  423,  447,  420,  333,  170,  170,  170,  170,
      170,  170,  171,  170,  170,  170,  172,  423,  170,  170,

      459,  170,  170,  170,  566,  170,  423,  170,  174,  568,
      508,  571,  174,  170,  170,  170,  573,  428,  428,  428,
      428,  509, 1188,  428,  428,  428,  428,  449,  746, 1208,
      459,  619,  620,  429,  459,  170,  175,  170,  430,  429,
      435,  428,  428,  435,  430,  487,  487,  487,  487, 1187,
      436,  746,  488,  619,  510,  620,  429,  602,  459, 1185,
      602,  430,  170,  170,  170,  170,  176,  176,   92,  176,
      176,  176,  176,  176,  177,  176,  176,  176,  176,  176,
      176,  178,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  176,  176,  176,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  176,  176,
      176,  176,  179,  180,  180,  181,  180,  180,  180,  180,
      180,  182,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  180,  184,
      180,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  180,  180,  180,  180,  183,
      185,  186,  187,  186,  186,  185,  185,  185,  188,  185,
      185,  185,  185,  185,  185,  185,  185,  189,  185,  185,
      185,  185,  190,  185,  185,  185,  185,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  185,  192,  185,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  185,  185,  185,  193,  191,  194,  194,  195,

      194,  194,  194,  194,  194,  196,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  194,  198,  194,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  194,
      194,  194,  194,  197,  199,  199,  200,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  199,
      202,  199,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  199,  199,  199,  199,
      201,  206,  206,  207,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  206,  209,  206,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  206,  206,  206,  206,  208,   92,   92,
      215,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,   92,  217,   92,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

       92,   92,   92,   92,  216,  233,  234,  235,  233,  234,
      233,  233,  233,  233,  233,  233,  236,  233,  233,  233,
      233,  452,  453,  233,  452,  640,  749,  233,  233,  233,
      233,  233,  369,  370, 1035,  369,  571,  392,  392,  392,
      392,  573, 1184, 1207,  395,  476,  476,  476,  476,  749,
      233,  238,  233,  393,  412,  413,  760,  412,  394,  760,
     1183,  477,  473,  474,  518,  473,  478,  518,  454,  519,
     1208,  411, 1035,  537,  538,  411,  537,  233,  233,  233,
      233,  233,  233,  234,  235,  233,  234,  233,  233,  233,
      233,  233,  233,  236,  233,  233,  233,  233,  652,  411,

      233,  414,  652,  845,  233,  233,  233,  233,  233,  475,
      981,  397,  468,  468,  468,  468, 1035,  982,  539,  469,
      476,  476,  476,  476,  729,  845,  652,  233,  238,  233,
      470,  470,  470,  471,  546,  731,  477, 1034,  547,  369,
      370,  478,  369, 1182,  548,  644,  549,  645,  645,  645,
      380,  381, 1035,  380,  233,  233,  233,  233,  233,  256,
      256,  257,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  256,  259,  256,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  256,  256,  256,  256,  258,  269,  269,  270,  269,
      269,  269,  269,  269,  271,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  269,  273,  269,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  269,  269,
      269,  269,  272,  274,  274,  275,  274,  274,  274,  274,
      274,  276,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  274,  278,
      274,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  274,  274,  274,  274,  277,
      283,  283,  284,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  283,  286,  283,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  283,  283,  283,  283,  285,  296,  296,  297,
      296,  296,  296,  298,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  550,  296,  296, 1181,  640,  546,  296,
      296,  296,  547,  296,  398,  398,  398,  398,  548,  750,

      549,  395, 1198,  476,  476,  476,  476, 1180,  389,  390,
      393,  389,  296,  300,  296,  394,  729,  460,  461,  477,
      460, 1138,  750, 1176,  478,  484,  485,  731,  484,  318,
      319,  662,  318, 1208,  459,  662, 1175, 1174,  459,  296,
      296,  296,  296,  296,  296,  297,  296,  296,  296,  298,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  662,
      296,  296,  459,  620,  462,  296,  296,  296,  397,  296,
      401,  402,  486,  401,  320,  425,  426,  848,  425,  464,
     1208, 1173,  464,  493,  494,  754,  493,  620,  296,  300,
      296, 1208,  423,  465,  318,  319,  423,  318, 1208,  498,

      499,  848,  498,  761,  502,  503,  650,  502,  754,  650,
      464,  528,  529,  464,  528,  296,  296,  296,  296,  334,
      423,  849,  427, 1172,  465, 1171,  428,  428,  428,  428,
      495,  326,  335,  431,  434,  434,  434,  434,  853,  320,
      761,  431,  429,  336,  337,  849,  500,  430,  338,  339,
      429,  504,  850,  340,  341,  430,  342,  343,  530,  534,
      535,  853,  534,  378,  379,  336,  337,  761,  379, 1170,
      338,  339,  551,  552,  850,  551,  340,  341,  344,  345,
      342,  343,  346,  346,  346,  346,  555,  556, 1169,  555,
      640,  347,  379,  658,  658,  658,  658, 1202,  346,  346,

      433,  348,  476,  476,  476,  476,  536, 1006,  433,  479,
      482,  482,  482,  482,  620, 1208,  379,  479,  477,  553,
      379,  348, 1168,  478,  559,  560,  477,  559,  350,  351,
     1006,  478, 1167,  557,  562,  563,  620,  562, 1166,  511,
      511,  511,  511,  633,  379,  633,  633,  352,  633,  353,
      354,  346,  346,  346,  346,  511,  511,  620,  512,  633,
      347,  316,  633,  650,  316,  616,  650,  346,  346,  617,
      348,  561,  404,  404,  404,  404,  481,  618,  512,  405,
      620,  564,  412,  413,  481,  412,  317,  616,  640, 1165,
      348,  617,  357,  425,  426, 1163,  425,  358,  359,  667,

      618, 1159,  670,  667,  640,  670,  317,  511,  622, 1158,
      633,  622,  436,  633,  634, 1157,  352,  641,  353,  354,
      360,  442,  443,  360,  442,  447,  448,  667,  447,  927,
      634,  623,  361,  361,  624,  362,  363,  410,  411,  364,
      364,  365,  411,  452,  453,  317,  452,  325,  625,  325,
      325,  927,  325,  325,  325,  640,  624,  531,  367,  326,
      531,  367, 1156,  729, 1154,  317,  411,  532, 1153,  373,
      642,  625,  373,  643,  731,  633, 1152, 1208,  633,  365,
     1208,  634,  636,  650,  374,  676,  650, 1208,  367,  676,
      365,  367,  365,  415,  415, 1151,  415,  415,  415,  416,

      928,  415,  415,  374,  415,  415,  415, 1150,  415,  365,
      415,  418, 1149,  676, 1148,  418,  415,  419,  415,  637,
      640,  373,  928,  371,  373,  372,  372,  372,  646,  647,
      365,  646,  326, 1147,  460,  461,  374,  460,  415,  418,
      415,  365,  365,  648,  473,  474,  638,  473, 1146,  649,
     1145, 1208,  411,  326,  378,  379,  411, 1140,  373,  379,
      365,  373, 1139, 1136, 1135,  415,  415,  415,  415,  513,
      514,  830,  513,  643,  830,  511,  511,  511,  511,  365,
      411,  484,  485,  379,  484,  392,  392,  392,  392, 1134,
      319,  511,  511,  365,  512,  644,  653,  645,  645,  645,

      649,  393,  398,  398,  398,  398,  394, 1133, 1132,  395,
     1208, 1208, 1208, 1208,  512, 1131,  515, 1208,  393,  392,
      392,  392,  392,  394,  458,  459, 1208, 1208,  459,  459,
      365, 1208,  459, 1130, 1129,  393,  392,  392,  392,  392,
      394,  400,  620,  511,  346,  346,  346,  346,  404,  404,
      404,  404,  393,  459, 1128,  405,  459,  394,  400,  420,
      346,  346,  670,  597,  620,  670,  398,  398,  398,  398,
      422,  423,  436,  395, 1127,  423,  397,  420, 1208, 1208,
     1208, 1208,  393,  597, 1208, 1208, 1126,  394,  378,  652,
      350,  351, 1125,  652,  428,  428,  428,  428,  843,  423,

     1124,  843,  760,  410,  411,  760, 1123, 1122,  411,  352,
      429,  353,  354,  604, 1121,  430,  604,  652,  604,  604,
      604,  604,  604,  604,  604,  605,  604,  606,  604,  606,
      607,  604,  411, 1076, 1120,  604,  604,  604,  604,  609,
      397,  438,  438,  438,  438,  663,  493,  494,  439,  493,
     1119, 1208,  498,  499,  420,  498, 1076, 1118,  604,  604,
      604,  622, 1208,  423,  622,  422,  423,  423,  856, 1208,
      423,  856,  420,  438,  438,  438,  438, 1117,  502,  503,
      439,  502, 1116, 1115,  623,  604,  604,  604,  604,  604,
      633,  423,  830,  633,  423,  830, 1208, 1208, 1208, 1208,

      640,  434,  434,  434,  434, 1114,  538,  668,  431, 1208,
      652, 1190, 1208, 1208,  652, 1208, 1112,  429, 1208, 1208,
     1208, 1208,  430, 1111, 1110, 1208,  435,  428,  428,  435,
      434,  434,  434,  434, 1208, 1208,  436,  431,  652, 1208,
      458,  459,  429, 1109, 1108,  459,  429,  430, 1107, 1106,
     1105,  430, 1208, 1208, 1208, 1208, 1104,  513,  514, 1208,
      513,  634, 1103, 1208, 1208,  360, 1101, 1035,  360,  459,
      468,  468,  468,  468,  727,  433,  856,  361,  361,  856,
      362,  363,  677,  727,  364,  364,  365,  727,  727, 1100,
      317,  471, 1208,  435,  428,  428,  435,  435,  428,  428,

      435, 1099, 1098,  436,  433,  528,  529,  436,  528,  429,
      317, 1097,  817,  429,  430,  817, 1096, 1095,  430,  476,
      476,  476,  476,  487,  487,  487,  487, 1094,  534,  535,
      488,  534, 1093,  551,  552,  477,  551,  365,  415,  415,
      478,  415,  415,  415,  664,  969,  415,  415,  970,  415,
      415,  415, 1092,  415, 1053,  665,  418, 1053, 1090, 1089,
      418,  415,  419,  415,  537,  538, 1088,  537,  468,  468,
      468,  468,  818, 1085, 1084,  469,  476,  476,  476,  476,
     1083, 1078, 1077,  415,  418,  415,  470,  470,  470,  471,
      555,  556,  477,  555,  930,  559,  560,  478,  559, 1075,

      476,  476,  476,  476,  562,  563, 1074,  562, 1073,  539,
      415,  415,  415,  415,  415,  415,  477,  415,  415,  415,
      664,  478,  415,  415, 1072,  415,  415,  415, 1071,  415,
      753,  415,  418,  753, 1070, 1069,  418,  415,  415,  415,
      670, 1068, 1067,  670,  468,  468,  468,  468, 1066, 1155,
      436,  469, 1155,  623,  777,  777,  777,  777, 1065,  415,
      418,  415,  470,  470,  470,  471, 1186, 1142,  319, 1186,
     1142, 1064,  468,  468,  468,  468, 1063,  778, 1062,  469,
      633,  633, 1195,  633,  633, 1195,  415,  415,  415,  415,
      680,  680,  680,  471,  482,  482,  482,  482, 1061, 1060,

     1059,  479, 1208, 1208, 1208, 1208, 1058, 1057,  633, 1208,
      477,  633,  320,  633,  633,  478,  633,  633, 1208,  482,
      482,  482,  482, 1208, 1056, 1055,  479,  487,  487,  487,
      487,  765, 1054, 1052,  488,  477, 1208, 1208, 1208, 1208,
      478,  935,  760, 1208, 1051,  760, 1048,  753, 1047,  761,
      753,  634,  634,  640,  646,  647, 1046,  646,  640,  640,
      779,  779,  779,  779,  769,  770,  410,  662,  481,  771,
      623,  662, 1045,  860, 1044,  649, 1208,  646,  647,  634,
      646, 1043, 1042,  778,  634,  634,  761,  633, 1200, 1041,
      633, 1200,  772,  481,  604,  662, 1040,  604,  649,  604,

      604,  604,  604,  604,  604,  604,  605,  604,  606,  604,
      606,  742,  604,  761, 1039, 1035,  604,  604,  604,  604,
      609,  646,  647,  329,  646,  325,  649,  325,  842,  646,
      647, 1038,  646,  378,  379, 1037,  773,  326,  379,  604,
      743,  604,  649,  857,  772, 1036,  326, 1033,  856,  649,
      649,  856, 1032, 1031,  793,  793,  793,  793,  634, 1208,
      662,  469,  379, 1030,  662, 1029,  604,  604,  604,  604,
      604,  766,  766,  774,  766,  471,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766, 1028,  766,  662,  766,
     1027, 1026, 1025,  649,  766,  766,  766,  766,  410,  411,

     1024,  649, 1022,  411,  458,  676, 1021, 1020,  851,  676,
      420,  851, 1197, 1017, 1016, 1197,  766,  766,  766,  936,
      633,  422,  667,  633, 1208, 1015,  667,  411,  420, 1208,
      676,  852, 1010,  676,  676, 1208,  667, 1009,  781,  852,
      667, 1005, 1208,  766,  766,  764,  766,  766,  415,  415,
      667,  415,  415,  415,  664, 1004,  415,  415,  676,  415,
      415,  415, 1003,  415,  667,  415,  783,  420, 1177,  741,
      783,  415,  415,  415,  929,  458,  459,  929,  422,  423,
      459,  646,  647,  423,  646,  420, 1200, 1206, 1002, 1200,
     1206,  634, 1001,  415,  783,  415,  771,  930,  793,  793,

      793,  793,  649,  932,  459,  469,  932,  423, 1000,  468,
      468,  468,  468,  999, 1008,  789,  790, 1008,  784,  471,
      415,  415,  415,  415,  998,  997,  852,  791,  791,  791,
      471,  468,  468,  468,  468,  996,  995,  930,  469,  468,
      468,  468,  468,  994,  633, 1197,  469,  633, 1197,  680,
      680,  680,  471,  649,  993,  992,  991,  680,  680,  680,
      471,  766,  766,  990,  766,  989,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  988,  766,  985,  766,
      646,  647,  984,  646,  766,  766,  766,  766,  983,  640,
      777,  777,  777,  777,  980,  862,  646,  647,  979,  646,

      861,  649,  779,  779,  779,  779,  766,  766,  766,  378,
      379,  773,  978,  778,  379,  634,  634,  649,  410,  411,
      977,  326,  975,  411,  974,  778,  633,  458,  459,  633,
      973,  972,  459,  766,  766,  859,  766,  766,  379,  971,
      968,  967,  932,  420,  329,  932,  325,  411,  325,  842,
      964,  963,  649,  863,  422,  423,  459,  962,  326,  423,
      633,  420,  867,  633,  633,  852,  961,  633,  649,  415,
      415,  872,  415,  415,  415,  664,  633,  415,  415,  633,
      415,  415,  415,  423,  415,  960,  665,  783,  959, 1141,
      958,  783,  415,  419,  415,  957,  956,  634,  868,  468,

      468,  468,  468,  378,  379,  640,  790,  955,  379,  640,
     1008,  954,  937, 1008,  415,  783,  415,  791,  791,  791,
      471,  884,  885,  953,  938,  952,  886,  951, 1079,  887,
      888,  634,  379,  930,  889,  634,  947,  890,  891,  939,
      892,  415,  415,  415,  415,  415,  415,  634,  415,  415,
      415,  664,  946,  415,  415,  945,  415,  415,  415,  942,
      415,  385,  415,  783,  385,  385,  385,  783,  415,  415,
      415,  385,  941,  940,  936,  468,  468,  468,  468,  934,
      410,  411,  790,  646,  647,  411,  646,  933,  926,  420,
      415,  783,  415,  791,  791,  791,  471,  925,  771,  633,

      422,  423,  633,  633,  649,  423,  633,  420,  924,  411,
      458,  459,  923,  741,  921,  459,  943,  415,  415,  415,
      415,  920,  919,  468,  468,  468,  468,  918,  633,  423,
      790,  633,  378,  379,  917, 1137,  944,  379, 1137,  459,
      588,  949,  949,  949,  471,  915,  948,  914,  640,  410,
      411,  420, 1012,  913,  411,  649, 1161,  912, 1138, 1161,
      911,  379,  422,  423, 1011, 1014,  910,  423,  909,  420,
      634,  458,  459,  640,  634,  908,  459,  633,  411, 1138,
      633,  633, 1018,  907,  633,  906,  905,  468,  468,  468,
      468,  423,  904, 1013,  790, 1019,  378,  379,  903,  634,

      459,  379,  902,  901, 1023,  949,  949,  949,  471,  468,
      468,  468,  468,  410,  411,  900,  790,  633,  411,  899,
      633, 1197,  640,  420, 1197,  379,  640,  949,  949,  949,
      471,  898,  897, 1081,  422,  423,  896,  895,  894,  423,
     1080,  420,  411, 1082,  458,  459,  893,  883,  634,  459,
     1142,  319,  634, 1142,  378,  379,  410,  411,  420,  379,
     1086,  411,  640,  423,  882,  881,  640,  458,  459,  422,
      423,  880,  459,  459,  423,  633,  420,  879,  633,  633,
     1144, 1087,  633,  379, 1161,  411,  633, 1161,  634,  633,
      633, 1091,  634,  633,  878, 1143,  459,  633,  423,  727,

      633,  877,  318,  319,  876,  318,  463, 1138,  727,  463,
      463,  463,  727,  727,  491,  467,  463,  875,  467,  467,
      467,  634,  874,  490,  640,  467,  490,  490,  490,  871,
      870,  640,  869,  490, 1179, 1162,  866,  865,  864, 1164,
      762,  640,  640,  762,  762,  762,  634, 1143, 1189,  565,
      634,  639,  565,  565,  565, 1191,  858,  634,  764,  565,
      639,  634,  855,  639,  639,  639,  854,  623,  634,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  243,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  321,
      321,  847,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  324,  570,  846,  844,  570,  570,
      570,  840,  839,  324,  838,  570,  324,  324,  324,  837,

      836,  324,  835,  324,  324,  324,  324,  588,  832,  831,
      725,  324,  325,  829,  325,  325,  630,  325,  828,  630,
      630,  630,  325,  325,  827,  630,  325,  325,  325,  332,
      826,  332,  332,  332,  332,  768,  332,  825,  768,  768,
      768,  332,  332,  332,  824,  332,  332,  332,  349,  349,
      349,  349,  823,  822,  821,  762,  820,  349,  762,  762,
      762,  819,  349,  349,  816,  349,  349,  349,  815,  349,
      349,  349,  349,  814,  349,  349,  355,  812,  355,  355,
      768,  355,  811,  768,  768,  768,  355,  355,  810,  809,
      355,  355,  355,  356,  356,  356,  356,  808,  807,  806,

      768,  768,  356,  768,  768,  768,  805,  356,  356,  804,
      356,  356,  356,  803,  356,  356,  356,  356,  801,  356,
      356,  375,  375,  800,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  377,  799,  798,  377,
      797,  491,  795,  377,  794,  377,  377,  377,  377,  377,
      788,  787,  786,  377,  377,  377,  785,  377,  377,  377,
      400,  780,  776,  775,  377,  387,  764,  387,  387,  759,
      758,  757,  748,  387,  747,  745,  387,  387,  387,  744,

     1208,  326,  326,  387,  396,  396,  396,  396,  678,  326,
      396,  678,  678,  678,  741,  600,  739,  738,  678,  396,
      737,  736,  396,  735,  734,  733,  588,  396,  728,  726,
      396,  396,  396,  639,  723,  720,  396,  396,  399,  399,
      399,  399,  639,  719,  571,  639,  639,  639,  718,  717,
      566,  716,  715,  399,  714,  399,  399,  399,  713,  712,
      711,  399,  708,  707,  399,  399,  399,  706,  705,  704,
      701,  399,  406,  406,  406,  406,  385,  540,  406,  385,
      385,  385,  700,  699,  686,  698,  385,  686,  686,  686,
      697,  696,  521,  521,  686,  406,  695,  694,  406,  406,

      406,  692,  515,  510,  691,  406,  407,  407,  690,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  409,  689,  688,  409,  497,  687,  491,  409,  685,
      409,  409,  409,  409,  409,  491,  683,  477,  409,  409,
      409,  682,  409,  409,  409,  679,  456,  674,  451,  409,
      417,  417,  673,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,

      417,  417,  417,  417,  417,  421,  421,  446,  672,  421,
      429,  664,  664,  421,  664,  421,  421,  421,  421,  421,
      408,  421,  400,  421,  421,  421,  659,  421,  421,  421,
      393,  656,  386,  655,  421,  432,  432,  432,  432,  693,
      654,  432,  693,  693,  693,  376,  635,  629,  628,  693,
      432,  627,  326,  432,  326,  600,  322,  598,  432,  596,
      595,  432,  432,  432,  594,  591,  589,  432,  432,  437,
      437,  437,  437,  588,  584,  582,  581,  579,  437,  577,
      576,  574,  569,  540,  437,  526,  437,  437,  525,  524,
      522,  521,  437,  517,  510,  437,  437,  437,  506,  497,

      491,  477,  437,  440,  440,  440,  440,  565,  456,  440,
      565,  565,  565,  451,  446,  570,  429,  565,  570,  570,
      570,  408,  408,  393,  376,  570,  440,  326,  323,  440,
      440,  440,  322, 1208, 1208, 1208,  440,  441,  873, 1208,
      441,  873,  873,  873, 1208, 1208,  441, 1208,  873,  441,
      441,  441, 1208, 1208, 1208, 1208,  441,  445,  445, 1208,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  450,  450, 1208,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  455,  455, 1208,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  457, 1208, 1208,  457, 1208, 1208, 1208,  457,
     1208,  457,  457,  457,  457,  457, 1208, 1208, 1208,  457,
      457,  457, 1208,  457,  457,  457, 1208, 1208, 1208, 1208,
      457,  466, 1208, 1208,  466, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208,  466, 1208, 1208, 1208,  466, 1208,
     1208, 1208, 1208, 1208,  466, 1208, 1208,  466,  466,  466,
     1208, 1208, 1208, 1208,  466,  472,  472,  472,  472, 1208,
     1208,  472, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208,  472,  472, 1208, 1208, 1208, 1208,  472, 1208,
     1208,  472,  472,  472, 1208, 1208, 1208, 1208,  472,  480,
      480,  480,  480, 1208, 1208,  480, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208,  480, 1208, 1208,  480, 1208, 1208,
     1208, 1208,  480, 1208, 1208,  480,  480,  480, 1208, 1208,
     1208,  480,  480,  483,  483,  483,  483, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  483, 1208,
      483,  483, 1208, 1208, 1208, 1208,  483, 1208, 1208,  483,
      483,  483, 1208, 1208, 1208, 1208,  483,  489,  489,  489,
      489, 1208, 1208,  489, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
      489, 1208, 1208,  489,  489,  489, 1208, 1208, 1208, 1208,
      489,  492, 1208,  492, 1208, 1208, 1208, 1208, 1208,  492,
     1208, 1208,  492,  492,  492, 1208, 1208, 1208, 1208,  492,
      496,  496, 1208,  496, 1208, 1208, 1208, 1208, 1208,  496,
     1208, 1208,  496,  496,  496, 1208, 1208, 1208, 1208,  496,

      501,  501, 1208,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501, 1208,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  505, 1208, 1208,  505, 1208,
     1208, 1208, 1208, 1208,  505, 1208, 1208,  505,  505,  505,
     1208, 1208, 1208, 1208,  505,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507, 1208,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      509,  509, 1208,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509, 1208,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  516, 1208, 1208,  516, 1208,
     1208, 1208, 1208, 1208,  516, 1208, 1208,  516,  516,  516,
     1208, 1208, 1208, 1208,  516,  520,  520, 1208,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      523,  523, 1208,  523, 1208,  523,  523,  523,  523,  523,
      523,  523, 1208,  523,  523,  523,  523, 1208,  523,  523,

      523,  523,  523, 1208,  523, 1208,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  533, 1208, 1208,  533, 1208,
     1208, 1208, 1208, 1208,  533, 1208, 1208, 1208, 1208,  533,
      533, 1208,  533, 1208, 1208, 1208, 1208, 1208,  533, 1208,
     1208,  533,  533,  533,  541,  541, 1208,  541, 1208,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541, 1208,  541, 1208,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  545,
      545, 1208,  545, 1208,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  545, 1208,  545, 1208,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  554, 1208, 1208,  554, 1208, 1208,
     1208, 1208, 1208,  554, 1208, 1208,  554,  554,  554, 1208,
     1208, 1208, 1208,  554,  558,  558, 1208,  558,  558,  558,
      558,  558,  558,  558, 1208, 1208,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558, 1208,  558, 1208,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  567,
     1208,  567,  567, 1208, 1208, 1208, 1208,  567, 1208, 1208,
      567,  567,  567, 1208, 1208, 1208, 1208,  567,  572, 1208,
      572,  572, 1208, 1208, 1208, 1208,  572, 1208, 1208,  572,

      572,  572, 1208, 1208, 1208, 1208,  572,  575,  575, 1208,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
     1208,  575, 1208,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  578, 1208, 1208,  578, 1208, 1208, 1208, 1208,
     1208,  578, 1208, 1208,  578,  578,  578, 1208, 1208, 1208,
     1208,  578,  580,  580, 1208,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580, 1208,  580,  580,
      580,  580,  580,  580,  580,  580,  580, 1208,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  583,  583, 1208,

      583,  583,  583,  583,  583,  583,  583,  583,  583, 1208,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
     1208,  583, 1208,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  586, 1208, 1208,  586, 1208, 1208, 1208,  586,
     1208,  586, 1208, 1208,  586,  586,  586, 1208, 1208, 1208,
     1208,  586,  587, 1208,  587,  587,  587,  587,  587, 1208,
     1208,  587, 1208,  587, 1208, 1208,  587,  587,  587, 1208,
     1208, 1208, 1208,  587,  590,  590, 1208,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590, 1208,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592, 1208,
     1208,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  593,  593, 1208,  593,  593,  593,
      593,  593,  593, 1208,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593, 1208, 1208,  593,  593,  593, 1208,
     1208,  593,  593,  593,  593,  593,  593,  593,  593,  349,
      349,  349,  349, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208,  349,  349, 1208,  349,  349,  349, 1208,

      349,  349,  349,  349, 1208,  349,  349,  321,  321, 1208,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  599,  599, 1208, 1208, 1208, 1208,  599, 1208,
     1208,  599,  599,  599, 1208, 1208, 1208, 1208,  599,  325,
     1208,  325,  325, 1208,  325, 1208, 1208, 1208, 1208,  325,
      325, 1208, 1208,  325,  325,  325,  601, 1208, 1208,  601,
     1208, 1208, 1208, 1208, 1208,  601, 1208, 1208,  601,  601,
      601,  608, 1208, 1208,  608, 1208,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  355, 1208,  355,  355,
     1208,  355, 1208, 1208, 1208, 1208,  355,  355, 1208, 1208,
      355,  355,  355,  356, 1208, 1208,  356, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208,  356,  356, 1208,  356,
      356,  356,  356,  375,  375, 1208,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  377, 1208,
     1208,  377, 1208, 1208, 1208,  377, 1208,  377,  377,  377,
      377,  377, 1208, 1208, 1208,  377,  377,  377, 1208,  377,
      377,  377, 1208, 1208, 1208, 1208,  377,  651, 1208, 1208,
      651, 1208, 1208, 1208,  651, 1208,  651, 1208,  651,  651,
      651, 1208, 1208, 1208,  651,  651,  651, 1208,  651,  651,
      651, 1208, 1208, 1208, 1208,  651,  387, 1208,  387,  387,
     1208, 1208, 1208, 1208,  387, 1208, 1208,  387,  387,  387,
     1208, 1208, 1208, 1208,  387,  385, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208,  385, 1208, 1208,  385,  385,  385, 1208, 1208,
     1208, 1208,  385,  396,  396,  396,  396, 1208, 1208,  396,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  396, 1208,
     1208,  396, 1208, 1208, 1208, 1208,  396, 1208, 1208,  396,
      396,  396, 1208, 1208, 1208,  396,  396,  399,  399,  399,
      399, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208,  399, 1208,  399,  399,  399, 1208, 1208, 1208,
      399, 1208, 1208,  399,  399,  399, 1208, 1208, 1208, 1208,
      399,  406,  406,  406,  406, 1208, 1208,  406, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208,  406, 1208, 1208,  406,  406,  406,
     1208, 1208, 1208, 1208,  406,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657, 1208,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      660, 1208,  660, 1208, 1208, 1208,  660, 1208, 1208,  660,
      660,  660, 1208, 1208, 1208, 1208,  660,  407,  407, 1208,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  409, 1208, 1208,  409, 1208, 1208, 1208,  409,
     1208,  409,  409,  409,  409,  409, 1208, 1208, 1208,  409,
      409,  409, 1208,  409,  409,  409, 1208, 1208, 1208, 1208,
      409,  661, 1208, 1208,  661, 1208, 1208, 1208,  661, 1208,
      661, 1208,  661,  661,  661, 1208, 1208, 1208,  661,  661,
      661, 1208,  661,  661,  661, 1208, 1208, 1208, 1208,  661,
      415,  415, 1208,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  417,  417, 1208,  417,  417,

      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      421,  421, 1208, 1208,  421, 1208, 1208, 1208,  421, 1208,
      421,  421,  421,  421,  421, 1208,  421, 1208,  421,  421,
      421, 1208,  421,  421,  421, 1208, 1208, 1208, 1208,  421,
      666, 1208, 1208,  666, 1208, 1208, 1208,  666, 1208,  666,
     1208,  666,  666,  666, 1208, 1208, 1208,  666,  666,  666,
     1208,  666,  666,  666, 1208, 1208, 1208, 1208,  666,  432,
      432,  432,  432, 1208, 1208,  432, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208,  432, 1208, 1208,  432, 1208, 1208,
     1208, 1208,  432, 1208, 1208,  432,  432,  432, 1208, 1208,
     1208,  432,  432,  437,  437,  437,  437, 1208, 1208, 1208,
     1208, 1208,  437, 1208, 1208, 1208, 1208, 1208,  437, 1208,
      437,  437, 1208, 1208, 1208, 1208,  437, 1208, 1208,  437,
      437,  437, 1208, 1208, 1208, 1208,  437,  440,  440,  440,
      440, 1208, 1208,  440, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
      440, 1208, 1208,  440,  440,  440, 1208, 1208, 1208, 1208,
      440,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669, 1208,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  671, 1208, 1208,  671,
     1208, 1208, 1208, 1208, 1208,  671, 1208, 1208, 1208, 1208,
     1208, 1208, 1208,  671, 1208, 1208, 1208, 1208, 1208,  671,
     1208, 1208,  671,  671,  671, 1208, 1208, 1208, 1208,  671,
      441, 1208, 1208,  441, 1208, 1208, 1208, 1208, 1208,  441,
     1208, 1208,  441,  441,  441, 1208, 1208, 1208, 1208,  441,
      445,  445, 1208,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  450,  450, 1208,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      455,  455, 1208,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  457, 1208, 1208,  457, 1208,
     1208, 1208,  457, 1208,  457,  457,  457,  457,  457, 1208,

     1208, 1208,  457,  457,  457, 1208,  457,  457,  457, 1208,
     1208, 1208, 1208,  457,  675, 1208, 1208,  675, 1208, 1208,
     1208,  675, 1208,  675, 1208,  675,  675,  675, 1208, 1208,
     1208,  675,  675,  675, 1208,  675,  675,  675, 1208, 1208,
     1208, 1208,  675,  466, 1208, 1208,  466, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208,  466, 1208, 1208, 1208,
      466, 1208, 1208, 1208, 1208, 1208,  466, 1208, 1208,  466,
      466,  466, 1208, 1208, 1208, 1208,  466,  472,  472,  472,
      472, 1208, 1208,  472, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208,  472,  472, 1208, 1208, 1208, 1208,

      472, 1208, 1208,  472,  472,  472, 1208, 1208, 1208, 1208,
      472,  681,  681,  681,  681, 1208, 1208,  681, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  681,  681,
     1208, 1208, 1208, 1208,  681, 1208, 1208,  681,  681,  681,
     1208, 1208, 1208, 1208,  681,  480,  480,  480,  480, 1208,
     1208,  480, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
      480, 1208, 1208,  480, 1208, 1208, 1208, 1208,  480, 1208,
     1208,  480,  480,  480, 1208, 1208, 1208,  480,  480,  483,
      483,  483,  483, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208,  483, 1208,  483,  483, 1208, 1208,

     1208, 1208,  483, 1208, 1208,  483,  483,  483, 1208, 1208,
     1208, 1208,  483,  489,  489,  489,  489, 1208, 1208,  489,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208,  489, 1208, 1208,  489,
      489,  489, 1208, 1208, 1208, 1208,  489,  684, 1208, 1208,
     1208, 1208, 1208,  684, 1208, 1208,  684,  684,  684, 1208,
     1208, 1208, 1208,  684,  492, 1208,  492, 1208, 1208, 1208,
     1208, 1208,  492, 1208, 1208,  492,  492,  492, 1208, 1208,
     1208, 1208,  492,  686, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

      686, 1208, 1208,  686,  686,  686, 1208, 1208, 1208, 1208,
      686,  496,  496, 1208,  496, 1208, 1208, 1208, 1208, 1208,
      496, 1208, 1208,  496,  496,  496, 1208, 1208, 1208, 1208,
      496,  501,  501, 1208,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501, 1208,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  505, 1208, 1208,  505,
     1208, 1208, 1208, 1208, 1208,  505, 1208, 1208,  505,  505,
      505, 1208, 1208, 1208, 1208,  505,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  507,  507, 1208,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  509,  509, 1208,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509, 1208,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  693, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208,  693, 1208, 1208,  693,  693,  693, 1208,
     1208, 1208, 1208,  693,  516, 1208, 1208,  516, 1208, 1208,
     1208, 1208, 1208,  516, 1208, 1208,  516,  516,  516, 1208,

     1208, 1208, 1208,  516,  520,  520, 1208,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  523,
      523, 1208,  523, 1208,  523,  523,  523,  523,  523,  523,
      523, 1208,  523,  523,  523,  523, 1208,  523,  523,  523,
      523,  523, 1208,  523, 1208,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  533, 1208, 1208,  533, 1208, 1208,
     1208, 1208, 1208,  533, 1208, 1208, 1208, 1208,  533,  533,
     1208,  533, 1208, 1208, 1208, 1208, 1208,  533, 1208, 1208,

      533,  533,  533,  541,  541, 1208,  541, 1208,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541, 1208,  541, 1208,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  545,  545,
     1208,  545, 1208,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545, 1208,  545, 1208,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  554, 1208, 1208,  554, 1208, 1208, 1208,
     1208, 1208,  554, 1208, 1208,  554,  554,  554, 1208, 1208,
     1208, 1208,  554,  558,  558, 1208,  558,  558,  558,  558,

      558,  558,  558, 1208, 1208,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558, 1208,  558, 1208,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  567, 1208,
      567,  567, 1208, 1208, 1208, 1208,  567, 1208, 1208,  567,
      567,  567, 1208, 1208, 1208, 1208,  567,  565, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208,  565, 1208, 1208,  565,  565,  565,
     1208, 1208, 1208, 1208,  565,  572, 1208,  572,  572, 1208,
     1208, 1208, 1208,  572, 1208, 1208,  572,  572,  572, 1208,
     1208, 1208, 1208,  572,  570, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208,  570, 1208, 1208,  570,  570,  570, 1208, 1208, 1208,
     1208,  570,  575,  575, 1208,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575, 1208,  575, 1208,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  578, 1208, 1208,
      578, 1208, 1208, 1208, 1208, 1208,  578, 1208, 1208,  578,
      578,  578, 1208, 1208, 1208, 1208,  578,  580,  580, 1208,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580, 1208,  580,  580,  580,  580,  580,  580,  580,

      580,  580, 1208,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  583,  583, 1208,  583,  583,  583,  583,  583,
      583,  583,  583,  583, 1208,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583, 1208,  583, 1208,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  730, 1208, 1208,
     1208, 1208, 1208, 1208, 1208,  730, 1208,  730,  730,  730,
      730,  730, 1208, 1208,  730, 1208,  730, 1208, 1208,  730,
      730,  730, 1208, 1208, 1208, 1208,  730,  587, 1208,  587,
      587,  587,  587,  587, 1208, 1208,  587, 1208,  587, 1208,
     1208,  587,  587,  587, 1208, 1208, 1208, 1208,  587,  732,

     1208, 1208,  732, 1208, 1208, 1208,  732, 1208,  732, 1208,
     1208,  732,  732,  732, 1208, 1208, 1208, 1208,  732,  590,
      590, 1208,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590, 1208,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592, 1208, 1208,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  593,
      593, 1208,  593,  593,  593,  593,  593,  593, 1208,  593,

      593,  593,  593,  593,  593,  593,  593,  593,  593, 1208,
     1208,  593,  593,  593, 1208, 1208,  593,  593,  593,  593,
      593,  593,  593,  593,  599,  599, 1208, 1208, 1208, 1208,
      599, 1208, 1208,  599,  599,  599, 1208, 1208, 1208, 1208,
      599,  740,  740, 1208,  740,  740,  740,  740, 1208,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  601,  601, 1208,  601,
     1208, 1208, 1208, 1208, 1208,  601, 1208, 1208,  601,  601,
      601,  325, 1208,  325,  325, 1208,  325, 1208, 1208, 1208,

     1208,  325,  325, 1208, 1208,  325,  325,  325,  608, 1208,
     1208,  608, 1208,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  752,  752, 1208,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  630, 1208,
     1208,  630, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208,  630, 1208, 1208,  630,  630,  630,  763, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208,  763, 1208,  763,
     1208,  763,  763, 1208, 1208, 1208, 1208,  763, 1208, 1208,
      763,  763,  763, 1208, 1208,  763,  349, 1208, 1208,  349,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  349,
     1208, 1208,  349,  349,  349,  349,  767,  767, 1208,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,

      767,  356, 1208, 1208,  356, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208,  356,  356, 1208,  356,  356,  356,
      356,  651, 1208, 1208,  651, 1208, 1208, 1208,  651, 1208,
      651,  651,  651,  651,  651, 1208, 1208, 1208,  651,  651,
      651, 1208,  651,  651,  651, 1208, 1208, 1208, 1208,  651,
      377, 1208, 1208,  377, 1208, 1208, 1208,  377, 1208,  377,
      377,  377,  377,  377, 1208, 1208, 1208,  377,  377,  377,
     1208,  377,  377,  377, 1208, 1208, 1208, 1208,  377,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  660, 1208,  660, 1208, 1208, 1208,
      660, 1208, 1208,  660,  660,  660, 1208, 1208, 1208, 1208,
      660,  661, 1208, 1208,  661, 1208, 1208, 1208,  661, 1208,
      661,  661,  661,  661,  661, 1208, 1208, 1208,  661,  661,
      661, 1208,  661,  661,  661, 1208, 1208, 1208, 1208,  661,
      409, 1208, 1208,  409, 1208, 1208, 1208,  409, 1208,  409,
      409,  409,  409,  409, 1208, 1208, 1208,  409,  409,  409,
     1208,  409,  409,  409, 1208, 1208, 1208, 1208,  409,  782,

      782, 1208,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  666,  666, 1208, 1208,  666, 1208,
     1208, 1208,  666, 1208,  666,  666,  666,  666,  666, 1208,
      666, 1208,  666,  666,  666, 1208,  666,  666,  666, 1208,
     1208, 1208, 1208,  666,  421,  421, 1208, 1208,  421, 1208,
     1208, 1208,  421, 1208,  421,  421,  421,  421,  421, 1208,
      421, 1208,  421,  421,  421, 1208,  421,  421,  421, 1208,
     1208, 1208, 1208,  421,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  671,
     1208, 1208,  671, 1208, 1208, 1208, 1208, 1208,  671, 1208,
     1208, 1208, 1208, 1208, 1208, 1208,  671, 1208, 1208, 1208,
     1208, 1208,  671, 1208, 1208,  671,  671,  671, 1208, 1208,
     1208, 1208,  671,  675, 1208, 1208,  675, 1208, 1208, 1208,
      675, 1208,  675,  675,  675,  675,  675, 1208, 1208, 1208,
      675,  675,  675, 1208,  675,  675,  675, 1208, 1208, 1208,
     1208,  675,  457, 1208, 1208,  457, 1208, 1208, 1208,  457,

     1208,  457,  457,  457,  457,  457, 1208, 1208, 1208,  457,
      457,  457, 1208,  457,  457,  457, 1208, 1208, 1208, 1208,
      457,  792,  792,  792,  792, 1208, 1208,  792, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  792,  792,
     1208, 1208, 1208, 1208,  792, 1208, 1208,  792,  792,  792,
     1208, 1208, 1208, 1208,  792,  678,  678,  678,  678, 1208,
     1208,  678, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208,  678, 1208, 1208, 1208, 1208,  678, 1208,
     1208,  678,  678,  678, 1208, 1208, 1208, 1208,  678,  681,
      681,  681,  681, 1208, 1208,  681, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208,  681,  681, 1208, 1208,
     1208, 1208,  681, 1208, 1208,  681,  681,  681, 1208, 1208,
     1208, 1208,  681,  684, 1208, 1208, 1208, 1208, 1208,  684,
     1208, 1208,  684,  684,  684, 1208, 1208, 1208, 1208,  684,
      796, 1208,  796, 1208, 1208, 1208, 1208, 1208,  796, 1208,
     1208,  796,  796,  796, 1208, 1208, 1208, 1208,  796,  802,
     1208, 1208, 1208, 1208, 1208,  802, 1208, 1208,  802,  802,
      802, 1208, 1208, 1208, 1208,  802,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813, 1208,  813,  813,  813,  813,  813,

     1208,  813,  813, 1208, 1208,  813,  813,  813,  813,  813,
      813,  730, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  730,
     1208,  730,  730,  730,  730,  730, 1208, 1208,  730, 1208,
      730, 1208, 1208,  730,  730,  730, 1208, 1208, 1208, 1208,
      730,  833, 1208, 1208,  833, 1208, 1208, 1208,  833, 1208,
      833, 1208, 1208,  833,  833,  833, 1208, 1208, 1208, 1208,
      833,  834, 1208,  834,  834,  834,  834,  834, 1208, 1208,
      834, 1208,  834, 1208, 1208,  834,  834,  834, 1208, 1208,
     1208, 1208,  834,  740,  740, 1208,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  841, 1208,
     1208,  841, 1208, 1208, 1208, 1208, 1208,  841, 1208, 1208,
      841,  841,  841,  332, 1208,  332, 1208,  332,  332, 1208,
      332, 1208, 1208, 1208, 1208,  332,  332, 1208, 1208,  332,
      332,  332,  752,  752, 1208,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  763, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208,  763, 1208,  763,

     1208,  763,  763, 1208, 1208, 1208, 1208,  763, 1208, 1208,
      763,  763,  763, 1208, 1208,  763,  349, 1208, 1208,  349,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  349,
     1208, 1208,  349,  349,  349,  349,  766,  766, 1208,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  767,  767, 1208,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,

      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  356, 1208, 1208,  356,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  356,
      356, 1208,  356,  356,  356,  356,  325,  325, 1208,  325,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,  325, 1208,
      325,  325, 1208,  325,  325, 1208, 1208, 1208,  325,  325,
     1208, 1208,  325,  325,  325, 1208,  325,  377, 1208, 1208,
      377, 1208, 1208, 1208,  377, 1208,  377,  377,  377,  377,
      377, 1208, 1208, 1208,  377,  377,  377, 1208,  377,  377,

      377, 1208, 1208, 1208, 1208,  377,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  409, 1208, 1208,  409, 1208, 1208, 1208,  409, 1208,
      409,  409,  409,  409,  409, 1208, 1208, 1208,  409,  409,
      409, 1208,  409,  409,  409, 1208, 1208, 1208, 1208,  409,
      782,  782, 1208,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  421,  421, 1208, 1208,  421,
     1208, 1208, 1208,  421, 1208,  421,  421,  421,  421,  421,
     1208,  421, 1208,  421,  421,  421, 1208,  421,  421,  421,
     1208, 1208, 1208, 1208,  421,  457, 1208, 1208,  457, 1208,
     1208, 1208,  457, 1208,  457,  457,  457,  457,  457, 1208,
     1208, 1208,  457,  457,  457, 1208,  457,  457,  457, 1208,
     1208, 1208, 1208,  457,  792,  792,  792,  792, 1208, 1208,
      792, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208,  792,  792, 1208, 1208, 1208, 1208,  792, 1208, 1208,
      792,  792,  792, 1208, 1208, 1208, 1208,  792,  678,  678,

      678,  678, 1208, 1208,  678, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208,  678, 1208, 1208, 1208,
     1208,  678, 1208, 1208,  678,  678,  678, 1208, 1208, 1208,
     1208,  678,  796, 1208,  796, 1208, 1208, 1208, 1208, 1208,
      796, 1208, 1208,  796,  796,  796, 1208, 1208, 1208, 1208,
      796,  802, 1208, 1208, 1208, 1208, 1208,  802, 1208, 1208,
      802,  802,  802, 1208, 1208, 1208, 1208,  802,  916, 1208,
     1208, 1208, 1208, 1208, 1208, 1208,  916, 1208,  916,  916,
      916,  916,  916, 1208, 1208,  916, 1208,  916, 1208, 1208,
      916,  916,  916, 1208, 1208, 1208, 1208,  916,  834, 1208,

      834,  834,  834,  834,  834, 1208, 1208,  834, 1208,  834,
     1208, 1208,  834,  834,  834, 1208, 1208, 1208, 1208,  834,
      922,  922, 1208,  922, 1208, 1208, 1208, 1208, 1208,  922,
     1208, 1208,  922,  922,  922,  931,  931, 1208,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      950,  950,  950,  950, 1208, 1208,  950, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208,  950,  950, 1208,
     1208, 1208, 1208,  950, 1208, 1208,  950,  950,  950, 1208,

     1208, 1208, 1208,  950,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976, 1208,  976,  976,  976,  976,  976, 1208,  976,
      976, 1208,  976, 1208,  976,  976,  976,  976,  976, 1007,
     1007, 1208, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1208, 1049, 1049, 1049, 1049, 1049, 1208, 1049,

     1049, 1208, 1208, 1208, 1049, 1049, 1049, 1049, 1049, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1208, 1050, 1050,
     1050, 1050, 1050, 1208, 1050, 1050, 1208, 1208, 1208, 1050,
     1050, 1050, 1050, 1050, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1208, 1102, 1102, 1102, 1102, 1102, 1208, 1102,
     1102, 1208, 1208, 1208, 1102, 1102, 1102, 1102, 1102, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1208, 1113, 1113,

     1113, 1113, 1113, 1208, 1113, 1113, 1208, 1208, 1208, 1113,
     1113, 1113, 1113, 1113, 1160, 1160, 1208, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,   91,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208
    } ;

static yyconst flex_int16_t yy_chk[10728] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    7,    8,
        4,   21,   22,   23,   24,   21,   22,   23,   24,    4,
        4,   37,    4,    4,   38,   41,    4,    4,    4,   49,

       42,   50,    7,    8,  106,  107,   41,  106,  107,  120,
      120,   42,   45,   45,  295,   45,   55,   45,   55,   41,
       59, 1203,    7,    8,   42,   21,   22,   23,   24,  416,
      107,   46,   46,   60,   46,   37,   46,   65,   38,   41,
       55,  295,   66,   49,   42,   50,   56,  416,   56,    4,
        5,    5,    5,    5,    5,    5,    5,   45,    5,    5,
       55,    5,    5,    5,   59,    5,   83,    5,    5,   47,
       56,   47,    5,    5,    5,    5,   46,   60,  115,  115,
       47,   65,  125,  115,  888,   47,   66,  125,   53,   53,
       56,   53,   48,   47,   48,    5,    5,    5,  339, 1163,

      888,   54,   54,   48,   54,   85,  327,  115,   48,  327,
       83,   84, 1163,   47,   85,   85,   48,   89,   57,   90,
       57,  339,    5,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,   53,    6,    6,   48,    6,    6,    6,
       71,    6,   57,    6,    6,   58,   54,   58,    6,    6,
        6,    6,   72,   73,  246,   84,   86,  333,  246,   99,
      333,   89,   57,   90,   71,   86,   86,  179,   99,   58,
      179,    6,    6,    6,  229,  581,   72,   73,   99,  229,
      103,  179,  103,  103,   71,  103,  103,  103,  219,   58,
      272,  219,  103,  219,  581,  272,   72,   73,    6,    6,

        6,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   13,   13,   13,
       13,   13,   13,   74,   13,   13,   63,   13,   13,   13,
       77,   13,   78,   13,   13,   63,   63, 1201,   13,   13,
       13,   13,   64,  328,   77,  577,   78,   74,  121,  121,
       63,   64,   64,  328,   94,  116,  116,   94,   79,  277,

      116,   13,   13,   13,  277,  234,   64,   74,  234,   79,
       63, 1199,  577,  121,   77,  234,   78,   95,   95,   94,
       95,  351,   79,  340,  116,  542,   64,  542,   13,   13,
       13,   13,   14,   14,   14,   14,   14,   14,   14,   94,
       14,   14,   79,   14,   14,   14,  340,   14,   80,   14,
       14, 1196,   87, 1193,   14,   14,   14,   14,  351,   80,
       87,  100,   95,  100,  100,  100,  100,  110,  348,  110,
      110,  110,   80,   87,   87,  100,  110,   14,   14,   14,
      210,  126,  126,  664,  126,  351,  334,  134,  134,  348,
      134,  210,   80,  139,  139,  100,   87,   87,  139,  161,

      161,  664,  161, 1192,   14,   14,   14,   14,   15,   15,
       15,   15,   15,   15,   15,  334,   15,   15,  342,   15,
       15,   15,  139,   15,  210,   15,   15,   88,  126,  338,
       15,   15,   15,   15,  134,   88,  135,  135,  135,  135,
      342,  108,  111,  135,  108,  111,  161,  108,   88,   88,
      338, 1188, 1185,   15,   15,   15,  108,  111,  117,  117,
      247,  117,  108,  111,  549,  247,  108,  237,  343,  247,
      237,   88,   88,  338,  117,  117,  618,  237,  549,  117,
       15,   15,   15,   15,   16,   16,   16,   16,   16,   16,
       16,  343,   16,   16, 1184,   16,   16,   16,  618,   16,

     1202,   16,   16,  117, 1202,  117,   16,   16,   16,   16,
      140,  140,  621,  108,  111,  140,  128,  128,  128,  128,
      129,  129,  129,  129,  133,  133,  133,  133,  335,   16,
       16,   16,  128,  586,  621,  361,  129,  128,  361,  140,
      133,  129, 1183, 1182,  586,  133,  133,  157,  157,  157,
      157,  335,  335,  335,  157, 1181,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   25,   25,   25,   25,   25,   25,
       25,  366,   25,   25,  366,   25,   25,   25,  385,   25,
      387,   25,   25,  385,  146,  387,   25,   25,   25,   25,
      109,  109,  625,  109,  463,  146,  146,  463,  626,  905,
      146,  109,  146,  109,  109,  109,  109,  147,  463,   25,
       25,   25,  565,  905,  625,  109,  148,  565,  147,  147,
      626,  173,  173,  147,  146,  147,  173,  148,  148, 1180,
      165,  165,  148,  165,  148,  109,   25,   25,   25,   25,
       26,   26,   26,   26,   26,   26,   26,  147,   26,   26,

      173,   26,   26,   26,  567,   26,  148,   26,   26,  567,
      507,  570,   26,   26,   26,   26,  570,  151,  151,  151,
      151,  507, 1176,  152,  152,  152,  152,  165,  613,  174,
      174,  337,  337,  151,  174,   26,   26,   26,  151,  152,
      156,  156,  156,  156,  152,  193,  193,  193,  193, 1175,
      156,  613,  193,  337,  507,  337,  156,  602,  174, 1173,
      602,  156,   26,   26,   26,   26,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  169,  169,   51,  169, 1205,  616,   51,   51,   51,
       51,   51,  363,  363, 1172,  363,  572,  130,  130,  130,
      130,  572, 1171, 1205,  130,  186,  186,  186,  186,  616,
       51,   51,   51,  130,  142,  142,  630,  142,  130,  630,
     1170,  186,  184,  184,  518,  184,  186,  518,  169,  518,
      142,  142, 1169,  240,  240,  142,  240,   51,   51,   51,
       51,   51,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  378,  142,

       52,  142,  378,  746,   52,   52,   52,   52,   52,  184,
      901,  130,  183,  183,  183,  183, 1168,  901,  240,  183,
      187,  187,  187,  187,  730,  746,  378,   52,   52,   52,
      183,  183,  183,  183,  251,  730,  187,  962,  251,  369,
      369,  187,  369, 1167,  251,  364,  251,  364,  364,  364,
      380,  380,  962,  380,   52,   52,   52,   52,   52,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,  252,   81,   81, 1166, 1190,  252,   81,
       81,   81,  252,   81,  131,  131,  131,  131,  252,  617,

      252,  131, 1190,  191,  191,  191,  191, 1165,  389,  389,
      131,  389,   81,   81,   81,  131,  833,  175,  175,  191,
      175, 1160,  617, 1157,  191,  192,  192,  833,  192,  318,
      318,  410,  318,  175,  175,  410, 1156, 1154,  175,   81,
       81,   81,   81,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  410,
       82,   82,  175,  619,  175,   82,   82,   82,  131,   82,
      401,  401,  192,  401,  318,  150,  150,  749,  150,  464,
      150, 1153,  464,  198,  198,  624,  198,  619,   82,   82,
       82,  150,  150,  464,  319,  319,  150,  319,  150,  202,

      202,  749,  202,  738,  205,  205,  371,  205,  624,  371,
      466,  232,  232,  466,  232,   82,   82,   82,   82,  101,
      150,  750,  150, 1152,  466, 1151,  153,  153,  153,  153,
      198,  371,  101,  153,  154,  154,  154,  154,  756,  319,
      738,  154,  153,  101,  101,  750,  202,  153,  101,  101,
      154,  205,  751,  101,  101,  154,  101,  101,  232,  238,
      238,  756,  238,  377,  377,  101,  101,  738,  377, 1150,
      101,  101,  255,  255,  751,  255,  101,  101,  101,  101,
      101,  101,  102,  102,  102,  102,  259,  259, 1149,  259,
     1198,  102,  377,  400,  400,  400,  400, 1198,  102,  102,

      153,  102,  188,  188,  188,  188,  238,  927,  154,  188,
      189,  189,  189,  189,  754,  379,  379,  189,  188,  255,
      379,  102, 1148,  188,  265,  265,  189,  265,  102,  102,
      927,  189, 1147,  259,  268,  268,  754,  268, 1146,  213,
      213,  213,  213,  356,  379,  633,  356,  102,  633,  102,
      102,  104,  104,  104,  104,  213,  213,  928,  213,  357,
      104,  316,  357,  644,  316,  336,  644,  104,  104,  336,
      104,  265,  397,  397,  397,  397,  188,  336,  213,  397,
      928,  268,  412,  412,  189,  412,  316,  336,  356, 1145,
      104,  336,  104,  425,  425, 1143,  425,  104,  104,  422,

      336, 1136,  440,  422,  357,  440,  316,  213,  341, 1135,
      358,  341,  440,  358,  356, 1119,  104,  357,  104,  104,
      105,  442,  442,  105,  442,  447,  447,  422,  447,  848,
      357,  341,  105,  105,  341,  105,  105,  409,  409,  105,
      105,  105,  409,  452,  452,  105,  452,  355,  341,  355,
      355,  848,  355,  355,  355,  358,  341,  531,  362,  355,
      531,  362, 1118,  916, 1116,  105,  409,  531, 1115,  365,
      358,  341,  365,  362,  916,  359, 1109,  533,  359,  362,
      533,  358,  359,  650,  365,  458,  650,  533,  367,  458,
      365,  367,  105,  145,  145, 1108,  145,  145,  145,  145,

      849,  145,  145,  367,  145,  145,  145, 1107,  145,  367,
      145,  145, 1106,  458, 1105,  145,  145,  145,  145,  359,
      359,  373,  849,  372,  373,  372,  372,  372,  368,  368,
      362,  368,  372, 1104,  460,  460,  373,  460,  145,  145,
      145,  365,  373,  368,  473,  473,  359,  473, 1103,  368,
     1101,  411,  411,  368,  382,  382,  411, 1078,  374,  382,
      367,  374, 1077, 1075, 1074,  145,  145,  145,  145,  214,
      214,  725,  214,  374,  725,  214,  214,  214,  214,  374,
      411,  484,  484,  382,  484,  392,  392,  392,  392, 1073,
     1072,  214,  214,  373,  214,  645,  382,  645,  645,  645,

      368,  392,  393,  393,  393,  393,  392, 1071, 1070,  393,
      395,  395,  395,  395,  214, 1069,  214,  395,  393,  396,
      396,  396,  396,  393,  457,  457,  395,  459,  459,  457,
      374,  395,  459, 1068, 1067,  396,  399,  399,  399,  399,
      396,  396,  853,  214,  317,  317,  317,  317,  404,  404,
      404,  404,  399,  457, 1066,  404,  459,  399,  399,  421,
      317,  317,  670,  317,  853,  670,  398,  398,  398,  398,
      421,  421,  670,  398, 1065,  421,  393,  421,  405,  405,
      405,  405,  398,  317,  395,  405, 1064,  398,  651,  651,
      317,  317, 1063,  651,  428,  428,  428,  428,  743,  421,

     1062,  743,  760,  414,  414,  760, 1061, 1060,  414,  317,
      428,  317,  317,  331, 1059,  428,  331,  651,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  414, 1006, 1058,  331,  331,  331,  331,  331,
      398,  433,  433,  433,  433,  414,  493,  493,  433,  493,
     1057,  423,  498,  498,  427,  498, 1006, 1056,  331,  331,
      331,  620,  423,  423,  620,  427,  427,  423,  764,  423,
      427,  764,  427,  438,  438,  438,  438, 1055,  502,  502,
      438,  502, 1054, 1052,  620,  331,  331,  331,  331,  331,
      349,  423,  830,  349,  427,  830,  349,  349,  349,  349,

     1178,  429,  429,  429,  429, 1051, 1047,  427,  429,  652,
      652, 1178,  349,  349,  652,  349, 1046,  429,  431,  431,
      431,  431,  429, 1045, 1044,  431,  432,  432,  432,  432,
      434,  434,  434,  434,  431,  349,  432,  434,  652,  431,
      462,  462,  432, 1043, 1042,  462,  434,  432, 1041, 1039,
     1038,  434,  439,  439,  439,  439, 1037,  513,  513,  439,
      513,  349, 1036,  349,  349,  360, 1034, 1033,  360,  462,
      468,  468,  468,  468, 1369,  429,  856,  360,  360,  856,
      360,  360,  462, 1369,  360,  360,  360, 1369, 1369, 1032,
      360,  468,  431,  435,  435,  435,  435,  437,  437,  437,

      437, 1031, 1030,  435,  434,  528,  528,  437,  528,  435,
      360, 1029,  707,  437,  435,  707, 1028, 1027,  437,  476,
      476,  476,  476,  481,  481,  481,  481, 1026,  534,  534,
      481,  534, 1025,  551,  551,  476,  551,  360,  417,  417,
      476,  417,  417,  417,  417,  891,  417,  417,  891,  417,
      417,  417, 1024,  417,  983,  417,  417,  983, 1022, 1021,
      417,  417,  417,  417,  537,  537, 1020,  537,  467,  467,
      467,  467,  707, 1017, 1016,  467,  480,  480,  480,  480,
     1015, 1010, 1009,  417,  417,  417,  467,  467,  467,  467,
      555,  555,  480,  555, 1007,  559,  559,  480,  559, 1005,

      483,  483,  483,  483,  562,  562, 1004,  562, 1003,  537,
      417,  417,  417,  417,  418,  418,  483,  418,  418,  418,
      418,  483,  418,  418, 1002,  418,  418,  418, 1001,  418,
      622,  418,  418,  622, 1000,  999,  418,  418,  418,  418,
      671,  998,  997,  671,  470,  470,  470,  470,  996, 1117,
      671,  470, 1117,  622,  657,  657,  657,  657,  995,  418,
      418,  418,  470,  470,  470,  470, 1174, 1142, 1142, 1174,
     1142,  994,  472,  472,  472,  472,  993,  657,  992,  472,
      635,  857, 1187,  635,  857, 1187,  418,  418,  418,  418,
      472,  472,  472,  472,  477,  477,  477,  477,  991,  990,

      989,  477,  479,  479,  479,  479,  988,  987,  641,  479,
      477,  641, 1142,  769,  642,  477,  769,  642,  479,  482,
      482,  482,  482,  479,  986,  985,  482,  487,  487,  487,
      487,  635,  984,  982,  487,  482,  488,  488,  488,  488,
      482,  857,  631,  488,  980,  631,  977,  753,  975,  631,
      753,  635,  857,  641,  643,  643,  974,  643,  769,  642,
      658,  658,  658,  658,  641,  642,  661,  661,  477,  643,
      753,  661,  973,  769,  972,  643,  479,  646,  646,  641,
      646,  971,  970,  658,  769,  642,  631,  765, 1194,  969,
      765, 1194,  646,  482,  607,  661,  968,  607,  646,  607,

      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  631,  967,  966,  607,  607,  607,  607,
      607,  648,  648,  742,  648,  742,  643,  742,  742,  649,
      649,  965,  649,  653,  653,  964,  648,  742,  653,  607,
      607,  607,  648,  765,  649,  963,  648,  961,  859,  646,
      649,  859,  960,  959,  679,  679,  679,  679,  765,  662,
      662,  679,  653,  958,  662,  957,  607,  607,  607,  607,
      607,  638,  638,  653,  638,  679,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  956,  638,  662,  638,
      955,  953,  952,  648,  638,  638,  638,  638,  663,  663,

      951,  649,  947,  663,  675,  675,  946,  945,  755,  675,
      666,  755, 1197,  942,  941, 1197,  638,  638,  638,  859,
     1162,  666,  666, 1162,  667,  940,  666,  663,  666,  676,
      676,  755,  934,  675,  676,  667,  667,  933,  663,  931,
      667,  926,  667,  638,  638,  638,  638,  638,  665,  665,
      666,  665,  665,  665,  665,  925,  665,  665,  676,  665,
      665,  665,  923,  665,  667,  665,  665,  668, 1162,  922,
      665,  665,  665,  665,  850,  677,  677,  850,  668,  668,
      677,  771,  771,  668,  771,  668, 1200, 1204,  921, 1200,
     1204, 1162,  920,  665,  665,  665,  771,  850,  793,  793,

      793,  793,  771,  851,  677,  793,  851,  668,  919,  678,
      678,  678,  678,  918,  929,  677,  678,  929,  668,  793,
      665,  665,  665,  665,  917,  915,  851,  678,  678,  678,
      678,  680,  680,  680,  680,  914,  913,  929,  680,  681,
      681,  681,  681,  912,  770, 1189,  681,  770, 1189,  680,
      680,  680,  680,  771,  911,  910,  909,  681,  681,  681,
      681,  767,  767,  908,  767,  907,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  906,  767,  904,  767,
      772,  772,  903,  772,  767,  767,  767,  767,  902,  770,
      777,  777,  777,  777,  900,  772,  773,  773,  899,  773,

      770,  772,  779,  779,  779,  779,  767,  767,  767,  774,
      774,  773,  898,  777,  774,  770, 1189,  773,  781,  781,
      897,  773,  896,  781,  895,  779, 1079,  789,  789, 1079,
      894,  893,  789,  767,  767,  767,  767,  767,  774,  892,
      890,  889,  932,  784,  842,  932,  842,  781,  842,  842,
      887,  886,  772,  774,  784,  784,  789,  885,  842,  784,
      860,  784,  781,  860,  861,  932,  884,  861,  773,  782,
      782,  789,  782,  782,  782,  782, 1011,  782,  782, 1011,
      782,  782,  782,  784,  782,  883,  782,  782,  882, 1079,
      881,  782,  782,  782,  782,  880,  879, 1079,  784,  791,

      791,  791,  791,  863,  863,  860,  791,  878,  863,  861,
     1008,  877,  860, 1008,  782,  782,  782,  791,  791,  791,
      791,  806,  806,  876,  861,  875,  806,  874, 1011,  806,
      806,  860,  863, 1008,  806,  861,  871,  806,  806,  863,
      806,  782,  782,  782,  782,  783,  783, 1011,  783,  783,
      783,  783,  870,  783,  783,  869,  783,  783,  783,  866,
      783, 1246,  783,  783, 1246, 1246, 1246,  783,  783,  783,
      783, 1246,  865,  864,  858,  792,  792,  792,  792,  855,
      867,  867,  792,  862,  862,  867,  862,  854,  847,  868,
      783,  783,  783,  792,  792,  792,  792,  846,  862,  935,

      868,  868,  935,  937,  862,  868,  937,  868,  845,  867,
      872,  872,  844,  841,  839,  872,  867,  783,  783,  783,
      783,  838,  837,  873,  873,  873,  873,  836,  938,  868,
      873,  938,  939,  939,  835, 1076,  868,  939, 1076,  872,
      834,  873,  873,  873,  873,  832,  872,  831,  937,  943,
      943,  944,  937,  829,  943,  862, 1137,  828, 1076, 1137,
      827,  939,  944,  944,  935,  939,  826,  944,  825,  944,
      935,  948,  948,  938,  937,  824,  948, 1012,  943, 1137,
     1012, 1013,  943,  823, 1013,  822,  821,  949,  949,  949,
      949,  944,  820,  938,  949,  944, 1014, 1014,  819,  938,

      948, 1014,  818,  816,  948,  949,  949,  949,  949,  950,
      950,  950,  950, 1018, 1018,  815,  950, 1081, 1018,  814,
     1081, 1191, 1012, 1019, 1191, 1014, 1013,  950,  950,  950,
      950,  812,  811, 1013, 1019, 1019,  810,  809,  808, 1019,
     1012, 1019, 1018, 1014, 1023, 1023,  807,  805, 1012, 1023,
     1080, 1080, 1013, 1080, 1082, 1082, 1086, 1086, 1087, 1082,
     1018, 1086, 1081, 1019,  804,  803, 1191, 1091, 1091, 1087,
     1087,  801, 1091, 1023, 1087, 1141, 1087,  800, 1141, 1144,
     1081, 1019, 1144, 1082, 1161, 1086, 1164, 1161, 1081, 1164,
     1177, 1023, 1191, 1177,  799, 1080, 1091, 1179, 1087, 1415,

     1179,  798, 1207, 1207,  797, 1207, 1263, 1161, 1415, 1263,
     1263, 1263, 1415, 1415,  796, 1265, 1263,  795, 1265, 1265,
     1265, 1080,  794, 1270, 1144, 1265, 1270, 1270, 1270,  788,
      787, 1164,  786, 1270, 1164, 1141,  780,  776,  775, 1144,
     1383,  768, 1179, 1383, 1383, 1383, 1141, 1207, 1177, 1285,
     1144, 1306, 1285, 1285, 1285, 1179,  766, 1164,  763, 1285,
     1306, 1177,  758, 1306, 1306, 1306,  757,  752, 1179, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,

     1209, 1209, 1209, 1209, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,

     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,

     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,

     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,

     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,

     1229, 1229, 1229, 1229, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,

     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1237,
     1237,  748, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1238, 1287,  747,  745, 1287, 1287,
     1287,  740,  739, 1300,  737, 1287, 1300, 1300, 1300,  735,

      734, 1238,  733, 1300, 1238, 1238, 1238,  732,  728,  726,
      724, 1238, 1239,  723, 1239, 1239, 1305, 1239,  719, 1305,
     1305, 1305, 1239, 1239,  717, 1305, 1239, 1239, 1239, 1240,
      715, 1240, 1240, 1240, 1240, 1388, 1240,  714, 1388, 1388,
     1388, 1240, 1240, 1240,  713, 1240, 1240, 1240, 1241, 1241,
     1241, 1241,  712,  711,  710, 1423,  709, 1241, 1423, 1423,
     1423,  708, 1241, 1241,  706, 1241, 1241, 1241,  705, 1241,
     1241, 1241, 1241,  704, 1241, 1241, 1242,  703, 1242, 1242,
     1454, 1242,  702, 1454, 1454, 1454, 1242, 1242,  701,  700,
     1242, 1242, 1242, 1243, 1243, 1243, 1243,  699,  698,  697,

     1428, 1428, 1243, 1428, 1428, 1428,  696, 1243, 1243,  695,
     1243, 1243, 1243,  694, 1243, 1243, 1243, 1243,  691, 1243,
     1243, 1244, 1244,  690, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1245,  689,  688, 1245,
      687,  686,  683, 1245,  682, 1245, 1245, 1245, 1245, 1245,
      674,  673,  672, 1245, 1245, 1245,  669, 1245, 1245, 1245,
      660,  659,  656,  654, 1245, 1247,  634, 1247, 1247,  629,
      628,  627,  615, 1247,  614,  612, 1247, 1247, 1247,  611,

      609,  608,  606, 1247, 1248, 1248, 1248, 1248, 1339,  603,
     1248, 1339, 1339, 1339,  601,  599,  598,  597, 1339, 1248,
      596,  595, 1248,  594,  591,  589,  587, 1248,  585,  582,
     1248, 1248, 1248, 1387,  579,  576, 1248, 1248, 1249, 1249,
     1249, 1249, 1387,  574,  573, 1387, 1387, 1387,  571,  569,
      568,  566,  564, 1249,  561, 1249, 1249, 1249,  557,  553,
      550, 1249,  548,  547, 1249, 1249, 1249,  546,  544,  543,
      540, 1249, 1250, 1250, 1250, 1250, 1392,  539, 1250, 1392,
     1392, 1392,  536,  530, 1408,  527, 1392, 1408, 1408, 1408,
      526,  522,  520,  519, 1408, 1250,  517,  515, 1250, 1250,

     1250,  512,  510,  509,  506, 1250, 1251, 1251,  504, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1252,  500,  497, 1252,  496,  495,  492, 1252,  491,
     1252, 1252, 1252, 1252, 1252,  490,  486,  478, 1252, 1252,
     1252,  475, 1252, 1252, 1252,  471,  455,  454,  450, 1252,
     1253, 1253,  449, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1254, 1254,  445,  444, 1254,
      430,  424,  419, 1254,  415, 1254, 1254, 1254, 1254, 1254,
      407, 1254,  406, 1254, 1254, 1254,  403, 1254, 1254, 1254,
      394,  391,  388,  386, 1254, 1255, 1255, 1255, 1255, 1410,
      384, 1255, 1410, 1410, 1410,  375,  350,  347,  345, 1410,
     1255,  344,  332, 1255,  325,  324,  321,  320, 1255,  315,
      312, 1255, 1255, 1255,  311,  303,  300, 1255, 1255, 1256,
     1256, 1256, 1256,  299,  294,  290,  289,  286, 1256,  282,
      281,  278,  273,  242, 1256,  228, 1256, 1256,  227,  226,
      222,  221, 1256,  217,  212, 1256, 1256, 1256,  209,  201,

      197,  190, 1256, 1257, 1257, 1257, 1257, 1413,  172, 1257,
     1413, 1413, 1413,  168,  164, 1414,  155, 1413, 1414, 1414,
     1414,  141,  138,  132,  114, 1414, 1257,   98,   97, 1257,
     1257, 1257,   96,   91,    0,    0, 1257, 1258, 1437,    0,
     1258, 1437, 1437, 1437,    0,    0, 1258,    0, 1437, 1258,
     1258, 1258,    0,    0,    0,    0, 1258, 1259, 1259,    0,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1260, 1260,    0, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1261, 1261,    0,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1262,    0,    0, 1262,    0,    0,    0, 1262,
        0, 1262, 1262, 1262, 1262, 1262,    0,    0,    0, 1262,
     1262, 1262,    0, 1262, 1262, 1262,    0,    0,    0,    0,
     1262, 1264,    0,    0, 1264,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1264,    0,    0,    0, 1264,    0,
        0,    0,    0,    0, 1264,    0,    0, 1264, 1264, 1264,
        0,    0,    0,    0, 1264, 1266, 1266, 1266, 1266,    0,
        0, 1266,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1266, 1266,    0,    0,    0,    0, 1266,    0,
        0, 1266, 1266, 1266,    0,    0,    0,    0, 1266, 1267,
     1267, 1267, 1267,    0,    0, 1267,    0,    0,    0,    0,
        0,    0,    0,    0, 1267,    0,    0, 1267,    0,    0,
        0,    0, 1267,    0,    0, 1267, 1267, 1267,    0,    0,
        0, 1267, 1267, 1268, 1268, 1268, 1268,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1268,    0,
     1268, 1268,    0,    0,    0,    0, 1268,    0,    0, 1268,
     1268, 1268,    0,    0,    0,    0, 1268, 1269, 1269, 1269,
     1269,    0,    0, 1269,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1269,    0,    0, 1269, 1269, 1269,    0,    0,    0,    0,
     1269, 1271,    0, 1271,    0,    0,    0,    0,    0, 1271,
        0,    0, 1271, 1271, 1271,    0,    0,    0,    0, 1271,
     1272, 1272,    0, 1272,    0,    0,    0,    0,    0, 1272,
        0,    0, 1272, 1272, 1272,    0,    0,    0,    0, 1272,

     1273, 1273,    0, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273,    0, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1274,    0,    0, 1274,    0,
        0,    0,    0,    0, 1274,    0,    0, 1274, 1274, 1274,
        0,    0,    0,    0, 1274, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,    0, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1276, 1276,    0, 1276, 1276, 1276, 1276, 1276, 1276, 1276,

     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276,    0, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1277,    0,    0, 1277,    0,
        0,    0,    0,    0, 1277,    0,    0, 1277, 1277, 1277,
        0,    0,    0,    0, 1277, 1278, 1278,    0, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1279, 1279,    0, 1279,    0, 1279, 1279, 1279, 1279, 1279,
     1279, 1279,    0, 1279, 1279, 1279, 1279,    0, 1279, 1279,

     1279, 1279, 1279,    0, 1279,    0, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1280,    0,    0, 1280,    0,
        0,    0,    0,    0, 1280,    0,    0,    0,    0, 1280,
     1280,    0, 1280,    0,    0,    0,    0,    0, 1280,    0,
        0, 1280, 1280, 1280, 1281, 1281,    0, 1281,    0, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281,    0, 1281,    0,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1282,
     1282,    0, 1282,    0, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,

     1282, 1282,    0, 1282,    0, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1283,    0,    0, 1283,    0,    0,
        0,    0,    0, 1283,    0,    0, 1283, 1283, 1283,    0,
        0,    0,    0, 1283, 1284, 1284,    0, 1284, 1284, 1284,
     1284, 1284, 1284, 1284,    0,    0, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284,    0, 1284,    0,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1286,
        0, 1286, 1286,    0,    0,    0,    0, 1286,    0,    0,
     1286, 1286, 1286,    0,    0,    0,    0, 1286, 1288,    0,
     1288, 1288,    0,    0,    0,    0, 1288,    0,    0, 1288,

     1288, 1288,    0,    0,    0,    0, 1288, 1289, 1289,    0,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
        0, 1289,    0, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1290,    0,    0, 1290,    0,    0,    0,    0,
        0, 1290,    0,    0, 1290, 1290, 1290,    0,    0,    0,
        0, 1290, 1291, 1291,    0, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291,    0, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291,    0, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1292, 1292,    0,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,    0,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
        0, 1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1293,    0,    0, 1293,    0,    0,    0, 1293,
        0, 1293,    0,    0, 1293, 1293, 1293,    0,    0,    0,
        0, 1293, 1294,    0, 1294, 1294, 1294, 1294, 1294,    0,
        0, 1294,    0, 1294,    0,    0, 1294, 1294, 1294,    0,
        0,    0,    0, 1294, 1295, 1295,    0, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,    0,

     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,    0,
        0, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1297, 1297,    0, 1297, 1297, 1297,
     1297, 1297, 1297,    0, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297,    0,    0, 1297, 1297, 1297,    0,
        0, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1298,
     1298, 1298, 1298,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1298, 1298,    0, 1298, 1298, 1298,    0,

     1298, 1298, 1298, 1298,    0, 1298, 1298, 1299, 1299,    0,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1301, 1301,    0,    0,    0,    0, 1301,    0,
        0, 1301, 1301, 1301,    0,    0,    0,    0, 1301, 1302,
        0, 1302, 1302,    0, 1302,    0,    0,    0,    0, 1302,
     1302,    0,    0, 1302, 1302, 1302, 1303,    0,    0, 1303,
        0,    0,    0,    0,    0, 1303,    0,    0, 1303, 1303,
     1303, 1304,    0,    0, 1304,    0, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1307,    0, 1307, 1307,
        0, 1307,    0,    0,    0,    0, 1307, 1307,    0,    0,
     1307, 1307, 1307, 1308,    0,    0, 1308,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1308, 1308,    0, 1308,
     1308, 1308, 1308, 1309, 1309,    0, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,

     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310,    0,
        0, 1310,    0,    0,    0, 1310,    0, 1310, 1310, 1310,
     1310, 1310,    0,    0,    0, 1310, 1310, 1310,    0, 1310,
     1310, 1310,    0,    0,    0,    0, 1310, 1311,    0,    0,
     1311,    0,    0,    0, 1311,    0, 1311,    0, 1311, 1311,
     1311,    0,    0,    0, 1311, 1311, 1311,    0, 1311, 1311,
     1311,    0,    0,    0,    0, 1311, 1312,    0, 1312, 1312,
        0,    0,    0,    0, 1312,    0,    0, 1312, 1312, 1312,
        0,    0,    0,    0, 1312, 1313,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1313,    0,    0, 1313, 1313, 1313,    0,    0,
        0,    0, 1313, 1314, 1314, 1314, 1314,    0,    0, 1314,
        0,    0,    0,    0,    0,    0,    0,    0, 1314,    0,
        0, 1314,    0,    0,    0,    0, 1314,    0,    0, 1314,
     1314, 1314,    0,    0,    0, 1314, 1314, 1315, 1315, 1315,
     1315,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1315,    0, 1315, 1315, 1315,    0,    0,    0,
     1315,    0,    0, 1315, 1315, 1315,    0,    0,    0,    0,
     1315, 1316, 1316, 1316, 1316,    0,    0, 1316,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1316,    0,    0, 1316, 1316, 1316,
        0,    0,    0,    0, 1316, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317,    0, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1318,    0, 1318,    0,    0,    0, 1318,    0,    0, 1318,
     1318, 1318,    0,    0,    0,    0, 1318, 1319, 1319,    0,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,

     1319, 1319, 1320,    0,    0, 1320,    0,    0,    0, 1320,
        0, 1320, 1320, 1320, 1320, 1320,    0,    0,    0, 1320,
     1320, 1320,    0, 1320, 1320, 1320,    0,    0,    0,    0,
     1320, 1321,    0,    0, 1321,    0,    0,    0, 1321,    0,
     1321,    0, 1321, 1321, 1321,    0,    0,    0, 1321, 1321,
     1321,    0, 1321, 1321, 1321,    0,    0,    0,    0, 1321,
     1322, 1322,    0, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1323, 1323,    0, 1323, 1323,

     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1324, 1324,    0,    0, 1324,    0,    0,    0, 1324,    0,
     1324, 1324, 1324, 1324, 1324,    0, 1324,    0, 1324, 1324,
     1324,    0, 1324, 1324, 1324,    0,    0,    0,    0, 1324,
     1325,    0,    0, 1325,    0,    0,    0, 1325,    0, 1325,
        0, 1325, 1325, 1325,    0,    0,    0, 1325, 1325, 1325,
        0, 1325, 1325, 1325,    0,    0,    0,    0, 1325, 1326,
     1326, 1326, 1326,    0,    0, 1326,    0,    0,    0,    0,

        0,    0,    0,    0, 1326,    0,    0, 1326,    0,    0,
        0,    0, 1326,    0,    0, 1326, 1326, 1326,    0,    0,
        0, 1326, 1326, 1327, 1327, 1327, 1327,    0,    0,    0,
        0,    0, 1327,    0,    0,    0,    0,    0, 1327,    0,
     1327, 1327,    0,    0,    0,    0, 1327,    0,    0, 1327,
     1327, 1327,    0,    0,    0,    0, 1327, 1328, 1328, 1328,
     1328,    0,    0, 1328,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1328,    0,    0, 1328, 1328, 1328,    0,    0,    0,    0,
     1328, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,

     1329, 1329,    0, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1330,    0,    0, 1330,
        0,    0,    0,    0,    0, 1330,    0,    0,    0,    0,
        0,    0,    0, 1330,    0,    0,    0,    0,    0, 1330,
        0,    0, 1330, 1330, 1330,    0,    0,    0,    0, 1330,
     1331,    0,    0, 1331,    0,    0,    0,    0,    0, 1331,
        0,    0, 1331, 1331, 1331,    0,    0,    0,    0, 1331,
     1332, 1332,    0, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1333, 1333,    0, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1334, 1334,    0, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1335,    0,    0, 1335,    0,
        0,    0, 1335,    0, 1335, 1335, 1335, 1335, 1335,    0,

        0,    0, 1335, 1335, 1335,    0, 1335, 1335, 1335,    0,
        0,    0,    0, 1335, 1336,    0,    0, 1336,    0,    0,
        0, 1336,    0, 1336,    0, 1336, 1336, 1336,    0,    0,
        0, 1336, 1336, 1336,    0, 1336, 1336, 1336,    0,    0,
        0,    0, 1336, 1337,    0,    0, 1337,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1337,    0,    0,    0,
     1337,    0,    0,    0,    0,    0, 1337,    0,    0, 1337,
     1337, 1337,    0,    0,    0,    0, 1337, 1338, 1338, 1338,
     1338,    0,    0, 1338,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1338, 1338,    0,    0,    0,    0,

     1338,    0,    0, 1338, 1338, 1338,    0,    0,    0,    0,
     1338, 1340, 1340, 1340, 1340,    0,    0, 1340,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1340, 1340,
        0,    0,    0,    0, 1340,    0,    0, 1340, 1340, 1340,
        0,    0,    0,    0, 1340, 1341, 1341, 1341, 1341,    0,
        0, 1341,    0,    0,    0,    0,    0,    0,    0,    0,
     1341,    0,    0, 1341,    0,    0,    0,    0, 1341,    0,
        0, 1341, 1341, 1341,    0,    0,    0, 1341, 1341, 1342,
     1342, 1342, 1342,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1342,    0, 1342, 1342,    0,    0,

        0,    0, 1342,    0,    0, 1342, 1342, 1342,    0,    0,
        0,    0, 1342, 1343, 1343, 1343, 1343,    0,    0, 1343,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1343,    0,    0, 1343,
     1343, 1343,    0,    0,    0,    0, 1343, 1344,    0,    0,
        0,    0,    0, 1344,    0,    0, 1344, 1344, 1344,    0,
        0,    0,    0, 1344, 1345,    0, 1345,    0,    0,    0,
        0,    0, 1345,    0,    0, 1345, 1345, 1345,    0,    0,
        0,    0, 1345, 1346,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1346,    0,    0, 1346, 1346, 1346,    0,    0,    0,    0,
     1346, 1347, 1347,    0, 1347,    0,    0,    0,    0,    0,
     1347,    0,    0, 1347, 1347, 1347,    0,    0,    0,    0,
     1347, 1348, 1348,    0, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348,    0, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1349,    0,    0, 1349,
        0,    0,    0,    0,    0, 1349,    0,    0, 1349, 1349,
     1349,    0,    0,    0,    0, 1349, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,    0,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1351, 1351,    0, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351,    0, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1352,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1352,    0,    0, 1352, 1352, 1352,    0,
        0,    0,    0, 1352, 1353,    0,    0, 1353,    0,    0,
        0,    0,    0, 1353,    0,    0, 1353, 1353, 1353,    0,

        0,    0,    0, 1353, 1354, 1354,    0, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355,
     1355,    0, 1355,    0, 1355, 1355, 1355, 1355, 1355, 1355,
     1355,    0, 1355, 1355, 1355, 1355,    0, 1355, 1355, 1355,
     1355, 1355,    0, 1355,    0, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1356,    0,    0, 1356,    0,    0,
        0,    0,    0, 1356,    0,    0,    0,    0, 1356, 1356,
        0, 1356,    0,    0,    0,    0,    0, 1356,    0,    0,

     1356, 1356, 1356, 1357, 1357,    0, 1357,    0, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357,    0, 1357,    0, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,
        0, 1358,    0, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358,    0, 1358,    0, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1359,    0,    0, 1359,    0,    0,    0,
        0,    0, 1359,    0,    0, 1359, 1359, 1359,    0,    0,
        0,    0, 1359, 1360, 1360,    0, 1360, 1360, 1360, 1360,

     1360, 1360, 1360,    0,    0, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360,    0, 1360,    0, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1361,    0,
     1361, 1361,    0,    0,    0,    0, 1361,    0,    0, 1361,
     1361, 1361,    0,    0,    0,    0, 1361, 1362,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1362,    0,    0, 1362, 1362, 1362,
        0,    0,    0,    0, 1362, 1363,    0, 1363, 1363,    0,
        0,    0,    0, 1363,    0,    0, 1363, 1363, 1363,    0,
        0,    0,    0, 1363, 1364,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1364,    0,    0, 1364, 1364, 1364,    0,    0,    0,
        0, 1364, 1365, 1365,    0, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365,    0, 1365,    0, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1366,    0,    0,
     1366,    0,    0,    0,    0,    0, 1366,    0,    0, 1366,
     1366, 1366,    0,    0,    0,    0, 1366, 1367, 1367,    0,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367,    0, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367,    0, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1368, 1368,    0, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368,    0, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368,    0, 1368,    0, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1370,    0,    0,
        0,    0,    0,    0,    0, 1370,    0, 1370, 1370, 1370,
     1370, 1370,    0,    0, 1370,    0, 1370,    0,    0, 1370,
     1370, 1370,    0,    0,    0,    0, 1370, 1371,    0, 1371,
     1371, 1371, 1371, 1371,    0,    0, 1371,    0, 1371,    0,
        0, 1371, 1371, 1371,    0,    0,    0,    0, 1371, 1372,

        0,    0, 1372,    0,    0,    0, 1372,    0, 1372,    0,
        0, 1372, 1372, 1372,    0,    0,    0,    0, 1372, 1373,
     1373,    0, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373,    0, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374,    0,    0, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375,
     1375,    0, 1375, 1375, 1375, 1375, 1375, 1375,    0, 1375,

     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,    0,
        0, 1375, 1375, 1375,    0,    0, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1376, 1376,    0,    0,    0,    0,
     1376,    0,    0, 1376, 1376, 1376,    0,    0,    0,    0,
     1376, 1377, 1377,    0, 1377, 1377, 1377, 1377,    0, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378,    0, 1378,
        0,    0,    0,    0,    0, 1378,    0,    0, 1378, 1378,
     1378, 1379,    0, 1379, 1379,    0, 1379,    0,    0,    0,

        0, 1379, 1379,    0,    0, 1379, 1379, 1379, 1380,    0,
        0, 1380,    0, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1381, 1381,    0, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1382,    0,
        0, 1382,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1382,    0,    0, 1382, 1382, 1382, 1384,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1384,    0, 1384,
        0, 1384, 1384,    0,    0,    0,    0, 1384,    0,    0,
     1384, 1384, 1384,    0,    0, 1384, 1385,    0,    0, 1385,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1385,
        0,    0, 1385, 1385, 1385, 1385, 1386, 1386,    0, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,

     1386, 1389,    0,    0, 1389,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1389, 1389,    0, 1389, 1389, 1389,
     1389, 1390,    0,    0, 1390,    0,    0,    0, 1390,    0,
     1390, 1390, 1390, 1390, 1390,    0,    0,    0, 1390, 1390,
     1390,    0, 1390, 1390, 1390,    0,    0,    0,    0, 1390,
     1391,    0,    0, 1391,    0,    0,    0, 1391,    0, 1391,
     1391, 1391, 1391, 1391,    0,    0,    0, 1391, 1391, 1391,
        0, 1391, 1391, 1391,    0,    0,    0,    0, 1391, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1394,    0, 1394,    0,    0,    0,
     1394,    0,    0, 1394, 1394, 1394,    0,    0,    0,    0,
     1394, 1395,    0,    0, 1395,    0,    0,    0, 1395,    0,
     1395, 1395, 1395, 1395, 1395,    0,    0,    0, 1395, 1395,
     1395,    0, 1395, 1395, 1395,    0,    0,    0,    0, 1395,
     1396,    0,    0, 1396,    0,    0,    0, 1396,    0, 1396,
     1396, 1396, 1396, 1396,    0,    0,    0, 1396, 1396, 1396,
        0, 1396, 1396, 1396,    0,    0,    0,    0, 1396, 1397,

     1397,    0, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1398, 1398,    0,    0, 1398,    0,
        0,    0, 1398,    0, 1398, 1398, 1398, 1398, 1398,    0,
     1398,    0, 1398, 1398, 1398,    0, 1398, 1398, 1398,    0,
        0,    0,    0, 1398, 1399, 1399,    0,    0, 1399,    0,
        0,    0, 1399,    0, 1399, 1399, 1399, 1399, 1399,    0,
     1399,    0, 1399, 1399, 1399,    0, 1399, 1399, 1399,    0,
        0,    0,    0, 1399, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401,
        0,    0, 1401,    0,    0,    0,    0,    0, 1401,    0,
        0,    0,    0,    0,    0,    0, 1401,    0,    0,    0,
        0,    0, 1401,    0,    0, 1401, 1401, 1401,    0,    0,
        0,    0, 1401, 1402,    0,    0, 1402,    0,    0,    0,
     1402,    0, 1402, 1402, 1402, 1402, 1402,    0,    0,    0,
     1402, 1402, 1402,    0, 1402, 1402, 1402,    0,    0,    0,
        0, 1402, 1403,    0,    0, 1403,    0,    0,    0, 1403,

        0, 1403, 1403, 1403, 1403, 1403,    0,    0,    0, 1403,
     1403, 1403,    0, 1403, 1403, 1403,    0,    0,    0,    0,
     1403, 1404, 1404, 1404, 1404,    0,    0, 1404,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1404, 1404,
        0,    0,    0,    0, 1404,    0,    0, 1404, 1404, 1404,
        0,    0,    0,    0, 1404, 1405, 1405, 1405, 1405,    0,
        0, 1405,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1405,    0,    0,    0,    0, 1405,    0,
        0, 1405, 1405, 1405,    0,    0,    0,    0, 1405, 1406,
     1406, 1406, 1406,    0,    0, 1406,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1406, 1406,    0,    0,
        0,    0, 1406,    0,    0, 1406, 1406, 1406,    0,    0,
        0,    0, 1406, 1407,    0,    0,    0,    0,    0, 1407,
        0,    0, 1407, 1407, 1407,    0,    0,    0,    0, 1407,
     1409,    0, 1409,    0,    0,    0,    0,    0, 1409,    0,
        0, 1409, 1409, 1409,    0,    0,    0,    0, 1409, 1411,
        0,    0,    0,    0,    0, 1411,    0,    0, 1411, 1411,
     1411,    0,    0,    0,    0, 1411, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412,    0, 1412, 1412, 1412, 1412, 1412,

        0, 1412, 1412,    0,    0, 1412, 1412, 1412, 1412, 1412,
     1412, 1416,    0,    0,    0,    0,    0,    0,    0, 1416,
        0, 1416, 1416, 1416, 1416, 1416,    0,    0, 1416,    0,
     1416,    0,    0, 1416, 1416, 1416,    0,    0,    0,    0,
     1416, 1417,    0,    0, 1417,    0,    0,    0, 1417,    0,
     1417,    0,    0, 1417, 1417, 1417,    0,    0,    0,    0,
     1417, 1418,    0, 1418, 1418, 1418, 1418, 1418,    0,    0,
     1418,    0, 1418,    0,    0, 1418, 1418, 1418,    0,    0,
        0,    0, 1418, 1419, 1419,    0, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420,    0,
        0, 1420,    0,    0,    0,    0,    0, 1420,    0,    0,
     1420, 1420, 1420, 1421,    0, 1421,    0, 1421, 1421,    0,
     1421,    0,    0,    0,    0, 1421, 1421,    0,    0, 1421,
     1421, 1421, 1422, 1422,    0, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1424,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1424,    0, 1424,

        0, 1424, 1424,    0,    0,    0,    0, 1424,    0,    0,
     1424, 1424, 1424,    0,    0, 1424, 1425,    0,    0, 1425,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1425,
        0,    0, 1425, 1425, 1425, 1425, 1426, 1426,    0, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1427, 1427,    0, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,

     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1429,    0,    0, 1429,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1429,
     1429,    0, 1429, 1429, 1429, 1429, 1430, 1430,    0, 1430,
        0,    0,    0,    0,    0,    0,    0,    0, 1430,    0,
     1430, 1430,    0, 1430, 1430,    0,    0,    0, 1430, 1430,
        0,    0, 1430, 1430, 1430,    0, 1430, 1431,    0,    0,
     1431,    0,    0,    0, 1431,    0, 1431, 1431, 1431, 1431,
     1431,    0,    0,    0, 1431, 1431, 1431,    0, 1431, 1431,

     1431,    0,    0,    0,    0, 1431, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1433,    0,    0, 1433,    0,    0,    0, 1433,    0,
     1433, 1433, 1433, 1433, 1433,    0,    0,    0, 1433, 1433,
     1433,    0, 1433, 1433, 1433,    0,    0,    0,    0, 1433,
     1434, 1434,    0, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1435, 1435,    0,    0, 1435,
        0,    0,    0, 1435,    0, 1435, 1435, 1435, 1435, 1435,
        0, 1435,    0, 1435, 1435, 1435,    0, 1435, 1435, 1435,
        0,    0,    0,    0, 1435, 1436,    0,    0, 1436,    0,
        0,    0, 1436,    0, 1436, 1436, 1436, 1436, 1436,    0,
        0,    0, 1436, 1436, 1436,    0, 1436, 1436, 1436,    0,
        0,    0,    0, 1436, 1438, 1438, 1438, 1438,    0,    0,
     1438,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1438, 1438,    0,    0,    0,    0, 1438,    0,    0,
     1438, 1438, 1438,    0,    0,    0,    0, 1438, 1439, 1439,

     1439, 1439,    0,    0, 1439,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1439,    0,    0,    0,
        0, 1439,    0,    0, 1439, 1439, 1439,    0,    0,    0,
        0, 1439, 1440,    0, 1440,    0,    0,    0,    0,    0,
     1440,    0,    0, 1440, 1440, 1440,    0,    0,    0,    0,
     1440, 1441,    0,    0,    0,    0,    0, 1441,    0,    0,
     1441, 1441, 1441,    0,    0,    0,    0, 1441, 1442,    0,
        0,    0,    0,    0,    0,    0, 1442,    0, 1442, 1442,
     1442, 1442, 1442,    0,    0, 1442,    0, 1442,    0,    0,
     1442, 1442, 1442,    0,    0,    0,    0, 1442, 1443,    0,

     1443, 1443, 1443, 1443, 1443,    0,    0, 1443,    0, 1443,
        0,    0, 1443, 1443, 1443,    0,    0,    0,    0, 1443,
     1444, 1444,    0, 1444,    0,    0,    0,    0,    0, 1444,
        0,    0, 1444, 1444, 1444, 1445, 1445,    0, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1446, 1446, 1446, 1446,    0,    0, 1446,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1446, 1446,    0,
        0,    0,    0, 1446,    0,    0, 1446, 1446, 1446,    0,

        0,    0,    0, 1446, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447,    0, 1447, 1447, 1447, 1447, 1447,    0, 1447,
     1447,    0, 1447,    0, 1447, 1447, 1447, 1447, 1447, 1448,
     1448,    0, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449,    0, 1449, 1449, 1449, 1449, 1449,    0, 1449,

     1449,    0,    0,    0, 1449, 1449, 1449, 1449, 1449, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450,    0, 1450, 1450,
     1450, 1450, 1450,    0, 1450, 1450,    0,    0,    0, 1450,
     1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451,    0, 1451, 1451, 1451, 1451, 1451,    0, 1451,
     1451,    0,    0,    0, 1451, 1451, 1451, 1451, 1451, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452,    0, 1452, 1452,

     1452, 1452, 1452,    0, 1452, 1452,    0,    0,    0, 1452,
     1452, 1452, 1452, 1452, 1453, 1453,    0, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2020 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 25 "commentscan.l"

/*
 *	includes
 */

#include <map>
#include <stack>
#include <string>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qcstring.h>
#include <qcstringlist.h>

#include "cite.h"
#include "commentscan.h"
#include "condparser.h"
#include "config.h"
#include "debug.h"
#include "docgroup.h"
#include "doxygen.h"
#include "entry.h"
#include "formula.h"
#include "language.h"
#include "message.h"
#include "parserintf.h"
#include "reflist.h"
#include "section.h"
#include "util.h"
#include "reflist.h"

// forward declarations
static bool handleBrief(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleFn(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleDef(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleOverload(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleEnum(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleDefGroup(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleAddToGroup(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleWeakGroup(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleNamespace(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handlePackage(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleClass(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleHeaderFile(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleProtocol(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleCategory(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleUnion(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleStruct(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleInterface(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleIdlException(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handlePage(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleMainpage(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleFile(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleDir(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleExample(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleDetails(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleNoop(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleName(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleTodo(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleTest(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleBug(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleSubpage(yyscan_t yyscanner,const QCString &s, const QCStringList &);
static bool handleDeprecated(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleXRefItem(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleRelated(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleRelatedAlso(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleMemberOf(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleRefItem(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleSection(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleAnchor(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleCite(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleFormatBlock(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleAddIndex(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleIf(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleIfNot(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleElseIf(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleElse(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleEndIf(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleIngroup(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleNoSubGrouping(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleShowInitializer(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleHideInitializer(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleCallgraph(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleHideCallgraph(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleCallergraph(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleHideCallergraph(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleReferencedByRelation(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleHideReferencedByRelation(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleReferencesRelation(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleHideReferencesRelation(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleInternal(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleLineBr(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleStatic(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handlePure(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handlePrivate(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handlePrivateSection(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleProtected(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleProtectedSection(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handlePublic(yyscan_t yyscanner,const QCString &s, const QCStringList &);
static bool handlePublicSection(yyscan_t yyscanner,const QCString &s, const QCStringList &);
static bool handleToc(yyscan_t yyscanner,const QCString &s, const QCStringList &);
static bool handleInherit(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleExtends(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleCopyDoc(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleCopyBrief(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleCopyDetails(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleParBlock(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleEndParBlock(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleParam(yyscan_t yyscanner,const QCString &, const QCStringList &);
static bool handleRetval(yyscan_t yyscanner,const QCString &, const QCStringList &);

static const char *stateToString(int state);

typedef bool (*DocCmdFunc)(yyscan_t yyscanner,const QCString &name, const QCStringList &optList);

struct DocCmdMap
{
  DocCmdMap(DocCmdFunc h,bool b) : handler(h), endsBrief(b) {}
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static const std::map< std::string, DocCmdMap > docCmdMap =
{
  // command name      handler function         ends brief description
  { "brief",           { &handleBrief,            FALSE }},
  { "short",           { &handleBrief,            FALSE }},
  { "fn",              { &handleFn,               TRUE }},
  { "var",             { &handleFn,               TRUE }},
  { "typedef",         { &handleFn,               TRUE }},
  { "property",        { &handleFn,               TRUE }},
  { "def",             { &handleDef,              TRUE }},
  { "overload",        { &handleOverload,         FALSE }},
  { "enum",            { &handleEnum,             TRUE }},
  { "defgroup",        { &handleDefGroup,         TRUE }},
  { "addtogroup",      { &handleAddToGroup,       TRUE }},
  { "weakgroup",       { &handleWeakGroup,        TRUE }},
  { "namespace",       { &handleNamespace,        TRUE }},
  { "package",         { &handlePackage,          TRUE }},
  { "class",           { &handleClass,            TRUE }},
  { "headerfile",      { &handleHeaderFile,       FALSE }},
  { "protocol",        { &handleProtocol,         TRUE }},
  { "category",        { &handleCategory,         TRUE }},
  { "union",           { &handleUnion,            TRUE }},
  { "struct",          { &handleStruct,           TRUE }},
  { "interface",       { &handleInterface,        TRUE }},
  { "idlexcept",       { &handleIdlException,     TRUE }},
  { "page",            { &handlePage,             TRUE }},
  { "mainpage",        { &handleMainpage,         TRUE }},
  { "file",            { &handleFile,             TRUE }},
  { "dir",             { &handleDir,              TRUE }},
  { "example",         { &handleExample,          FALSE }},
  { "details",         { &handleDetails,          TRUE  }},
  { "name",            { &handleName,             FALSE }},
  { "todo",            { &handleTodo,             FALSE }}, // end brief will be done differently
  { "test",            { &handleTest,             FALSE }}, // end brief will be done differently
  { "bug",             { &handleBug,              FALSE }}, // end brief will be done differently
  { "deprecated",      { &handleDeprecated,       FALSE }}, // end brief will be done differently
  { "xrefitem",        { &handleXRefItem,         FALSE }}, // end brief will be done differently
  { "related",         { &handleRelated,          TRUE  }},
  { "relates",         { &handleRelated,          TRUE  }},
  { "relatedalso",     { &handleRelatedAlso,      TRUE  }},
  { "relatesalso",     { &handleRelatedAlso,      TRUE  }},
  { "parblock",        { &handleParBlock,         TRUE  }},
  { "endparblock",     { &handleEndParBlock,      TRUE  }},
  { "refitem",         { &handleRefItem,          TRUE  }},
  { "cite",            { &handleCite,             FALSE }},
  { "subpage",         { &handleSubpage,          TRUE  }},
  { "section",         { &handleSection,          TRUE  }},
  { "subsection",      { &handleSection,          TRUE  }},
  { "subsubsection",   { &handleSection,          TRUE  }},
  { "paragraph",       { &handleSection,          TRUE  }},
  { "anchor",          { &handleAnchor,           TRUE  }},
  { "verbatim",        { &handleFormatBlock,      TRUE  }},
  { "latexonly",       { &handleFormatBlock,      FALSE }},
  { "htmlonly",        { &handleFormatBlock,      FALSE }},
  { "xmlonly",         { &handleFormatBlock,      FALSE }},
  { "docbookonly",     { &handleFormatBlock,      FALSE }},
  { "rtfonly",         { &handleFormatBlock,      FALSE }},
  { "manonly",         { &handleFormatBlock,      FALSE }},
  { "dot",             { &handleFormatBlock,      TRUE  }},
  { "msc",             { &handleFormatBlock,      TRUE  }},
  { "startuml",        { &handleFormatBlock,      TRUE  }},
  { "code",            { &handleFormatBlock,      TRUE  }},
  { "addindex",        { &handleAddIndex,         FALSE }},
  { "if",              { &handleIf,               FALSE }},
  { "ifnot",           { &handleIfNot,            FALSE }},
  { "elseif",          { &handleElseIf,           FALSE }},
  { "else",            { &handleElse,             FALSE }},
  { "endif",           { &handleEndIf,            FALSE }},
  { "ingroup",         { &handleIngroup,          TRUE }},
  { "nosubgrouping",   { &handleNoSubGrouping,    FALSE }},
  { "showinitializer", { &handleShowInitializer,  FALSE }},
  { "hideinitializer", { &handleHideInitializer,  FALSE }},
  { "callgraph",       { &handleCallgraph,        FALSE }},
  { "hidecallgraph",   { &handleHideCallgraph,    FALSE }},
  { "callergraph",     { &handleCallergraph,      FALSE }},
  { "hidecallergraph", { &handleHideCallergraph,  FALSE }},
  { "showrefby",       { &handleReferencedByRelation,     FALSE }},
  { "hiderefby",       { &handleHideReferencedByRelation, FALSE }},
  { "showrefs",        { &handleReferencesRelation,       FALSE }},
  { "hiderefs",        { &handleHideReferencesRelation,   FALSE }},
  { "internal",        { &handleInternal,         TRUE  }},
  { "_linebr",         { &handleLineBr,           FALSE }},
  { "static",          { &handleStatic,           FALSE }},
  { "pure",            { &handlePure,             FALSE }},
  { "private",         { &handlePrivate,          FALSE }},
  { "privatesection",  { &handlePrivateSection,   FALSE }},
  { "protected",       { &handleProtected,        FALSE }},
  { "protectedsection",{ &handleProtectedSection, FALSE }},
  { "public",          { &handlePublic,           FALSE }},
  { "publicsection",   { &handlePublicSection,    FALSE }},
  { "tableofcontents", { &handleToc,              FALSE }},
  { "inherit",         { &handleInherit,          TRUE  }},
  { "extends",         { &handleExtends,          TRUE  }},
  { "implements",      { &handleExtends,          TRUE  }},
  { "memberof",        { &handleMemberOf,         TRUE  }},
  { "arg",             { 0,                       TRUE  }},
  { "attention",       { 0,                       TRUE  }},
  { "author",          { 0,                       TRUE  }},
  { "authors",         { 0,                       TRUE  }},
  { "copydoc",         { &handleCopyDoc,          TRUE  }},
  { "copybrief",       { &handleCopyBrief,        FALSE }},
  { "copydetails",     { &handleCopyDetails,      TRUE  }},
  { "copyright",       { 0,                       TRUE  }},
  { "date",            { 0,                       TRUE  }},
  { "dotfile",         { 0,                       TRUE  }},
  { "htmlinclude",     { 0,                       FALSE }},
  { "image",           { 0,                       TRUE  }},
  { "include",         { 0,                       TRUE  }},
  { "includelineno",   { 0,                       TRUE  }},
  { "invariant",       { 0,                       TRUE  }},
  { "latexinclude",    { 0,                       FALSE }},
  { "li",              { 0,                       TRUE  }},
  { "line",            { 0,                       TRUE  }},
  { "note",            { 0,                       TRUE  }},
  { "par",             { 0,                       TRUE  }},
  { "param",           { &handleParam,            TRUE  }},
  { "tparam",          { 0,                       TRUE  }},
  { "post",            { 0,                       TRUE  }},
  { "pre",             { 0,                       TRUE  }},
  { "remark",          { 0,                       TRUE  }},
  { "remarks",         { 0,                       TRUE  }},
  { "result",          { 0,                       TRUE  }},
  { "return",          { 0,                       TRUE  }},
  { "returns",         { 0,                       TRUE  }},
  { "exception",       { 0,                       TRUE  }},
  { "retval",          { &handleRetval,           TRUE  }},
  { "sa",              { 0,                       TRUE  }},
  { "see",             { 0,                       TRUE  }},
  { "since",           { 0,                       TRUE  }},
  { "throw",           { 0,                       TRUE  }},
  { "throws",          { 0,                       TRUE  }},
  { "until",           { 0,                       TRUE  }},
  { "verbinclude",     { 0,                       FALSE }},
  { "version",         { 0,                       TRUE  }},
  { "warning",         { 0,                       TRUE  }},
  { "snippet",         { 0,                       TRUE  }},
  { "snippetlineno",   { 0,                       TRUE  }},
  { "noop",            { &handleNoop,             TRUE }},
  { "rtfinclude",      { 0,                       FALSE }},
  { "docbookinclude",  { 0,                       FALSE }},
  { "maninclude",      { 0,                       FALSE }},
  { "xmlinclude",      { 0,                       FALSE }}
};

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

/* -----------------------------------------------------------------
 *
 *	statics
 */

struct commentscanYY_state
{
  OutlineParserInterface *langParser = 0;  // the language parser that is calling us
  QCString         inputString;            // input string
  int              inputPosition = 0;      // read pointer
  QCString         fileName;               // file name that is read from
  int              lineNr = 0;             // line number in the input
  bool             inBody = FALSE;         // was the comment found inside the body of a function?
  OutputContext    inContext;              // are we inside the brief, details or xref part
  bool             briefEndsAtDot = FALSE; // does the brief description stop at a dot?
  QCString         formulaText;            // Running text of a formula
  QCString         formulaEnv;             // environment name
  int              formulaNewLines = 0;    // amount of new lines in the formula
  QCString        *pOutputString = 0;      // pointer to string to which the output is appended.
  QCString         outputXRef;               // temp argument of todo/test/../xrefitem commands
  QCString         blockName;                // preformatted block name (e.g. verbatim, latexonly,...)
  XRefKind         xrefKind    = XRef_Item;  // kind of cross-reference command
  XRefKind         newXRefKind = XRef_Item;  //
  GuardType        guardType = Guard_If;     // kind of guards for conditional section
  bool             enabledSectionFound = FALSE;
  QCString         functionProto;          // function prototype
  std::stack<GuardedSection> guards;             // tracks nested conditional sections (if,ifnot,..)
  Entry           *current = 0;              // working entry

  bool             needNewEntry = FALSE;

  QCString         sectionLabel;
  QCString         sectionTitle;
  int              sectionLevel = 0;
  QCString         xrefItemKey;
  QCString         newXRefItemKey;
  QCString         xrefItemTitle;
  QCString         xrefListTitle;
  Protection       protection = Public;

  bool             xrefAppendFlag = FALSE;
  bool             inGroupParamFound = FALSE;
  int              braceCount = 0;
  bool             insidePre = FALSE;
  bool             parseMore = FALSE;
  int              condCount = 0;

  int              commentCount = 0;
  QCString         spaceBeforeCmd;
  QCString         spaceBeforeIf;
  QCString         copyDocArg;

  QCString         guardExpr;
  int              roundCount = 0;

  bool             insideParBlock = FALSE;
  bool             inInternalDocs = FALSE;
  int              prevPosition = 0;
  DocGroup         docGroup;
};

//-----------------------------------------------------------------------------

static QCString stripQuotes(const char *s);
static bool getDocSectionName(int s);
static SectionType sectionLevelToType(int level);
static void stripTrailingWhiteSpace(QCString &s);

static void initParser(yyscan_t yyscanner);
static bool makeStructuralIndicator(yyscan_t yyscanner,Entry::Sections s);
static void lineCount(yyscan_t yyscanner);
static QCString stripQuotes(yyscan_t yyscanner,const char *s);
static void addXRefItem(yyscan_t yyscanner,
                        const char *listName,const char *itemTitle,
                        const char *listTitle,bool append);
static QCString addFormula(yyscan_t yyscanner);
static void checkFormula(yyscan_t yyscanner);
static void addSection(yyscan_t yyscanner);
static inline void setOutput(yyscan_t yyscanner,OutputContext ctx);
static void addAnchor(yyscan_t yyscanner,const char *anchor);
static inline void addOutput(yyscan_t yyscanner,const char *s);
static inline void addOutput(yyscan_t yyscanner,char c);
static void endBrief(yyscan_t yyscanner,bool addToOutput=TRUE);
static void handleGuard(yyscan_t yyscanner,const QCString &expr);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);
static void addCite(yyscan_t yyscanner);

//-----------------------------------------------------------------------------


#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

/* start command character */
/* comment parsing states. */












































#line 3822 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/commentscan.cpp"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define ParamArg1 13
#define EnumDocArg1 14
#define NameSpaceDocArg1 15
#define PackageDocArg1 16
#define GroupDocArg1 17
#define GroupDocArg2 18
#define SectionLabel 19
#define SectionTitle 20
#define SubpageLabel 21
#define SubpageTitle 22
#define FormatBlock 23
#define LineParam 24
#define GuardParam 25
#define GuardParamEnd 26
#define SkipGuardedSection 27
#define SkipInternal 28
#define NameParam 29
#define InGroupParam 30
#define FnParam 31
#define OverloadParam 32
#define InheritParam 33
#define ExtendsParam 34
#define ReadFormulaShort 35
#define ReadFormulaLong 36
#define AnchorLabel 37
#define HtmlComment 38
#define SkipLang 39
#define CiteLabel 40
#define CopyDoc 41
#define GuardExpr 42
#define CdataSection 43
#define Noop 44

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct commentscanYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int commentscanYYlex_init (yyscan_t* scanner);

int commentscanYYlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (yyscan_t yyscanner );

int commentscanYYget_debug (yyscan_t yyscanner );

void commentscanYYset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE commentscanYYget_extra (yyscan_t yyscanner );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *commentscanYYget_in (yyscan_t yyscanner );

void commentscanYYset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *commentscanYYget_out (yyscan_t yyscanner );

void commentscanYYset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t commentscanYYget_leng (yyscan_t yyscanner );

char *commentscanYYget_text (yyscan_t yyscanner );

int commentscanYYget_lineno (yyscan_t yyscanner );

void commentscanYYset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (yyscan_t yyscanner );
#else
extern int commentscanYYwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (yyscan_t yyscanner);

#define YY_DECL int commentscanYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 520 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. doxygen@gmail.com).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4119 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/commentscan.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		commentscanYY_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1209 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1208 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 539 "commentscan.l"
{ // escaped command
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 542 "commentscan.l"
{ // escaped command
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 545 "commentscan.l"
{ // mail address
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 548 "commentscan.l"
{ // quoted text
                                          addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 551 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 554 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(yyscanner,OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 559 "commentscan.l"
{ // HTML command that ends a brief description
					  if (yyextra->current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(yyscanner,OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 567 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(yyscanner,OutputBrief);
                                          addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 571 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(yyscanner,OutputDoc);
                                          addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 575 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(yyscanner,OutputBrief);
                                          addOutput(yyscanner,yytext);
					  setOutput(yyscanner,OutputDoc);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 580 "commentscan.l"
{ // end of a brief or detailed description
                                          
					  setOutput(yyscanner,OutputDoc);
                                          addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 585 "commentscan.l"
{
                                          QCString tag=yytext;
                                          int s=tag.find("id=");
                                          if (s!=-1) // command has id attribute
                                          {
                                            char c=tag[s+3];
                                            if (c=='\'' || c=='"') // valid start
                                            {
                                              int e=tag.find(c,s+4);
                                              if (e!=-1) // found matching end
                                              {
                                                QCString id=tag.mid(s+4,e-s-4); // extract id
                                                addAnchor(yyscanner,id);
                                              }
                                            }
                                          }
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 603 "commentscan.l"
{
                                          yyextra->insidePre=TRUE;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 607 "commentscan.l"
{
                                          yyextra->insidePre=FALSE;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 611 "commentscan.l"
{ // RCS tag which end a brief description
                                          setOutput(yyscanner,OutputDoc);
                                          REJECT;
                                        }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 615 "commentscan.l"
{ 
                                          BEGIN(HtmlComment);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 618 "commentscan.l"
{
                                          BEGIN(CdataSection);
                                        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 621 "commentscan.l"
{
                                          addOutput(yyscanner," \\endinternal "); 
                                          if (!yyextra->inInternalDocs)
  					    warn(yyextra->fileName,yyextra->lineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          yyextra->inInternalDocs = FALSE;
  					}
	YY_BREAK
case 19:
#line 630 "commentscan.l"
case 20:
YY_RULE_SETUP
#line 630 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
                                          QCString fullMatch = QCString(yytext);
                                          int idx = fullMatch.find('{');
                                          /* handle `\f{` and `@f{` as special cases */
                                          if ((idx > 1) && (yytext[idx-1] == 'f') && (yytext[idx-2] == '\\' || yytext[idx-2] =='@')) REJECT;
                                          int idxEnd = fullMatch.find("}",idx+1);
                                          QCString cmdName;
                                          QCStringList optList;
                                          if (idx == -1) // no options
                                          {
                                            cmdName = QCString(yytext).stripWhiteSpace().data()+1; // to remove {CMD}
                                          }
                                          else // options present
                                          {
                                            cmdName = fullMatch.left(idx).stripWhiteSpace().data()+1; // to remove {CMD}
                                            QCString optStr = fullMatch.mid(idx+1,idxEnd-idx-1).stripWhiteSpace();
                                            optList = QCStringList::split(',',optStr);
                                          }
					  auto it = docCmdMap.find(cmdName.data());
					  if (it!=docCmdMap.end()) // special action is required
					  {
                                            int i=0;
                                            while (yytext[i]==' ' || yytext[i]=='\t') i++;
					    yyextra->spaceBeforeCmd = QCString(yytext).left(i);
					    if (it->second.endsBrief && !(yyextra->inContext==OutputXRef && cmdName=="parblock"))
					    {
					      yyextra->briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(yyscanner,OutputDoc);
					    }
                                            //if (i>0) addOutput(yyscanner,QCString(yytext).left(i)); // removed for bug 689341
					    if (it->second.handler && it->second.handler(yyscanner, cmdName, optList))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      yyextra->parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
					      yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (it->second.handler==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(yyscanner,yytext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(yyscanner,yytext);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 692 "commentscan.l"
{ // escaped formula command
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 695 "commentscan.l"
{ // language switch command
                                          QCString langId = QCString(yytext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 703 "commentscan.l"
{ // start of a formula with custom environment
					  setOutput(yyscanner,OutputDoc);
					  yyextra->formulaText="\\begin";
					  yyextra->formulaEnv=QCString(yytext).stripWhiteSpace().data()+2;
					  if (yyextra->formulaEnv.at(yyextra->formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    yyextra->formulaEnv=yyextra->formulaEnv.left(yyextra->formulaEnv.length()-1);
					  }
					  yyextra->formulaText+=yyextra->formulaEnv;
					  yyextra->formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 716 "commentscan.l"
{ // start of a inline formula
					  yyextra->formulaText="$";
					  yyextra->formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 721 "commentscan.l"
{ // start of a block formula
					  setOutput(yyscanner,OutputDoc);
					  yyextra->formulaText="\\[";
					  yyextra->formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 727 "commentscan.l"
{ // begin of a group
                                          //yyextra->langParser->handleGroupStartCommand(yyextra->memberGroupHeader);
                                          yyextra->docGroup.open(yyextra->current,yyextra->fileName,yyextra->lineNr);
                                        }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 731 "commentscan.l"
{ // end of a group
                                          //yyextra->langParser->handleGroupEndCommand();
                                          yyextra->docGroup.close(yyextra->current,yyextra->fileName,yyextra->lineNr,TRUE);
					  yyextra->docGroup.clearHeader();
					  yyextra->parseMore=TRUE;
                                          yyextra->needNewEntry = TRUE;
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
				          yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(yytext);
#else
				          yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(yytext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 744 "commentscan.l"
{ // escaped character
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 747 "commentscan.l"
{ // normal word
					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 750 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(yyscanner,yytext); 
					}
	YY_BREAK
case 31:
#line 754 "commentscan.l"
case 32:
YY_RULE_SETUP
#line 754 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (yyextra->inContext!=OutputXRef) 
                                            {
                                              yyextra->briefEndsAtDot=FALSE;
                                              setOutput(yyscanner,OutputDoc);
                                            }
                                            addOutput(yyscanner,yytext); 
                                          }
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 769 "commentscan.l"
{ // start of autolist
					  if (yyextra->inContext!=OutputXRef) 
					  {
					    yyextra->briefEndsAtDot=FALSE;
					    setOutput(yyscanner,OutputDoc);
					  }
  				          addOutput(yyscanner,yytext); 
  					}
	YY_BREAK
case 34:
/* rule 34 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 777 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(yyscanner,yytext); 
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 780 "commentscan.l"
{ // escaped mdash
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 783 "commentscan.l"
{ // escaped mdash
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 786 "commentscan.l"
{ // mdash
                                          addOutput(yyscanner,yyextra->insidePre || Doxygen::markdownSupport ? yytext : "&mdash;");
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 789 "commentscan.l"
{ // ndash
                                          addOutput(yyscanner,yyextra->insidePre || Doxygen::markdownSupport ? yytext : "&ndash;");
                                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 792 "commentscan.l"
{ // numbered item
                                          if (yyextra->inContext!=OutputXRef)
                                          {
                                            yyextra->briefEndsAtDot=FALSE;
                                            setOutput(yyscanner,OutputDoc);
                                          }
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 800 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 803 "commentscan.l"
{ // . with escaped space.
  					  addOutput(yyscanner,yytext[0]);
  					  addOutput(yyscanner,yytext[2]);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 807 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 810 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput(yyscanner,"... ");
  					}
	YY_BREAK
case 44:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 813 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 816 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (yyextra->inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    if (!yyextra->insideParBlock) setOutput(yyscanner,OutputDoc);
                                            int i;
                                            for (i=0;i<yyleng;)
                                            {
                                              if (yytext[i]=='\n') addOutput(yyscanner,'\n'),i++;
                                              else if (strcmp(yytext+i,"\\_linebr")==0) addOutput(yyscanner,'\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (yyextra->inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<yyleng;)
                                            {
                                              if (yytext[i]=='\n') addOutput(yyscanner,'\n'),i++;
                                              else if (strcmp(yytext+i,"\\_linebr")==0) addOutput(yyscanner,'\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(yyscanner,OutputDoc);
					  }
					  else // yyextra->inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(yyscanner,FALSE);
					  }
  					  lineCount(yyscanner);
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 847 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(yyscanner,*yytext);
  					  if (yyextra->briefEndsAtDot)
					  {
					    setOutput(yyscanner,OutputDoc);
					    yyextra->briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 855 "commentscan.l"
{ // newline
  					  addOutput(yyscanner,*yytext);
  					  yyextra->lineNr++;
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 859 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(yyscanner,*yytext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 49:
YY_RULE_SETUP
#line 866 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 867 "commentscan.l"
{ 
  					  if (*yytext=='\n') yyextra->lineNr++;
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 870 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 872 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 875 "commentscan.l"
{
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 878 "commentscan.l"
{ 
                                          addOutput(yyscanner,'\n');
                                          if (*yytext=='\n') yyextra->lineNr++;
                                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 882 "commentscan.l"
{ // the special XML characters for iwhich the CDATA section is especially used
                                          addOutput(yyscanner,'\\');
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 886 "commentscan.l"
{
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 889 "commentscan.l"
{ 
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 58:
YY_RULE_SETUP
#line 895 "commentscan.l"
{ // end of inline formula
  					  yyextra->formulaText+="$";
					  addOutput(yyscanner," "+addFormula(yyscanner));
					  BEGIN(Comment);
  					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 900 "commentscan.l"
{ // end of block formula
					  yyextra->formulaText+="\\]";
					  addOutput(yyscanner," "+addFormula(yyscanner));
					  BEGIN(Comment);
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 905 "commentscan.l"
{ // end of custom env formula
					  yyextra->formulaText+="\\end";
					  yyextra->formulaText+=yyextra->formulaEnv;
					  addOutput(yyscanner," "+addFormula(yyscanner));
					  BEGIN(Comment);
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 911 "commentscan.l"
{ // any non-special character
                                          yyextra->formulaText+=yytext; 
 					} 
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 914 "commentscan.l"
{ // new line
                                          yyextra->formulaNewLines++;
                                          yyextra->formulaText+=*yytext; 
					  yyextra->lineNr++; 
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 919 "commentscan.l"
{ // any other character
                                          yyextra->formulaText+=*yytext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 925 "commentscan.l"
{ // handle argument
  					  yyextra->current->name = yytext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 929 "commentscan.l"
{ // line continuation
  					  yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 933 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after \\enum."
                                              );
					  addOutput(yyscanner,'\n');
  					  if (*yytext=='\n') yyextra->lineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 941 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 946 "commentscan.l"
{ // handle argument
  					  yyextra->current->name = substitute(yytext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 950 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 954 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
					       "\\namespace."
                                              );
					  addOutput(yyscanner,'\n');
  					  if (*yytext=='\n') yyextra->lineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 963 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 72:
YY_RULE_SETUP
#line 968 "commentscan.l"
{ // handle argument
  					  yyextra->current->name = yytext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 972 "commentscan.l"
{ // line continuation 
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 976 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
					       "\\package."
                                              );
					  addOutput(yyscanner,'\n');
  					  if (*yytext=='\n') yyextra->lineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 985 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 990 "commentscan.l"
{ 
  					  yyextra->current->name = substitute(removeRedundantWhiteSpace(yytext),".","::");
					  BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 994 "commentscan.l"
{ // first argument
  					  yyextra->current->name = substitute(yytext,".","::");
					  if (yyextra->current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    yyextra->current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1003 "commentscan.l"
{
  					  yyextra->current->name = substitute(yytext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1007 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1011 "commentscan.l"
{
  					  warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput(yyscanner,'\n');
  					  if (*yytext=='\n') yyextra->lineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1020 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1023 "commentscan.l"
{ // second argument; include file
					  yyextra->current->includeFile = yytext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1027 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1031 "commentscan.l"
{ 
					  addOutput(yyscanner,'\n');
  					  if (*yytext=='\n') yyextra->lineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1036 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1039 "commentscan.l"
{ // third argument; include file name
 					  yyextra->current->includeName = yytext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1043 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1047 "commentscan.l"
{ 
  					  if (*yytext=='\n') yyextra->lineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1051 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 90:
YY_RULE_SETUP
#line 1056 "commentscan.l"
{ // group name
  					  yyextra->current->name = yytext;
					  //lastDefGroup.groupname = yytext;
					  //lastDefGroup.pri = yyextra->current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (yyextra->current->name.right(5)==".html") 
					  {
					    yyextra->current->name=yyextra->current->name.left(yyextra->current->name.length()-5);
					  }
					  yyextra->current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1068 "commentscan.l"
{ // line continuation
  					  yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1072 "commentscan.l"
{ // missing argument!
  					  warn(yyextra->fileName,yyextra->lineNr,
                                               "missing group name after %s",
					       yyextra->current->groupDocCmd()
                                              );
					  addOutput(yyscanner,'\n');
  					  if (*yytext=='\n') yyextra->lineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1081 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1083 "commentscan.l"
{ // line continuation
  					  yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1087 "commentscan.l"
{ // title (stored in type)
					  yyextra->current->type += yytext;
					  yyextra->current->type = yyextra->current->type.stripWhiteSpace();
                                        }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1091 "commentscan.l"
{
                                          if ( yyextra->current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               yyextra->current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyextra->fileName,yyextra->lineNr,
                                                 "missing title after "
					         "\\defgroup %s", yyextra->current->name.data()
                                                );
					  }
  					  if (*yytext=='\n') yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1105 "commentscan.l"
{ // title (stored in type)
					  yyextra->current->type += yytext;
					  yyextra->current->type = yyextra->current->type.stripWhiteSpace();
                                        }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 98:
YY_RULE_SETUP
#line 1112 "commentscan.l"
{ // first argument; page name
					  yyextra->current->name = stripQuotes(yytext);
					  yyextra->current->args = "";
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1117 "commentscan.l"
{ yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1120 "commentscan.l"
{
  					  warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
					       "\\page."
                                              );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1129 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1131 "commentscan.l"
{ // second argument; page title
					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1136 "commentscan.l"
{ 
					  // bug 748927
					  QCString tmp = yytext;
					  tmp = substitute(substitute(tmp,"@<","&lt;"),"@>","&gt;");
					  tmp = substitute(substitute(tmp,"\\<","&lt;"),"\\>","&gt;");
					  yyextra->current->args += tmp;
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1143 "commentscan.l"
{ 
					  yyextra->current->args += yytext;
                                        }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 105:
YY_RULE_SETUP
#line 1147 "commentscan.l"
{
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1150 "commentscan.l"
{
                                          addOutput(yyscanner," , ");
                                        }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1153 "commentscan.l"
{
                                          addOutput(yyscanner,yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1157 "commentscan.l"
{
                                          unput(yytext[0]);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1164 "commentscan.l"
{ // no file name specified
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1169 "commentscan.l"
{ // first argument; name
  					  yyextra->current->name = stripQuotes(yytext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1173 "commentscan.l"
{ yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1176 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 113:
YY_RULE_SETUP
#line 1181 "commentscan.l"
{ // first argument
  					  yyextra->newXRefItemKey=yytext;
                                          setOutput(yyscanner,OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1186 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1190 "commentscan.l"
{ // missing arguments
  					  warn(yyextra->fileName,yyextra->lineNr,
					       "Missing first argument of \\xrefitem"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  yyextra->inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1199 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1202 "commentscan.l"
{ // second argument
  					  yyextra->xrefItemTitle = stripQuotes(yytext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1206 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1210 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "Missing second argument of \\xrefitem"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  yyextra->inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1219 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1222 "commentscan.l"
{ // third argument
  					  yyextra->xrefListTitle = stripQuotes(yytext);
                                          yyextra->xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1227 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1231 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "Missing third argument of \\xrefitem"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  yyextra->inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1240 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 125:
YY_RULE_SETUP
#line 1246 "commentscan.l"
{ // argument
  					  yyextra->current->relates = yytext;
                                          //if (yyextra->current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = yytext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1254 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1258 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "Missing argument of \\relates or \\memberof command"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1266 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1272 "commentscan.l"
{ // end of argument
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1277 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1281 "commentscan.l"
{ // ignore other stuff
  					  addOutput(yyscanner,*yytext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 132:
YY_RULE_SETUP
#line 1287 "commentscan.l"
{ // first argument
  					  yyextra->sectionLabel=yytext;
                                          addOutput(yyscanner,yytext);
					  yyextra->sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1293 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "\\section command has no label"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1301 "commentscan.l"
{ // invalid character for section label
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1307 "commentscan.l"
{ // end of section title
  					  addSection(yyscanner);
                                          addOutput(yyscanner,yytext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 136:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1312 "commentscan.l"
{ // end of section title
  					  addSection(yyscanner);
                                          addOutput(yyscanner,yytext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1317 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1321 "commentscan.l"
{ // any character without special meaning
  					  yyextra->sectionTitle+=yytext;
					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1325 "commentscan.l"
{ // unescape escaped command
  					  yyextra->sectionTitle+=&yytext[1];
					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1329 "commentscan.l"
{ // unescape escaped character
  					  yyextra->sectionTitle+=yytext[1];
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1333 "commentscan.l"
{ // anything else
  					  yyextra->sectionTitle+=yytext;
					  addOutput(yyscanner,*yytext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 142:
YY_RULE_SETUP
#line 1340 "commentscan.l"
{ // first argument
                                          addOutput(yyscanner,yytext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  yyextra->current->extends.push_back(BaseInfo(yytext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1347 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "\\subpage command has no label"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1355 "commentscan.l"
{ // no title, end command
  					  addOutput(yyscanner,yytext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1359 "commentscan.l"
{ // add title, end of command
  					  addOutput(yyscanner,yytext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1363 "commentscan.l"
{ // no title, end of command
  					  unput(*yytext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 147:
YY_RULE_SETUP
#line 1370 "commentscan.l"
{ // found argument
                                          addAnchor(yyscanner,yytext);
					  addOutput(yyscanner,yytext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1375 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "\\anchor command has no label"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1383 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 150:
/* rule 150 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1393 "commentscan.l"
{ // possible ends
  					  addOutput(yyscanner,yytext);
					  if (&yytext[4]==yyextra->blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1400 "commentscan.l"
{
  					  addOutput(yyscanner,yytext);
					  if (yyextra->blockName=="startuml") // found end of the block
					  {
  					    BEGIN(Comment);
					  }
                                        }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1407 "commentscan.l"
{ // some word
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1410 "commentscan.l"
{ // new line
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1414 "commentscan.l"
{ // start of a C-comment
					  if (!(yyextra->blockName=="code" || yyextra->blockName=="verbatim")) yyextra->commentCount++;
  					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1418 "commentscan.l"
{ // end of a C-comment
  					  addOutput(yyscanner,yytext);
					  if (!(yyextra->blockName=="code" || yyextra->blockName=="verbatim"))
                                          {
                                            yyextra->commentCount--;
					    if (yyextra->commentCount<0)
					    {
					      warn(yyextra->fileName,yyextra->lineNr,
					         "found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",yyextra->blockName.data(),yyextra->blockName.data());
					    }
  					  }
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1430 "commentscan.l"
{
  					  addOutput(yyscanner,*yytext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1433 "commentscan.l"
{
                                          QCString endTag = "end"+yyextra->blockName;
                                          if (yyextra->blockName=="startuml") endTag="enduml";
                                          warn(yyextra->fileName,yyextra->lineNr,
	                                    "reached end of comment while inside a \\%s block; check for missing \\%s tag!",
	                                    yyextra->blockName.data(),endTag.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 157:
YY_RULE_SETUP
#line 1445 "commentscan.l"
{
                                          yyextra->guardExpr=yytext;
                                          yyextra->roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1450 "commentscan.l"
{
                                          yyextra->guardExpr+=yytext;
                                        }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1453 "commentscan.l"
{
                                          yyextra->guardExpr+=yytext;
                                          yyextra->roundCount++;
                                        }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1457 "commentscan.l"
{
                                          yyextra->guardExpr+=yytext;
                                          yyextra->roundCount--;
                                          if (yyextra->roundCount==0)
                                          {
                                            handleGuard(yyscanner,yyextra->guardExpr);
                                          }
                                        }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1465 "commentscan.l"
{
					  warn(yyextra->fileName,yyextra->lineNr,
						"invalid expression '%s' for yyextra->guards",yyextra->guardExpr.data());
                                          unput(*yytext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1471 "commentscan.l"
{ // parameter of if/ifnot yyextra->guards
                                          handleGuard(yyscanner,yytext);
  					}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1474 "commentscan.l"
{ // end of argument
  					  if (*yytext=='\n') yyextra->lineNr++;
					  //next line is commented out due to bug620924
					  //addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1480 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1484 "commentscan.l"
{ // ignore other stuff
  					  addOutput(yyscanner,*yytext);
  					}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 1487 "commentscan.l"
{
  					  lineCount(yyscanner);
  					  yyextra->spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1492 "commentscan.l"
{
  					  if (!yyextra->spaceBeforeIf.isEmpty()) // needed for 665313 in combination with bug620924
					  {
					    addOutput(yyscanner,yyextra->spaceBeforeIf);
					  }
  					  yyextra->spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1500 "commentscan.l"
{
  					  unput(*yytext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 169:
/* rule 169 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1507 "commentscan.l"
{
                                          yyextra->guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 170:
/* rule 170 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1511 "commentscan.l"
{
                                          yyextra->guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 171:
/* rule 171 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1515 "commentscan.l"
{
  					  if (yyextra->guards.empty())
					  {
					    warn(yyextra->fileName,yyextra->lineNr,
						"found \\endif without matching start command");
					  }
					  else
					  {
					    GuardedSection s = yyextra->guards.top();
                                            yyextra->guards.pop();
                                            bool parentVisible = s.parentVisible();
                                            if (parentVisible)
                                            {
					      yyextra->enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
                                            }
					  }
  					}
	YY_BREAK
case 172:
/* rule 172 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1533 "commentscan.l"
{
  					  if (yyextra->guards.empty())
					  {
					    warn(yyextra->fileName,yyextra->lineNr,
						"found \\else without matching start command");
					  }
					  else
					  {
					    if (!yyextra->enabledSectionFound && yyextra->guards.top().parentVisible())
					    {
					      yyextra->guards.pop();
					      yyextra->guards.push(GuardedSection(TRUE,TRUE));
					      yyextra->enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 173:
/* rule 173 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1550 "commentscan.l"
{
  					  if (yyextra->guards.empty())
					  {
					    warn(yyextra->fileName,yyextra->lineNr,
						"found \\elseif without matching start command");
					  }
					  else
					  {
					    if (!yyextra->enabledSectionFound && yyextra->guards.top().parentVisible())
					    {
                                              yyextra->guardType=Guard_If;
					      yyextra->guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 1566 "commentscan.l"
{ // skip line
  					  if (*yytext=='\n') yyextra->lineNr++;
					  //addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1570 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1572 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 1578 "commentscan.l"
{ // skip line
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 178:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1582 "commentscan.l"
{
                                          yyextra->condCount++;
  					}
	YY_BREAK
case 179:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1585 "commentscan.l"
{
                                          yyextra->condCount++;
  					}
	YY_BREAK
case 180:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1588 "commentscan.l"
{
                                          yyextra->condCount--;
					  if (yyextra->condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 181:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1596 "commentscan.l"
{
  					  if (yyextra->sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 182:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1603 "commentscan.l"
{
  					  if (yyextra->sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 183:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1610 "commentscan.l"
{
  					  if (yyextra->sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 184:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1617 "commentscan.l"
{
  					  if (yyextra->sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1624 "commentscan.l"
{
					  BEGIN(Comment);
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1627 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1629 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 1635 "commentscan.l"
{ // end of argument
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 1640 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
					  yyextra->docGroup.appendHeader(' ');
  					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1645 "commentscan.l"
{ // ignore other stuff
					  yyextra->docGroup.appendHeader(*yytext);
					  yyextra->current->name+=*yytext;
  					}
	YY_BREAK
/* ----- handle argument of noop command ------- */
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 1651 "commentscan.l"
{ // end of argument
					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1656 "commentscan.l"
{ // ignore other stuff
					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 193:
YY_RULE_SETUP
#line 1660 "commentscan.l"
{ // group id
  					  yyextra->current->groups.push_back(
					     Grouping(yytext, Grouping::GROUPING_INGROUP)
					  );
					  yyextra->inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 1666 "commentscan.l"
{ // missing argument
  					  if (!yyextra->inGroupParamFound)
					  {
  					    warn(yyextra->fileName,yyextra->lineNr,
					        "Missing group name for \\ingroup command"
					        );
					  }
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 1677 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  addOutput(yyscanner,'\n');
  					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1681 "commentscan.l"
{ // ignore other stuff
  					  addOutput(yyscanner,*yytext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 1687 "commentscan.l"
{ // end of argument
  					  if (yyextra->braceCount==0)
					  {
					    if (*yytext=='\n') yyextra->lineNr++;
					    addOutput(yyscanner,'\n');
					    yyextra->langParser->parsePrototype(yyextra->functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 1696 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  yyextra->functionProto+=' ';
  					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1700 "commentscan.l"
{ // non-special characters
                                          yyextra->functionProto+=yytext;
  					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 1703 "commentscan.l"
{
                                          yyextra->functionProto+=yytext;
					  yyextra->braceCount++;
					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1707 "commentscan.l"
{
                                          yyextra->functionProto+=yytext;
					  yyextra->braceCount--;
					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1711 "commentscan.l"
{ // add other stuff
                                          yyextra->functionProto+=*yytext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1719 "commentscan.l"
{ // end of argument
  					  if (*yytext=='\n') yyextra->lineNr++;
					  if (yyextra->functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(yyscanner,getOverloadDocs());
					    addOutput(yyscanner,'\n');
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(yyscanner,Entry::OVERLOADDOC_SEC);
					    yyextra->langParser->parsePrototype(yyextra->functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 1733 "commentscan.l"
{ // line continuation
                                          yyextra->lineNr++; 
					  yyextra->functionProto+=' ';
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1737 "commentscan.l"
{ // add other stuff
                                          yyextra->functionProto+=*yytext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 206:
YY_RULE_SETUP
#line 1743 "commentscan.l"
{ // found argument
					  yyextra->current->extends.push_back(
					    BaseInfo(removeRedundantWhiteSpace(yytext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 1749 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "\\inherit command has no argument"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1757 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 209:
YY_RULE_SETUP
#line 1766 "commentscan.l"
{ // found argument
					  yyextra->current->extends.push_back(
					    BaseInfo(removeRedundantWhiteSpace(yytext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 1772 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "\\extends or \\implements command has no argument"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1780 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 212:
YY_RULE_SETUP
#line 1785 "commentscan.l"
{ /* language switch */
                                     QCString langId = &yytext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1793 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 1795 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*yytext=='\n') yyextra->lineNr++;
                                   }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1798 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 216:
YY_RULE_SETUP
#line 1803 "commentscan.l"
{ // found argument
  					  addCite(yyscanner);
                                          addOutput(yyscanner,yytext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 1808 "commentscan.l"
{ // missing argument
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "\\cite command has no label"
					      );
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1816 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyextra->fileName,yyextra->lineNr,
					      "Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 1825 "commentscan.l"
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 1826 "commentscan.l"
{
  					  if (*yytext=='\n') yyextra->lineNr++;
					  addOutput(yyscanner,'\n');
					  setOutput(yyscanner,OutputDoc);
                                          addOutput(yyscanner," \\copydetails ");
					  addOutput(yyscanner,yyextra->copyDocArg);
					  addOutput(yyscanner,"\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1835 "commentscan.l"
{
  					  yyextra->copyDocArg+=yytext;
					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1839 "commentscan.l"
{
  					  yyextra->copyDocArg+=yytext;
					  addOutput(yyscanner,yytext);
  					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1845 "commentscan.l"
ECHO;
	YY_BREAK
#line 6489 "/Users/Raj/Desktop/Catan-tracker/doxygen-build/generated_src/commentscan.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(CdataSection):
			case YY_STATE_EOF(Noop):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( commentscanYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1209 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1209 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1208);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	commentscanYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void commentscanYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf ,yyscanner );

	commentscanYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	commentscanYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack(yyscanner);

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void commentscanYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentscanYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE commentscanYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int commentscanYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int commentscanYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *commentscanYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *commentscanYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t commentscanYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *commentscanYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void commentscanYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void commentscanYYset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "commentscanYYset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void commentscanYYset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "commentscanYYset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void commentscanYYset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int commentscanYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void commentscanYYset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* commentscanYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int commentscanYYlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) commentscanYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* commentscanYYlex_init_extra has the same functionality as commentscanYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to commentscanYYalloc in
 * the yyextra field.
 */

int commentscanYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    commentscanYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) commentscanYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    commentscanYYset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	commentscanYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        commentscanYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    commentscanYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    commentscanYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1845 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  //printf("handleBrief\n");
  setOutput(yyscanner,OutputBrief);
  return FALSE;
}

static bool handleFn(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::MEMBERDOC_SEC);
  yyextra->functionProto.resize(0);
  yyextra->braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::DEFINEDOC_SEC);
  yyextra->functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::GROUPDOC_SEC);
  yyextra->current->groupDocType = Entry::GROUPDOC_NORMAL;
  setOutput(yyscanner,OutputBrief);
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::GROUPDOC_SEC);
  yyextra->current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::GROUPDOC_SEC);
  yyextra->current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(yyscan_t yyscanner,const QCString &, const QCStringList &)
{ // Obj-C protocol
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(yyscan_t yyscanner,const QCString &, const QCStringList &)
{ // Obj-C category
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::MAINPAGEDOC_SEC);
  yyextra->current->name = "";
  if (!stop) 
  {
    yyextra->current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::FILEDOC_SEC);
  if (!stop) 
  {
    yyextra->current->name = yyextra->fileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleParam(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  // we need process param and retval arguments to escape leading underscores in case of
  // markdown processing, see bug775493
  addOutput(yyscanner,"@param ");
  BEGIN( ParamArg1 );
  return FALSE;
}

static bool handleRetval(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@retval ");
  BEGIN( ParamArg1 );
  return FALSE;
}

static bool handleDir(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::DIRDOC_SEC);
  if (!stop) yyextra->current->name = yyextra->fileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(yyscan_t yyscanner,const QCString &cmd, const QCStringList &optList)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  Entry::Sections section=Entry::EXAMPLE_SEC;
  QCStringList::ConstIterator it;
  for ( it = optList.begin(); it != optList.end(); ++it )
  {
    QCString opt = (*it).stripWhiteSpace().lower();
    if (opt=="lineno")
    {
      section=Entry::EXAMPLE_LINENO_SEC;
    }
    else
    {
      warn(yyextra->fileName,yyextra->lineNr,
  	"unsupported option '%s' for command '\\%s'",qPrint(opt),qPrint(cmd));
    }
  }
  bool stop=makeStructuralIndicator(yyscanner,section);
  if (!stop) yyextra->current->name = yyextra->fileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->inContext!=OutputBrief)
  {
    addOutput(yyscanner,"\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(yyscanner,OutputDoc);
  return FALSE;
}

static bool handleNoop(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  BEGIN( Noop );
  return FALSE;
}

static bool handleName(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    yyextra->docGroup.clearHeader();
    BEGIN( NameParam );
    if (!yyextra->docGroup.isEmpty()) // end of previous member group
    {
      yyextra->docGroup.close(yyextra->current,yyextra->fileName,yyextra->lineNr,TRUE,true);
    }
  }
  return stop;
}

static bool handleTodo(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Todo;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Test;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Bug;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Deprecated;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->insideParBlock)
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found \\parblock command while already in a parblock!");
  }
  if (!yyextra->spaceBeforeCmd.isEmpty()) 
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"@parblock ");
  yyextra->insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->insideParBlock)
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found \\endparblock command without matching \\parblock!");
  }
  addOutput(yyscanner,"@endparblock");
  setOutput(yyscanner,OutputDoc); // to end a parblock inside a xrefitem like context
  yyextra->insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->relates.isEmpty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
  }
  yyextra->current->relatesType = Simple;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->relates.isEmpty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
  }
  yyextra->current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->relates.isEmpty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
  }
  yyextra->current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(yyscan_t yyscanner,const QCString &s, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  setOutput(yyscanner,OutputDoc);
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       yyextra->sectionLevel=1;
  else if (s=="subsection")    yyextra->sectionLevel=2;
  else if (s=="subsubsection") yyextra->sectionLevel=3;
  else if (s=="paragraph")     yyextra->sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(yyscan_t yyscanner,const QCString &s, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->section!=Entry::EMPTY_SEC && 
      yyextra->current->section!=Entry::PAGEDOC_SEC &&
      yyextra->current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!yyextra->spaceBeforeCmd.isEmpty()) 
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(yyscan_t yyscanner,const QCString &s, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(yyscan_t yyscanner,const QCString &s, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->spaceBeforeCmd.isEmpty()) 
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(yyscan_t yyscanner,const QCString &s, const QCStringList &optList)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (optList.isEmpty())
  {
    addOutput(yyscanner,"@"+s+" ");
  }
  else
  {
    addOutput(yyscanner,"@"+s+"{"+optList.join(",")+"} ");
  }
  //printf("handleFormatBlock(%s) with option(%s)\n",s.data(),opt.data());
  yyextra->blockName=s;
  yyextra->commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->enabledSectionFound=FALSE;
  yyextra->guardType = Guard_If;
  yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->enabledSectionFound=FALSE;
  yyextra->guardType = Guard_IfNot;
  yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found \\else without matching start command");
  }
  else
  {
    yyextra->guardType = yyextra->enabledSectionFound ? Guard_Skip : Guard_If;
    yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found \\else without matching start command");
  }
  else
  {
    yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"found \\endif without matching start command");
  }
  else
  {
    yyextra->guards.pop();
  }
  yyextra->enabledSectionFound=FALSE;
  if (!yyextra->spaceBeforeCmd.isEmpty()) 
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallgraph(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callGraph = FALSE; // OFF
  return FALSE;
}

static bool handleCallergraph(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallergraph(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callerGraph = FALSE; // OFF
  return FALSE;
}

static bool handleReferencedByRelation(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencedByRelation = TRUE; // ON
  return FALSE;
}

static bool handleHideReferencedByRelation(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencedByRelation = FALSE; // OFF
  return FALSE;
}

static bool handleReferencesRelation(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencesRelation = TRUE; // ON
  return FALSE;
}

static bool handleHideReferencesRelation(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencesRelation = FALSE; // OFF
  return FALSE;
}

static bool handleInternal(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!Config_getBool(INTERNAL_DOCS))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (yyextra->current->doc.stripWhiteSpace().isEmpty())
    { 
      yyextra->current->doc.resize(0);
    }
    yyextra->condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput(yyscanner," \\internal "); 
    yyextra->inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,'\n');
  return FALSE;
}

static bool handleStatic(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endBrief(yyscanner);
  yyextra->current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endBrief(yyscanner);
  yyextra->current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = yyextra->protection = Private;
  return FALSE;
}

static bool handleProtected(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = yyextra->protection = Protected ;
  return FALSE;
}

static bool handlePublic(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = yyextra->protection = Public;
  return FALSE;
}

static bool handleToc(yyscan_t yyscanner,const QCString &, const QCStringList &optList)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->section==Entry::PAGEDOC_SEC || 
      yyextra->current->section==Entry::MAINPAGEDOC_SEC)
  {
    QCStringList::ConstIterator it;
    for ( it = optList.begin(); it != optList.end(); ++it )
    {
      QCString opt = (*it).stripWhiteSpace().lower();
      char dum;
      int level = 5;
      int i = opt.find(':');
      if (i>0)  // found ':' but not on position 0 what would mean just a level
      {
        if (sscanf(opt.right(opt.length() - i - 1).data(),"%d%c",&level,&dum) != 1)
        {
          warn(yyextra->fileName,yyextra->lineNr,"Unknown option:level specified with \\tableofcontents: '%s'", (*it).stripWhiteSpace().data());
          opt = "";
        }
        else
        {
          level = (level > 5 ? 5 : level);
          level = (level <= 0 ? 5 : level);
          opt = opt.left(i).stripWhiteSpace();
        }
      }
      if (!opt.isEmpty())
      {
        if (opt == "html")
        {
          yyextra->current->localToc.enableHtml(level);
        }
        else if (opt == "latex")
        {
          yyextra->current->localToc.enableLatex(level);
        }
        else if (opt == "xml")
        {
          yyextra->current->localToc.enableXml(level);
        }
        else if (opt == "docbook")
        {
          yyextra->current->localToc.enableDocbook(level);
        }
        else
        {
          warn(yyextra->fileName,yyextra->lineNr,"Unknown option specified with \\tableofcontents: '%s'", (*it).stripWhiteSpace().data());
        }
      }
    }
    if (yyextra->current->localToc.nothingEnabled())
    {
      // for backward compatibility
      yyextra->current->localToc.enableHtml(5);
      yyextra->current->localToc.enableXml(5);
    }
  }
  return FALSE;
}

static bool handleInherit(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->brief.isEmpty() && yyextra->current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(yyscanner,OutputBrief);
  }
  if (!yyextra->spaceBeforeCmd.isEmpty()) 
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  setOutput(yyscanner,OutputDoc);
  if (!yyextra->spaceBeforeCmd.isEmpty()) 
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(yyscan_t yyscanner,const QCString &, const QCStringList &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  setOutput(yyscanner,OutputBrief);
  if (!yyextra->spaceBeforeCmd.isEmpty()) 
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"\\copybrief ");
  yyextra->copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//-----------------------------------------------------------------------------------------

static void initParser(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->sectionLabel.resize(0);
  yyextra->sectionTitle.resize(0);
  yyextra->docGroup.clearHeader();
  yyextra->insideParBlock = FALSE;
}


static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(yyscan_t yyscanner,Entry::Sections s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("yyextra->current->section=%x\n",yyextra->current->section);
  if (getDocSectionName(yyextra->current->section))
  {
    return TRUE;
  }
  else
  {
    yyextra->needNewEntry = TRUE;
    yyextra->current->section = s;
    yyextra->current->fileName = yyextra->fileName;
    yyextra->current->startLine = yyextra->lineNr;
    return FALSE;
  }
}

//-----------------------------------------------------------------

static void lineCount(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  for( const char* c = yytext ; *c ; ++c )
    yyextra->lineNr += (*c == '\n') ;
}

//-----------------------------------------------------------------

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(yyscan_t yyscanner,
                        const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  RefList *refList = RefListManager::instance().add(listName,listTitle,itemTitle);
  RefItem *item = 0;
  for (RefItem *i : yyextra->current->sli)
  {
    if (i && qstrcmp(i->list()->listName(),listName)==0) 
    {
      //printf("found %s lii->type=%s\n",listName,lii->type);
      item = i;
      break;
    }
  }
  if (item && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    item->setText(item->text() + " <p>" + yyextra->outputXRef);
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    //printf("listName=%s item id = %d new yyextra->current=%p\n",listName,itemId,yyextra->current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    item = refList->add();
    QCString anchorLabel;
    anchorLabel.sprintf("_%s%06d",listName,item->id());
    item->setText(yyextra->outputXRef);
    item->setAnchor(anchorLabel);
    yyextra->current->sli.push_back(item);
    QCString cmdString;
    cmdString.sprintf(" \\xrefitem %s %d.",listName,item->id());
    if (yyextra->inBody)
    {
      yyextra->current->inbodyDocs += cmdString;
    }
    else
    {
      yyextra->current->doc += cmdString;
    }

    SectionManager &sm = SectionManager::instance();
    const SectionInfo *si = sm.find(anchorLabel);
    if (si)
    {
      if (si->lineNr() != -1)
      {
        warn(listName,yyextra->lineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",anchorLabel.data(),si->fileName().data(),si->lineNr());
      }
      else
      {
        warn(listName,yyextra->lineNr,"multiple use of section label '%s', (first occurrence: %s)",anchorLabel.data(),si->fileName().data());
      }
    }
    else
    {
      si = sm.add(anchorLabel,listName,yyextra->lineNr,
                   yyextra->sectionTitle,SectionType::Anchor,
                   yyextra->sectionLevel);
      yyextra->current->anchors.push_back(si);
    }
  }
  yyextra->outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString formLabel;
  QCString fText=yyextra->formulaText.simplifyWhiteSpace();
  int id = FormulaManager::instance().addFormula(fText);
  formLabel.sprintf("\\_form#%d",id);
  for (int i=0;i<yyextra->formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionType)level;
  return SectionType::Anchor;
}

static void addSection(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  SectionManager &sm = SectionManager::instance();
  const SectionInfo *si = sm.find(yyextra->sectionLabel);
  if (si)
  {
    if (si->lineNr() != -1)
    {
      warn(yyextra->fileName,yyextra->lineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",yyextra->sectionLabel.data(),si->fileName().data(),si->lineNr());
    }
    else
    {
      warn(yyextra->fileName,yyextra->lineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s)",yyextra->sectionLabel.data(),si->fileName().data());
    }
  }
  else
  {
    // create a new section element
    yyextra->sectionTitle+=yytext;
    yyextra->sectionTitle=yyextra->sectionTitle.stripWhiteSpace();
    si = sm.add(yyextra->sectionLabel,yyextra->fileName,yyextra->lineNr,
                yyextra->sectionTitle,sectionLevelToType(yyextra->sectionLevel),
                yyextra->sectionLevel);

    // add section to this entry
    yyextra->current->anchors.push_back(si);
  }
}

//-----------------------------------------------------------------------------

static void addCite(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString name=yytext;
  if (yytext[0] =='"')
  {
    name=yytext+1;
    name=name.left(yyleng-2);
  }
  CitationManager::instance().insert(name.data());
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(yyscan_t yyscanner,OutputContext ctx)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool xrefAppendToPrev = yyextra->xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  yyextra->xrefAppendFlag = !yyextra->inBody &&
                   yyextra->inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   yyextra->newXRefKind==yyextra->xrefKind &&                    // of the same kind
                   (yyextra->xrefKind!=XRef_Item || 
		    yyextra->newXRefItemKey==yyextra->xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 yyextra->inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 yyextra->newXRefKind==yyextra->xrefKind,
  //                 yyextra->xrefKind!=XRef_Item,
  //                 yyextra->newXRefItemKey==yyextra->xrefItemKey);
  //printf("refKind=%d yyextra->newXRefKind=%d xrefAppendToPrev=%d yyextra->xrefAppendFlag=%d\n",
  //   	  yyextra->xrefKind,yyextra->newXRefKind,xrefAppendToPrev,yyextra->xrefAppendFlag);

  //printf("setOutput(yyscanner,yyextra->inContext=%d ctx=%d)\n",yyextra->inContext,ctx);
  if (yyextra->inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(yyextra->xrefKind)
    {
      case XRef_Todo:
        addXRefItem(yyscanner,"todo",
            theTranslator->trTodo(),
            theTranslator->trTodoList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Test:
        addXRefItem(yyscanner,"test",
            theTranslator->trTest(),
            theTranslator->trTestList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Bug:
        addXRefItem(yyscanner,"bug",
            theTranslator->trBug(),
            theTranslator->trBugList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Deprecated:
        addXRefItem(yyscanner,"deprecated",
            theTranslator->trDeprecated(),
            theTranslator->trDeprecatedList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Item:  // user defined list
        addXRefItem(yyscanner,yyextra->xrefItemKey,
            yyextra->xrefItemTitle,
            yyextra->xrefListTitle,
            xrefAppendToPrev
            );
        break;
      case XRef_None:
        ASSERT(0);
        break;
    }
  }
  yyextra->xrefItemKey = yyextra->newXRefItemKey;

  int oldContext = yyextra->inContext;
  yyextra->inContext = ctx;
  if (yyextra->inContext!=OutputXRef && yyextra->inBody) yyextra->inContext=OutputInbody;
  switch(yyextra->inContext)
  {
    case OutputDoc:
      if (oldContext!=yyextra->inContext)
      {
        stripTrailingWhiteSpace(yyextra->current->doc);
        if (yyextra->current->docFile.isEmpty())
        {
          yyextra->current->docFile = yyextra->fileName;
          yyextra->current->docLine = yyextra->lineNr;
        }
      }
      yyextra->pOutputString = &yyextra->current->doc;
      break;
    case OutputBrief:
      if (oldContext!=yyextra->inContext)
      {
        if (yyextra->current->briefFile.isEmpty())
        {
          yyextra->current->briefFile = yyextra->fileName;
          yyextra->current->briefLine = yyextra->lineNr;
        }
      }
      if (yyextra->current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
        // description even if multiple
        // are given...
      {
        yyextra->pOutputString = &yyextra->current->brief;
      }
      else
      {
        if (!yyextra->current->doc.isEmpty()) // when appending parts add a new line
        {
          yyextra->current->doc += "\n";
        }
        yyextra->pOutputString = &yyextra->current->doc;
        yyextra->inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      yyextra->pOutputString = &yyextra->outputXRef;
      // first item found, so can't append to previous
      //yyextra->xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      yyextra->pOutputString = &yyextra->current->inbodyDocs;
      break;
  }
}


static void addAnchor(yyscan_t yyscanner,const char *anchor)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  SectionManager &sm = SectionManager::instance();
  const SectionInfo *si = sm.find(anchor);
  if (si)
  {
    if (si->lineNr() != -1)
    {
      warn(yyextra->fileName,yyextra->lineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)",anchor,si->fileName().data(),si->lineNr());
    }
    else
    {
      warn(yyextra->fileName,yyextra->lineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s)",anchor,si->fileName().data());
    }
  }
  else
  {
    si = sm.add(anchor,yyextra->fileName,yyextra->lineNr,nullptr,SectionType::Anchor,0);
    yyextra->current->anchors.push_back(si);
  }
}

// add a string to the output
static inline void addOutput(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("addOutput(yyscanner,%s)\n",s);
  *yyextra->pOutputString+=s;
}

// add a character to the output
static inline void addOutput(yyscan_t yyscanner,char c)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  *yyextra->pOutputString+=c;
}

static void endBrief(yyscan_t yyscanner,bool addToOutput)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    yyextra->briefEndsAtDot=FALSE;
    setOutput(yyscanner,OutputDoc);
    if (addToOutput) addOutput(yyscanner,yytext);
  }
}

static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
    yyextra->prevPosition=yyextra->inputPosition;
    int c=0;
    while( c < max_size && yyextra->inputString[yyextra->inputPosition] )
    {
	*buf = yyextra->inputString[yyextra->inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

//----------------------------------------------------------------------------

static void checkFormula(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyextra->fileName,yyextra->lineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

struct CommentScanner::Private
{
  yyscan_t yyscanner;
  commentscanYY_state extra;
};

CommentScanner::CommentScanner() : p(std::make_unique<Private>())
{
  commentscanYYlex_init_extra(&p->extra,&p->yyscanner);
#ifdef FLEX_DEBUG
  commentscanYYset_debug(1,p->yyscanner);
#endif
}

CommentScanner::~CommentScanner()
{
  commentscanYYlex_destroy(p->yyscanner);
}

bool CommentScanner::parseCommentBlock(/* in */     OutlineParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  yyscan_t yyscanner = p->yyscanner;
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser(yyscanner);
  yyextra->guards = std::stack<GuardedSection>();
  yyextra->langParser     = parser;
  yyextra->current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  yyextra->inputString    = comment;
  yyextra->inputString.append(" ");
  yyextra->inputPosition  = position;
  yyextra->lineNr       = lineNr;
  yyextra->fileName     = fileName;
  yyextra->protection     = prot;
  yyextra->needNewEntry   = FALSE;
  yyextra->xrefKind       = XRef_None;
  yyextra->xrefAppendFlag = FALSE;
  yyextra->insidePre      = FALSE;
  yyextra->parseMore      = FALSE;
  yyextra->inBody         = isInbody;
  yyextra->outputXRef.resize(0);
  if (!isBrief && !isAutoBriefOn && !yyextra->current->doc.isEmpty())
  { // add newline separator between detailed comment blocks
    yyextra->current->doc += '\n';
  }
  setOutput(yyscanner, isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  yyextra->briefEndsAtDot = isAutoBriefOn;
  yyextra->condCount    = 0;
  yyextra->sectionLevel = 0;
  yyextra->spaceBeforeCmd.resize(0);
  yyextra->spaceBeforeIf.resize(0);

  printlex(yy_flex_debug, TRUE, __FILE__, fileName ? fileName.data(): NULL);
  if (!yyextra->current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    yyextra->current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",qPrint(fileName),lineNr,qPrint(yyextra->inputString)
              );
  
  commentscanYYrestart( 0, yyscanner );
  BEGIN( Comment );
  commentscanYYlex(yyscanner);
  setOutput(yyscanner, OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(yyscanner,getOverloadDocs());
  }

  if (!yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (yyextra->insideParBlock)
  {
    warn(yyextra->fileName,yyextra->lineNr,
	"Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  yyextra->current->doc=stripLeadingAndTrailingEmptyLines(yyextra->current->doc,yyextra->current->docLine);

  if (yyextra->current->section==Entry::FILEDOC_SEC && yyextra->current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    yyextra->current->doc="\n\n";
  }

  if (yyextra->current->section==Entry::MEMBERGRP_SEC &&
      yyextra->docGroup.isEmpty()) // @name section but no group started yet
  {
    yyextra->docGroup.open(yyextra->current,yyextra->fileName,yyextra->lineNr,true);
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\noutput=[\n"
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n]\n===========\n",
               qPrint(fileName),lineNr,
	       yyextra->current->briefLine,qPrint(yyextra->current->brief),
               yyextra->current->docLine,qPrint(yyextra->current->doc),
               yyextra->current->inbodyLine,qPrint(yyextra->current->inbodyDocs)
              );
  
  checkFormula(yyscanner);
  prot = yyextra->protection;
  
  yyextra->docGroup.addDocs(curEntry);

  newEntryNeeded = yyextra->needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (yyextra->parseMore && position==yyextra->inputPosition) yyextra->parseMore=FALSE;

  if (yyextra->parseMore) position=yyextra->inputPosition; else position=0;

  lineNr = yyextra->lineNr;
  //printf("position=%d yyextra->parseMore=%d newEntryNeeded=%d\n",
  //  position,yyextra->parseMore,newEntryNeeded);

  printlex(yy_flex_debug, FALSE, __FILE__, fileName ? fileName.data(): NULL);
  return yyextra->parseMore;
}

static void handleGuard(yyscan_t yyscanner,const QCString &expr)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  CondParser prs;
  bool sectionEnabled=prs.parse(yyextra->fileName,yyextra->lineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!yyextra->guards.empty()) parentEnabled = yyextra->guards.top().isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && yyextra->guardType==Guard_If) ||  
        (!sectionEnabled && yyextra->guardType==Guard_IfNot)
       ) // section is visible
    {
      yyextra->guards.push(GuardedSection(TRUE,TRUE));
      yyextra->enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (yyextra->guardType!=Guard_Skip)
      {
        yyextra->guards.push(GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    yyextra->guards.push(GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}

void CommentScanner::initGroupInfo(Entry *entry)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.initGroupInfo(entry);
}

void CommentScanner::enterFile(const char *fileName,int lineNr)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.enterFile(fileName,lineNr);
}

void CommentScanner::leaveFile(const char *fileName,int lineNr)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.leaveFile(fileName,lineNr);
}

void CommentScanner::enterCompound(const char *fileName,int lineNr,const char *name)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.enterCompound(fileName,lineNr,name);
}

void CommentScanner::leaveCompound(const char *fileName,int lineNr,const char *name)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.leaveCompound(fileName,lineNr,name);
}

void CommentScanner::open(Entry *e,const char *fileName,int lineNr,bool implicit)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.open(e,fileName,lineNr,implicit);
}

void CommentScanner::close(Entry *e,const char *fileName,int lineNr,bool foundInline,bool implicit)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.close(e,fileName,lineNr,foundInline,implicit);
}

#include "commentscan.l.h"

