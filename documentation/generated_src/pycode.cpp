#line 2 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pycode.cpp"
#line 27 "pycode.l"
#include <stdint.h>



#line 8 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pycode.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pycodeYY_create_buffer
#define yy_delete_buffer pycodeYY_delete_buffer
#define yy_flex_debug pycodeYY_flex_debug
#define yy_init_buffer pycodeYY_init_buffer
#define yy_flush_buffer pycodeYY_flush_buffer
#define yy_load_buffer_state pycodeYY_load_buffer_state
#define yy_switch_to_buffer pycodeYY_switch_to_buffer
#define yyin pycodeYYin
#define yyleng pycodeYYleng
#define yylex pycodeYYlex
#define yylineno pycodeYYlineno
#define yyout pycodeYYout
#define yyrestart pycodeYYrestart
#define yytext pycodeYYtext
#define yywrap pycodeYYwrap
#define yyalloc pycodeYYalloc
#define yyrealloc pycodeYYrealloc
#define yyfree pycodeYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pycodeYYrestart(pycodeYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pycodeYYleng;

extern FILE *pycodeYYin, *pycodeYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pycodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pycodeYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pycodeYYrestart()), so that the user can continue scanning by
	 * just pointing pycodeYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pycodeYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pycodeYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pycodeYYwrap()'s to do buffer switches
 * instead of setting up a fresh pycodeYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pycodeYYrestart (FILE *input_file  );
void pycodeYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pycodeYY_create_buffer (FILE *file,int size  );
void pycodeYY_delete_buffer (YY_BUFFER_STATE b  );
void pycodeYY_flush_buffer (YY_BUFFER_STATE b  );
void pycodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pycodeYYpop_buffer_state (void );

static void pycodeYYensure_buffer_stack (void );
static void pycodeYY_load_buffer_state (void );
static void pycodeYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pycodeYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pycodeYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pycodeYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pycodeYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pycodeYYalloc (yy_size_t  );
void *pycodeYYrealloc (void *,yy_size_t  );
void pycodeYYfree (void *  );

#define yy_new_buffer pycodeYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pycodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pycodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pycodeYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pycodeYYin = (FILE *) 0, *pycodeYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pycodeYYlineno;

int pycodeYYlineno = 1;

extern char *pycodeYYtext;
#define yytext_ptr pycodeYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pycodeYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pycodeYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 72
#define YY_END_OF_BUFFER 73
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1083] =
    {   0,
    16423,16423,   64,   64,   73,   71,   72,   70,   71,   72,
       69,   72,   63,   71,   72,   68,   71,   72,   62,   71,
       72,   71,   72,   71,   72,   71,   72,   42,   69,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,

       71,   72,   27,   41,   71,   72,   27,   41,   71,   72,
       27,   41,   71,   72,   27,   41,   71,   72,   27,   41,
       71,   72,   27,   41,   71,   72,   70,   71,   72,   17,
       71,   72,   16,   71,   72,   16,   71,   72,   16,   71,
       72,   16,   71,   72,   19,   71,   72,   18,   70,   71,
       72,   21,   69,   72,   19,   63,   71,   72,   19,   68,
       71,   72,   19,   62,   71,   72,   20,   71,   72,   18,
       19,   71,   72,   22,   71,   72,   19,   71,   72,   19,
       71,   72,   19,   71,   72,   19,   71,   72,   12,   71,
       72,   12,   71,   72,   12,   71,   72,   12,   71,   72,

       13,   70,   71,   72,   13,   71,   72,   15,   71,   72,
       14,   71,   72,   14,   71,   72,   14,   71,   72,   14,
       71,   72,   40,   69,   72,   27,   71,   72,   27,   71,
       72,   27,   71,   72,   27,   71,   72,   27,   71,   72,
       27,   71,   72,   27,   71,   72,   27,   71,   72,   27,
       71,   72,   27,   71,   72,   27,   71,   72,   27,   71,
       72,   27,   71,   72,   27,   71,   72,   27,   71,   72,
       27,   71,   72,   27,   71,   72,   27,   71,   72,   27,
       71,   72,   27,   71,   72,   27,   71,   72,   27,   71,
       72,   27,   71,   72,   27,   71,   72,   36,   70,   71,

       72,   35,   69,   72,   28,   70,   71,   72,   34,   69,
       72,   68,   71,   72,   32,   71,   72,   32,   71,   72,
       32,   71,   72,   32,   71,   72,   32,   71,   72,   32,
       71,   72,   32,   71,   72,   32,   71,   72,   32,   71,
       72,   32,   71,   72,   32,   71,   72,   32,   71,   72,
       32,   71,   72,   32,   71,   72,   32,   71,   72,   32,
       71,   72,   32,   71,   72,   32,   71,   72,   32,   71,
       72,   32,   71,   72,   32,   71,   72,   32,   71,   72,
       70,   71,   72,16421,   38,   69,   72, 8231,   71,   72,
     8231,   68,   71,   72, 8231,   71,   72, 8231,   71,   72,

     8231,   71,   72,   47,   48,   71,   72,   47,   48,   70,
       71,   72,   48,   63,   71,   72,   47,   48,   68,   71,
       72,   46,   48,   62,   71,   72,   47,   48,   71,   72,
       47,   48,   71,   72,   48,   71,   72,   47,   48,   71,
       72,   53,   54,   71,   72,   53,   54,   70,   71,   72,
       52,   54,   63,   71,   72,   53,   54,   68,   71,   72,
       54,   62,   71,   72,   53,   54,   71,   72,   53,   54,
       71,   72,   54,   71,   72,   53,   54,   71,   72,   57,
       59,   71,   72,   57,   59,   70,   71,   72,   57,   58,
       69,   72,   57,   59,   63,   71,   72,   57,   59,   68,

       71,   72,   57,   59,   62,   71,   72,   57,   59,   71,
       72,   57,   59,   71,   72,   59,   71,   72,   57,   59,
       71,   72,   64,   71,   72,   64,   70,   71,   72,   66,
       69,   72,   63,   64,   71,   72,   64,   68,   71,   72,
       62,   64,   71,   72,   64,   71,   72,   64,   71,   72,
       64,   71,   72,   70,   68,   67,   68,   63,   62,   25,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   23,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   24,   27,   41,   27,   41,

       24,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   70,   17,   16,   16,   19,
       18,   70,   19,   19,   68,   19,   67,   68,   19,   19,
       19,   63,   19,   62,   19,   12,   12,   13,   70,   14,
       14,   27,   27,   27,   27,   27,   27,   23,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   24,
       27,   27,   24,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   36,   70,   35,   28,   70,
       33,   67,   68,   32,   32,   32,   32,   32,   30,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       31,   32,   32,   31,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   70,16421,   38, 8229,   47,
       47,   70,   47,   68,   47,   67,   68,   63,   47,   44,
       44,   43,   53,   53,   70,   53,   68,   53,   67,   68,
       62,   53,   50,   50,   49,   57,   57,   70,   57,   57,
       68,   57,   67,   68,   68,   57,   57,   64,   64,   70,
       65,   64,   64,   68,   64,   67,   68,   64,   63,   64,
       62,   64,   64,   61,   67,   68,   60,   26,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,

       27,   41,   27,   41,   23,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   19,
       61,   19,   67,   68,   19,   60,   14,   27,   27,   27,
       27,   27,   27,   27,   27,   23,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   32,   32,   32,   32,   32,   32,   30,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   45,   61,   47,   67,

       68,   53,   67,   68,   51,   60,   55,   61,   57,   67,
       68,   67,   68,   56,   60,   61,   64,   64,   67,   68,
       60,   64,   26,   27,   41,    3,   27,   41,   23,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,    1,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,   41,   27,   41,   27,   41,   27,   41,
       27,   41,   27,    3,   27,   23,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   29,   31,   32,   32,   32,   32,   32,   32,

       27,   41,   23,   27,   41,   11,   26,16392,16394,   27,
       41,   27,   41,   27,   41,   27,   41,   27,   41,   27,
       41,   27,   41,   27,   23,   27,   27,   27,   27,   27,
       27,   27,   27,   32,   32,   32,   32,   32,   32,   32,
       32,    2,    9,   25,   11,   26,16392,16394,   27,   41,
       27,   41,    7,   26,16388,16390,   27,   27,   32,   32,
     8202,   26,   27,   41,    5,   25,    7,   26,16388,16390,
       27,   32, 8200,   25, 8202,   26, 8198,   26, 8196,   25,
     8198,   26
    } ;

static yyconst flex_int16_t yy_accept[565] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    8,   11,   13,   16,   19,   22,
       24,   26,   28,   31,   35,   39,   43,   47,   51,   55,
       59,   63,   67,   71,   75,   79,   83,   87,   91,   95,
       99,  103,  107,  111,  115,  119,  123,  127,  130,  133,
      136,  139,  142,  145,  148,  152,  155,  159,  163,  167,
      170,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  205,  208,  211,  214,  217,  220,  223,  226,  229,

      232,  235,  238,  241,  244,  247,  250,  253,  256,  259,
      262,  265,  268,  271,  274,  277,  280,  283,  286,  289,
      292,  295,  298,  302,  305,  309,  312,  315,  318,  321,
      324,  327,  330,  333,  336,  339,  342,  345,  348,  351,
      354,  357,  360,  363,  366,  369,  372,  375,  378,  381,
      385,  388,  391,  395,  398,  401,  404,  408,  413,  417,
      422,  427,  431,  435,  438,  442,  446,  451,  456,  461,
      465,  469,  473,  476,  480,  484,  489,  493,  498,  503,
      508,  512,  516,  519,  523,  526,  530,  533,  537,  541,
      545,  548,  551,  554,  555,  555,  556,  558,  558,  559,

      560,  560,  561,  561,  563,  565,  567,  569,  571,  573,
      576,  578,  580,  582,  584,  586,  588,  590,  592,  594,
      596,  599,  601,  604,  606,  608,  610,  612,  614,  616,
      618,  620,  622,  624,  626,  627,  628,  629,  630,  631,
      633,  634,  636,  639,  640,  641,  643,  645,  646,  647,
      648,  650,  650,  651,  652,  653,  654,  655,  656,  657,
      658,  660,  661,  662,  663,  664,  665,  666,  667,  668,
      669,  670,  672,  673,  675,  676,  677,  678,  679,  680,
      681,  682,  683,  684,  685,  686,  688,  689,  691,  694,
      695,  696,  697,  698,  699,  701,  702,  703,  704,  705,

      706,  707,  708,  709,  710,  711,  713,  714,  716,  717,
      718,  719,  720,  721,  722,  723,  724,  725,  726,  728,
      729,  730,  731,  733,  733,  735,  738,  739,  740,  741,
      742,  743,  744,  746,  748,  751,  751,  752,  753,  754,
      755,  756,  757,  757,  759,  760,  762,  765,  766,  767,
      768,  769,  771,  771,  772,  773,  775,  778,  779,  781,
      783,  784,  785,  787,  788,  789,  791,  793,  795,  797,
      799,  801,  803,  805,  808,  810,  812,  814,  816,  818,
      820,  822,  824,  826,  828,  830,  832,  834,  836,  838,
      840,  842,  845,  847,  848,  849,  850,  851,  852,  853,

      854,  855,  856,  858,  859,  860,  861,  862,  863,  864,
      865,  866,  867,  868,  869,  870,  871,  872,  873,  874,
      875,  876,  877,  878,  879,  880,  882,  883,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      896,  897,  899,  902,  902,  905,  907,  907,  909,  912,
      914,  916,  918,  921,  923,  924,  926,  929,  932,  934,
      936,  938,  938,  940,  941,  943,  945,  947,  949,  951,
      953,  955,  957,  959,  961,  963,  964,  966,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  989,

      990,  991,  992,  993,  996,  997,  998,  999, 1000, 1001,
     1003, 1006, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024,
     1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045,
     1045, 1049, 1051, 1053, 1057, 1058, 1059, 1060, 1061, 1063,
     1065, 1067, 1067, 1071, 1072, 1073, 1075, 1075, 1077, 1079,
     1081, 1081, 1083, 1083
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    4,    7,    8,
        9,    4,    4,   10,    4,   11,    4,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,    4,
        4,    4,    1,    1,   14,   14,   14,   14,   14,   15,
       14,   14,   14,   14,   14,   14,   14,   16,   14,   14,
       14,   17,   14,   18,   19,   14,   14,   14,   14,   14,
        4,   20,    4,    1,   21,    4,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   14,   31,   32,   33,   34,
       35,   36,   14,   37,   38,   39,   40,   14,   41,   42,
       43,   14,    4,    4,    4,    4,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    2,    3,    4,    5,    4,    5,    6,    2,    4,
        7,    8,    2,    9,    9,    9,    9,    9,    9,   10,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[608] =
    {   0,
        0,   39,   79,    0,  122,    0,  165,    0,  208,    0,
      251,    0,  294,    0,    6,    8,  337,    0,  380,  420,
        0,    0,    0,    0,  459,  498,  537,  576,  615,  654,
      693,  732, 1829, 1830, 1826, 1830, 1822, 1820, 1818,    7,
       11,   15, 1830,   13,   25,   15,   46,   23,  387,   27,
      382,  380,   51,  398,  399,  400,  420,   56,  433,  405,
      437,  462,  392,  435,  475,  479,   19,   61, 1830,    0,
        8,  490,  509,    0, 1822, 1830, 1818,  523, 1815, 1830,
        0, 1830,  772,  792,   38,  418,    0,   61,  516,  543,
     1819, 1830, 1830, 1809,  445,  554,  587, 1830,   62,  502,

      541,  559,  483,  592,  576,  526,  604,  547,  622,  632,
      594,  655,  564,  630,  600,  664,  620,  642,  640,  706,
      577,  511,   69, 1830, 1817, 1830, 1812,    0, 1795,  444,
     1779,  685,    5, 1778,  370, 1788,  439,  646, 1781,  670,
     1790, 1776, 1773,  508,  702, 1772,  724,  539, 1778,  587,
     1830, 1830, 1801,  470,  737,  743,    0, 1777, 1754,  720,
     1742,  640,  748,  676,  751,    0, 1737, 1724,  784, 1712,
      680,  800,  703,  801, 1689,  394, 1671, 1664,  808, 1655,
      814,  815,  713,  819,    0, 1658,   23, 1635, 1627, 1624,
      714,  824,  837, 1621, 1599,    0,    0, 1594, 1595, 1584,

      740, 1830,    0,  751,  755,  819,  832,  840,  756,  838,
      847,  849,  851,  855,  856,  857,  867,  869,  880,  881,
      882,  887,  888,  889,  894,  896,  900,  901,  902,  906,
      910,  916,  917,  918,  744, 1830,    0,  779,    0, 1582,
     1576,  934,  946, 1573,  818, 1560, 1494,    0,    0,  930,
     1498,    0, 1488,  953,  941,  954,  955,  959,  964,  965,
      966,  970,  971,  972,  976,  977,  984,  983,  989,  990,
      994, 1002, 1003, 1008, 1010, 1012, 1016, 1020, 1022, 1024,
     1026, 1030, 1034, 1036, 1045,  768, 1830, 1494,    0,    0,
     1462, 1452, 1041, 1466, 1451, 1457, 1449, 1424, 1422,  455,

     1418, 1396, 1372, 1368, 1367,    0, 1362,    0, 1363, 1344,
     1343, 1347, 1346, 1336, 1323, 1318, 1296, 1302,  792, 1830,
     1830,    0, 1320, 1315, 1050, 1054, 1259, 1055, 1830,  798,
     1830,    0, 1261, 1060, 1061, 1255, 1241, 1071, 1830,  807,
     1830, 1222, 1079,  599, 1226, 1080, 1085, 1223, 1211, 1084,
        0, 1207,  496, 1830, 1200,    0,    0, 1188, 1180, 1171,
     1072, 1830,    0, 1830, 1061, 1085, 1086, 1087, 1091, 1098,
     1099, 1100, 1107, 1114, 1113, 1118, 1119, 1120, 1124, 1125,
     1130, 1139, 1141, 1143, 1145, 1147, 1153, 1152, 1159, 1158,
        0, 1173,    0, 1163, 1160, 1165, 1181, 1185, 1186, 1191,

     1192, 1193, 1204, 1206, 1202, 1208, 1213, 1212, 1214, 1219,
     1228, 1230, 1232, 1236, 1238, 1242, 1244, 1248, 1249, 1134,
     1133, 1117, 1117, 1096, 1080,    0, 1087, 1077, 1075, 1027,
     1007, 1013,  987,  989,  930,  927,  919,  911,  918,  916,
      908, 1830, 1260,  867, 1265, 1830,  881, 1830, 1268,  936,
     1830,    0,    0,    0, 1250, 1271, 1275, 1276, 1281, 1282,
     1283,    0, 1287,  930, 1288, 1293, 1292, 1294, 1298, 1299,
     1300, 1304, 1308, 1319, 1321, 1325, 1326, 1331, 1332, 1336,
     1341, 1342, 1346, 1348, 1352, 1347, 1353, 1354, 1360, 1362,
     1377, 1379, 1381,  894,  882,  872,  841,  820,  797,  784,

      753,  720,  711,    0,  693,  689,  647,  654,  645, 1383,
     1393, 1389, 1399, 1400, 1404, 1405, 1406, 1410, 1412,    0,
     1416, 1417, 1418, 1423, 1427, 1432, 1433, 1439, 1440,  619,
      615,  605,  591,  530,  512,  525,  494,  509, 1830,    0,
     1445, 1446, 1452, 1457, 1458, 1459,  466,  446, 1465, 1467,
     1830,    0, 1469, 1471,  437, 1830,    0, 1473, 1477, 1830,
        0, 1479, 1830, 1502, 1512, 1522, 1532, 1542, 1552, 1562,
     1567, 1569, 1578, 1588, 1598, 1601, 1604, 1608, 1610, 1618,
     1628, 1637, 1647, 1657, 1666, 1676, 1686, 1696, 1706, 1716,
     1726,  429, 1736,  424, 1746, 1756, 1766, 1776, 1781,  392,

     1785,  380,  375, 1789, 1793,   65, 1797
    } ;

static yyconst flex_int16_t yy_def[608] =
    {   0,
      564,  564,  563,    3,  563,    5,  563,    7,  563,    9,
      563,   11,  563,   13,    2,    2,  563,   17,  565,  565,
        2,    2,    2,    2,  566,  566,  567,  567,  568,  568,
      569,  569,  563,  563,  563,  563,  563,  570,  563,  563,
      563,  563,  563,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  563,  563,  572,
      572,  572,  572,  573,  563,  563,  573,  574,  573,  563,
      573,  563,  575,  575,   84,   84,  576,  576,  576,  576,
      563,  563,  563,  577,  577,  577,  577,  563,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  563,  563,  563,  563,  570,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  580,
      563,  563,  570,  563,  563,  563,  581,  581,  563,  582,
      563,  581,  581,  583,  581,  584,  584,  563,  585,  563,
      584,  584,  586,  584,  587,  587,  587,  563,  588,  563,
      587,  587,  587,  587,  589,  589,  563,  589,  590,  589,
      589,  589,  589,  563,  563,  570,  591,  563,  563,  563,

      563,  563,  592,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  563,  563,  572,  572,  573,  563,
      573,  574,  593,  573,   84,  573,  573,   84,  576,  576,
      563,  594,  577,  577,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  563,  563,  563,  591,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  580,  563,
      563,  581,  581,  563,  582,  595,  563,  581,  563,  563,
      563,  584,  584,  585,  596,  563,  563,  584,  563,  563,
      563,  587,  587,  587,  563,  588,  597,  588,  563,  587,
      589,  589,  563,  563,  589,  590,  598,  589,  589,  589,
      589,  563,  591,  563,  599,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      573,  593,  573,  577,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  563,  595,  563,  596,  563,  563,  563,  597,  597,
      563,  589,  598,  589,  599,  571,  571,  571,  571,  571,
      571,  600,  571,  563,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  571,
      571,  601,  571,  571,  571,  571,  571,  571,  571,  602,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  579,
      579,  579,  579,  579,  579,  579,  579,  563,  563,  603,
      601,  571,  571,  604,  578,  578,  579,  579,  605,  571,
      563,  606,  604,  578,  579,  563,  603,  605,  607,  563,
      606,  607,    0,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563
    } ;

static yyconst flex_int16_t yy_nxt[1874] =
    {   0,
      563,   35,   36,  563,   37,   38,   39,  123,  124,  123,
      124,  199,  199,  200,  200,  199,   40,  200,   41,  199,
      202,  200,  202,  203,  353,  203,  202,  201,  354,  203,
      202,  201,  202,  203,  202,  203,   40,  203,  294,   42,
       35,   36,  295,   37,   38,   39,  205,  201,  234,  206,
      199,  201,  200,  202,  248,   40,  203,   41,  202,  207,
      209,  203,  235,  202,  210,  199,  203,  200,  236,  202,
      286,  287,  203,  559,  248,   40,  214,  224,   42,   34,
       35,   43,   34,   37,   38,   39,   34,   34,   34,   34,
       34,   34,   44,   45,   46,   47,   48,   49,   34,   44,

       50,   51,   52,   53,   54,   55,   56,   44,   57,   44,
       58,   44,   59,   60,   61,   62,   63,   64,   65,   66,
       44,   67,   34,   68,   36,   34,   37,   38,   39,   69,
       34,   34,   34,   34,   34,   70,   70,   70,   71,   70,
       72,   34,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   71,   70,
       70,   73,   70,   70,   70,   74,   75,   76,   74,   77,
       78,   79,   34,   80,   81,   74,   74,   82,   83,   83,
       83,   84,   83,   85,   74,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   84,   83,   83,   86,   83,   83,   83,   34,   35,
       36,   34,   37,   38,   39,   34,   34,   34,   34,   34,
       34,   87,   87,   87,   88,   87,   89,   34,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   88,   87,   87,   90,   87,   87,
       87,   34,   91,   36,   34,   37,   38,   39,   92,   92,
       92,   34,   34,   93,   94,   94,   94,   95,   94,   96,
       34,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   95,   94,   94,
       97,   94,   94,   94,   34,   35,   98,   34,   37,   38,

       39,   34,   34,   34,   34,   34,   34,   99,  100,  101,
      102,  103,  104,   34,   99,  105,  106,  107,  108,  109,
      110,  111,   99,  112,   99,  113,   99,  114,  115,  116,
      117,  118,  119,  120,  121,   99,  122,   34,  125,  126,
       34,   37,  127,   39,   34,   34,   34,   34,   34,   34,
      128,  129,  128,  130,  131,  132,   34,  128,  133,  134,
      135,  136,  137,  138,  139,  128,  140,  128,  141,  128,
      142,  143,  144,  145,  128,  146,  147,  148,  128,  149,
       34,  150,  151,  549,   37,  153,   39,  202,  544,  202,
      203,  199,  203,  200,  202,  344,  154,  203,  155,  202,

      512,  297,  203,  208,  298,  202,  202,  202,  203,  203,
      203,  212,  202,  343,  213,  203,  154,  230,  211,  156,
       34,  150,  151,  208,   37,  153,   39,  202,  217,  215,
      203,  220,  394,  218,  248,  219,  154,  365,  155,  216,
      202,  223,  202,  203,  202,  203,  221,  203,  199,  199,
      200,  200,  222,  223,  248,  252,  154,  223,  226,  156,
      158,   36,  308,  159,  160,  161,  199,  225,  200,  202,
      300,  231,  203,  227,  199,  162,  200,  163,  164,  199,
      301,  200,  202,  228,  427,  203,  202,  229,  308,  203,
      202,  208,  428,  203,  199,  162,  200,  353,  165,  158,

       36,  354,  159,  160,  161,  555,  238,  232,  233,  202,
      538,  208,  203,  199,  162,  200,  163,  164,  202,  258,
      199,  203,  200,  256,  196,  238,  238,  308,  243,  311,
      196,  196,  250,  202,  162,  196,  203,  165,  167,   36,
      285,  168,  169,  170,  312,  238,  426,  199,  202,  200,
      426,  203,  250,  171,  202,  172,  173,  203,  199,  250,
      200,  426,  262,  199,  252,  200,  202,  316,  317,  203,
      254,  202,  265,  171,  203,  257,  174,  167,   36,  250,
      168,  169,  170,  202,  202,  275,  203,  203,  319,  320,
      254,  199,  171,  200,  172,  173,  199,  252,  200,  202,

      344,  202,  203,  254,  203,  283,  284,  202,  259,  260,
      203,  202,  171,  261,  203,  174,  176,  177,  343,  178,
      179,  180,  548,  254,  199,  271,  200,  202,  259,  202,
      203,  181,  203,  182,  183,  263,  274,  202,  264,  202,
      203,  279,  203,  308,  327,  280,  200,  202,  547,  202,
      203,  181,  203,  266,  184,  176,  177,  426,  178,  179,
      180,  268,  202,  267,  276,  203,  269,  281,  270,  308,
      181,  202,  182,  183,  203,  302,  282,  330,  331,  308,
      303,  272,  304,  537,  199,  277,  337,  273,  274,  199,
      181,  200,  274,  184,  186,  187,  306,  188,  189,  190,

      278,  293,  307,  308,  340,  341,  199,  308,  200,  191,
      199,  192,  200,  202,  308,  563,  203,  342,  359,  342,
      360,  293,  259,  313,  196,  326,  196,  314,  199,  191,
      200,  308,  193,  186,  187,  536,  188,  189,  190,  196,
      293,  199,  259,  200,  199,  235,  200,  199,  191,  200,
      192,  236,  327,  201,  200,  327,  535,  200,  202,  201,
      293,  203,  202,  202,  328,  203,  203,  328,  191,  286,
      287,  193,  239,  201,  534,  239,  239,  239,  239,  201,
      223,  239,  239,  199,  328,  200,  366,  328,  196,  335,
      196,  239,  239,  319,  320,  239,  246,  239,  247,  444,

      331,  239,  239,  196,  199,  199,  337,  337,  447,  341,
      342,  239,  196,  347,  196,  533,  338,  338,  199,  199,
      200,  200,  239,  199,  239,  200,  202,  348,  359,  203,
      360,  350,  532,  343,  343,  350,  338,  338,  343,  202,
      361,  359,  203,  360,  199,  202,  200,  202,  203,  531,
      203,  350,  367,  361,  202,  350,  202,  203,  202,  203,
      361,  203,  202,  202,  202,  203,  203,  203,  444,  331,
      371,  368,  370,  361,  202,  369,  202,  203,  426,  203,
      377,  374,  447,  341,  373,  375,  372,  202,  202,  202,
      203,  203,  203,  376,  202,  202,  202,  203,  203,  203,

      378,  202,  308,  202,  203,  223,  203,  202,  202,  202,
      203,  203,  203,  202,  379,  380,  203,  202,  530,  426,
      203,  382,  381,  202,  202,  202,  203,  203,  203,  384,
      385,  464,  223,  383,  199,  196,  200,  387,  563,  509,
      386,  196,  196,  390,  426,  388,  196,  363,  202,  508,
      507,  203,  223,  363,  363,  389,  506,  199,  363,  200,
      505,  202,  202,  252,  203,  203,  202,  504,  199,  203,
      200,  202,  202,  202,  203,  203,  203,  202,  202,  202,
      203,  203,  203,  202,  202,  395,  203,  203,  396,  274,
      202,  202,  400,  203,  203,  399,  202,  202,  397,  203,

      203,  202,  403,  398,  203,  402,  404,  406,  401,  202,
      202,  503,  203,  203,  405,  202,  407,  202,  203,  202,
      203,  502,  203,  202,  408,  274,  203,  202,  409,  202,
      203,  202,  203,  202,  203,  501,  203,  202,  410,  426,
      203,  202,  411,  202,  203,  199,  203,  200,  500,  413,
      274,  414,  202,  412,  196,  203,  196,  416,  363,  327,
      363,  200,  415,  417,  196,  363,  196,  363,  202,  196,
      419,  203,  274,  363,  418,  199,  359,  337,  360,  196,
      363,  563,  342,  342,  196,  342,  196,  342,  199,  363,
      200,  363,  202,  202,  202,  203,  203,  203,  202,  348,

      499,  203,  308,  343,  450,  202,  202,  202,  203,  203,
      462,  457,  458,  308,  202,  464,  459,  203,  498,  460,
      202,  202,  456,  203,  203,  202,  202,  202,  203,  203,
      203,  202,  202,  497,  203,  203,  461,  202,  496,  223,
      203,  466,  495,  223,  465,  463,  202,  467,  202,  203,
      202,  203,  202,  203,  202,  203,  458,  203,  426,  202,
      202,  469,  203,  203,  468,  202,  202,  202,  203,  203,
      203,  494,  202,  252,  363,  203,  470,  358,  223,  473,
      363,  363,  471,  474,  355,  363,  472,  458,  202,  475,
      477,  203,  202,  202,  454,  203,  203,  476,  202,  202,

      202,  203,  462,  203,  452,  464,  478,  480,  352,  202,
      479,  202,  203,  202,  203,  202,  203,  451,  203,  202,
      202,  202,  203,  203,  203,  563,  202,  274,  481,  203,
      448,  482,  274,  483,  484,  202,  485,  202,  203,  202,
      203,  343,  203,  202,  478,  202,  203,  336,  203,  202,
      487,  202,  203,  486,  203,  202,  202,  202,  203,  203,
      203,  446,  333,  324,  363,  488,  363,  274,  491,  363,
      342,  363,  363,  489,  363,  492,  478,  490,  202,  363,
      493,  203,  202,  202,  363,  203,  203,  450,  202,  202,
      202,  203,  203,  203,  202,  202,  458,  203,  203,  202,

      202,  202,  203,  203,  203,  202,  202,  202,  203,  203,
      203,  202,  223,  516,  203,  202,  513,  510,  520,  442,
      511,  323,  518,  514,  515,  223,  202,  441,  202,  203,
      517,  203,  202,  202,  440,  203,  203,  223,  202,  202,
      519,  203,  203,  202,  223,  223,  203,  439,  202,  202,
      478,  203,  203,  202,  202,  202,  203,  203,  203,  202,
      202,  202,  203,  203,  203,  308,  274,  202,  521,  202,
      203,  523,  203,  526,  438,  437,  436,  528,  522,  525,
      435,  524,  308,  527,  202,  274,  202,  520,  202,  203,
      202,  203,  274,  203,  538,  434,  539,  433,  529,  540,

      202,  432,  431,  203,  274,  274,  202,  202,  308,  203,
      203,  202,  202,  202,  203,  203,  203,  202,  538,  202,
      203,  458,  203,  202,  202,  202,  203,  203,  203,  430,
      202,  458,  542,  203,  202,  543,  458,  203,  223,  202,
      202,  429,  203,  203,  458,  223,  202,  202,  426,  203,
      203,  545,  539,  202,  478,  540,  203,  425,  546,  202,
      478,  274,  203,  478,  551,  202,  202,  552,  203,  203,
      424,  478,  556,  274,  202,  557,  551,  203,  202,  552,
      556,  203,  423,  557,  560,  550,  560,  561,  422,  561,
      308,  421,  223,  420,  223,  288,  274,  554,  252,  251,

      244,  274,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  196,  196,  241,  196,  196,  196,  196,  196,
      196,  196,  204,  204,  204,  204,  237,  237,  239,  393,
      391,  239,  239,  240,  239,  239,  239,  239,  242,  242,
      198,  242,  242,  242,  242,  242,  242,  242,  245,  195,

      364,  245,  245,  362,  245,  245,  245,  245,  249,  249,
      253,  253,  253,  255,  255,  255,  255,  290,  290,  321,
      321,  321,  194,  321,  321,  321,  321,  321,  322,  322,
      358,  322,  357,  322,  322,  322,  322,  325,  325,  355,
      325,  325,  325,  325,  325,  325,  325,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  332,  332,  352,
      332,  349,  332,  332,  332,  332,  334,  334,  345,  334,
      334,  334,  334,  334,  334,  334,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  342,  342,  342,  342,
      343,  342,  342,  342,  342,  342,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  351,  351,  343,  351,
      351,  351,  351,  351,  351,  351,  356,  356,  336,  356,
      356,  356,  356,  356,  356,  356,  363,  363,  195,  363,
      363,  363,  363,  363,  363,  363,  392,  392,  333,  392,
      392,  392,  392,  392,  392,  392,  443,  443,  198,  443,
      443,  443,  443,  443,  443,  443,  445,  445,  324,  445,
      445,  445,  445,  445,  445,  445,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  453,  453,  323,  453,
      453,  453,  453,  453,  453,  453,  455,  455,  455,  455,
      541,  541,  541,  541,  553,  553,  553,  553,  558,  558,

      558,  558,  562,  562,  562,  562,  197,  318,  315,  308,
      310,  309,  305,  299,  296,  292,  291,  289,  288,  252,
      251,  244,  241,  240,  198,  197,  195,  194,  563,   33,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563
    } ;

static yyconst flex_int16_t yy_chk[1874] =
    {   0,
        0,    1,    1,    0,    1,    1,    1,   15,   15,   16,
       16,   40,   71,   40,   71,   41,    1,   41,    1,   42,
       44,   42,   46,   44,  187,   46,   67,   41,  187,   67,
       48,   42,   45,   48,   50,   45,    1,   50,  133,    1,
        2,    2,  133,    2,    2,    2,   45,   41,   67,   46,
       47,   42,   47,   47,   85,    2,   47,    2,   53,   48,
       50,   53,   68,   58,   50,   88,   58,   88,   68,   99,
      123,  123,   99,  606,   85,    2,   53,   58,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       19,   19,   19,  603,   19,   19,   19,   52,  602,   51,
       52,   49,   51,   49,   49,  176,   19,   49,   19,   63,

      600,  135,   63,   49,  135,   54,   55,   56,   54,   55,
       56,   52,   60,  176,   52,   60,   19,   63,   51,   19,
       20,   20,   20,   49,   20,   20,   20,   57,   55,   54,
       57,   56,  594,   55,   86,   55,   20,  592,   20,   54,
       59,   60,   64,   59,   61,   64,   57,   61,  130,   95,
      130,   95,   57,   57,   86,   95,   20,   57,   61,   20,
       25,   25,  555,   25,   25,   25,   62,   59,   62,   62,
      137,   64,   62,   61,  154,   25,  154,   25,   25,   65,
      137,   65,   65,   62,  300,   65,   66,   62,  548,   66,
      103,   65,  300,  103,   72,   25,   72,  353,   25,   26,

       26,  353,   26,   26,   26,  547,   72,   66,   66,  100,
      538,   65,  100,   73,   26,   73,   26,   26,  122,  103,
       89,  122,   89,  100,   78,   73,   72,  537,   78,  144,
       78,   78,   89,  106,   26,   78,  106,   26,   27,   27,
      122,   27,   27,   27,  144,   73,  536,   90,  101,   90,
      535,  101,   89,   27,  108,   27,   27,  108,   96,   90,
       96,  534,  106,  102,   96,  102,  102,  148,  148,  102,
       96,  113,  108,   27,  113,  101,   27,   28,   28,   90,
       28,   28,   28,  105,  121,  113,  105,  121,  150,  150,
       96,   97,   28,   97,   28,   28,  104,   97,  104,  104,

      344,  111,  104,   97,  111,  121,  121,  115,  104,  105,
      115,  107,   28,  105,  107,   28,   29,   29,  344,   29,
       29,   29,  533,   97,  117,  111,  117,  117,  104,  109,
      117,   29,  109,   29,   29,  107,  115,  114,  107,  110,
      114,  117,  110,  532,  162,  117,  162,  119,  531,  118,
      119,   29,  118,  109,   29,   30,   30,  530,   30,   30,
       30,  110,  112,  109,  114,  112,  110,  118,  110,  509,
       30,  116,   30,   30,  116,  138,  119,  164,  164,  508,
      138,  112,  138,  507,  171,  116,  171,  112,  112,  132,
       30,  132,  112,   30,   31,   31,  140,   31,   31,   31,

      116,  132,  140,  140,  173,  173,  145,  140,  145,   31,
      120,   31,  120,  120,  506,  183,  120,  183,  191,  183,
      191,  132,  120,  145,  160,  160,  160,  145,  147,   31,
      147,  505,   31,   32,   32,  503,   32,   32,   32,  160,
      147,  155,  120,  155,  201,  235,  201,  156,   32,  156,
       32,  235,  163,  155,  163,  165,  502,  165,  204,  156,
      147,  204,  205,  209,  163,  205,  209,  165,   32,  286,
      286,   32,   83,  155,  501,   83,   83,   83,   83,  156,
      209,   83,   83,  238,  163,  238,  205,  165,  169,  169,
      169,   83,   84,  319,  319,   84,   84,   84,   84,  330,

      330,   84,   84,  169,  172,  174,  172,  174,  340,  340,
      179,   84,  179,  179,  179,  500,  172,  174,  181,  182,
      181,  182,  245,  184,  245,  184,  206,  179,  192,  206,
      192,  182,  499,  181,  182,  184,  172,  174,  184,  207,
      192,  193,  207,  193,  208,  210,  208,  208,  210,  498,
      208,  182,  206,  193,  211,  184,  212,  211,  213,  212,
      192,  213,  214,  215,  216,  214,  215,  216,  444,  444,
      212,  207,  211,  193,  217,  210,  218,  217,  497,  218,
      216,  214,  447,  447,  213,  215,  212,  219,  220,  221,
      219,  220,  221,  215,  222,  223,  224,  222,  223,  224,

      217,  225,  496,  226,  225,  218,  226,  227,  228,  229,
      227,  228,  229,  230,  219,  220,  230,  231,  495,  494,
      231,  224,  222,  232,  233,  234,  232,  233,  234,  227,
      228,  464,  225,  226,  250,  242,  250,  230,  450,  441,
      229,  242,  242,  234,  440,  232,  242,  243,  255,  439,
      438,  255,  231,  243,  243,  233,  437,  254,  243,  254,
      436,  256,  257,  254,  256,  257,  258,  435,  259,  258,
      259,  259,  260,  261,  259,  260,  261,  262,  263,  264,
      262,  263,  264,  265,  266,  256,  265,  266,  257,  260,
      268,  267,  263,  268,  267,  262,  269,  270,  258,  269,

      270,  271,  265,  261,  271,  264,  266,  267,  263,  272,
      273,  434,  272,  273,  266,  274,  268,  275,  274,  276,
      275,  433,  276,  277,  270,  269,  277,  278,  271,  279,
      278,  280,  279,  281,  280,  432,  281,  282,  273,  431,
      282,  283,  275,  284,  283,  293,  284,  293,  430,  278,
      276,  279,  285,  277,  325,  285,  325,  281,  326,  328,
      326,  328,  280,  283,  334,  335,  334,  335,  365,  325,
      285,  365,  282,  326,  284,  338,  361,  338,  361,  334,
      335,  343,  346,  343,  346,  343,  346,  347,  350,  347,
      350,  347,  366,  367,  368,  366,  367,  368,  369,  346,

      429,  369,  428,  350,  347,  370,  371,  372,  370,  371,
      372,  367,  368,  427,  373,  374,  369,  373,  425,  370,
      375,  374,  366,  375,  374,  376,  377,  378,  376,  377,
      378,  379,  380,  424,  379,  380,  371,  381,  423,  375,
      381,  378,  422,  376,  377,  373,  382,  380,  383,  382,
      384,  383,  385,  384,  386,  385,  379,  386,  421,  388,
      387,  382,  388,  387,  381,  390,  389,  395,  390,  389,
      395,  420,  396,  394,  392,  396,  384,  360,  383,  387,
      392,  392,  385,  388,  359,  392,  386,  389,  397,  390,
      396,  397,  398,  399,  358,  398,  399,  395,  400,  401,

      402,  400,  401,  402,  355,  403,  397,  399,  352,  405,
      398,  403,  405,  404,  403,  406,  404,  349,  406,  408,
      407,  409,  408,  407,  409,  348,  410,  405,  400,  410,
      345,  402,  404,  406,  407,  411,  409,  412,  411,  413,
      412,  342,  413,  414,  408,  415,  414,  337,  415,  416,
      411,  417,  416,  410,  417,  418,  419,  455,  418,  419,
      455,  336,  333,  327,  443,  413,  443,  412,  416,  445,
      449,  445,  449,  414,  449,  417,  418,  415,  456,  443,
      419,  456,  457,  458,  445,  457,  458,  449,  459,  460,
      461,  459,  460,  461,  463,  465,  456,  463,  465,  467,

      466,  468,  467,  466,  468,  469,  470,  471,  469,  470,
      471,  472,  460,  467,  472,  473,  463,  459,  473,  324,
      461,  323,  469,  465,  466,  471,  474,  318,  475,  474,
      468,  475,  476,  477,  317,  476,  477,  470,  478,  479,
      472,  478,  479,  480,  474,  475,  480,  316,  481,  482,
      476,  481,  482,  483,  486,  484,  483,  486,  484,  485,
      487,  488,  485,  487,  488,  315,  480,  489,  479,  490,
      489,  482,  490,  485,  314,  313,  312,  487,  481,  484,
      311,  483,  310,  486,  491,  489,  492,  491,  493,  492,
      510,  493,  488,  510,  511,  309,  512,  307,  490,  512,

      511,  305,  304,  511,  492,  493,  513,  514,  303,  513,
      514,  515,  516,  517,  515,  516,  517,  518,  522,  519,
      518,  510,  519,  521,  522,  523,  521,  522,  523,  302,
      524,  518,  513,  524,  525,  515,  516,  525,  514,  526,
      527,  301,  526,  527,  517,  519,  528,  529,  299,  528,
      529,  523,  541,  542,  521,  541,  542,  298,  525,  543,
      528,  524,  543,  526,  544,  545,  546,  544,  545,  546,
      297,  527,  549,  529,  550,  549,  553,  550,  554,  553,
      558,  554,  296,  558,  559,  542,  562,  559,  295,  562,
      294,  292,  550,  291,  543,  288,  554,  545,  253,  251,

      247,  546,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  570,  570,  246,  570,  570,  570,  570,  570,
      570,  570,  571,  571,  571,  571,  572,  572,  573,  244,
      241,  573,  573,  240,  573,  573,  573,  573,  574,  574,
      200,  574,  574,  574,  574,  574,  574,  574,  575,  199,

      198,  575,  575,  195,  575,  575,  575,  575,  576,  576,
      577,  577,  577,  578,  578,  578,  578,  579,  579,  580,
      580,  580,  194,  580,  580,  580,  580,  580,  581,  581,
      190,  581,  189,  581,  581,  581,  581,  582,  582,  188,
      582,  582,  582,  582,  582,  582,  582,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  584,  584,  186,
      584,  180,  584,  584,  584,  584,  585,  585,  178,  585,
      585,  585,  585,  585,  585,  585,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  587,  587,  587,  587,
      177,  587,  587,  587,  587,  587,  588,  588,  588,  588,

      588,  588,  588,  588,  588,  588,  589,  589,  175,  589,
      589,  589,  589,  589,  589,  589,  590,  590,  170,  590,
      590,  590,  590,  590,  590,  590,  591,  591,  168,  591,
      591,  591,  591,  591,  591,  591,  593,  593,  167,  593,
      593,  593,  593,  593,  593,  593,  595,  595,  161,  595,
      595,  595,  595,  595,  595,  595,  596,  596,  159,  596,
      596,  596,  596,  596,  596,  596,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  598,  598,  158,  598,
      598,  598,  598,  598,  598,  598,  599,  599,  599,  599,
      601,  601,  601,  601,  604,  604,  604,  604,  605,  605,

      605,  605,  607,  607,  607,  607,  153,  149,  146,  143,
      142,  141,  139,  136,  134,  131,  129,  127,  125,   94,
       91,   79,   77,   75,   39,   38,   37,   35,   33,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563
    } ;

extern int pycodeYY_flex_debug;
int pycodeYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pycodeYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pycodeYYtext;
#line 1 "pycode.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */

#line 31 "pycode.l"

#include <stdio.h>
#include <qvaluestack.h>

#include "pycode.h"
#include "message.h"

#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"
#include "config.h"
#include "groupdef.h"
#include "classlist.h"
#include "filedef.h"
#include "namespacedef.h"
#include "tooltip.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

static ClassSDict    g_codeClassSDict(17);
static QCString      g_curClassName;
static QStrList      g_curClassBases;


static CodeOutputInterface * g_code;
static const char *  g_inputString;     //!< the code fragment as text
static int	     g_inputPosition;   //!< read offset during parsing 
static const char *  g_currentFontClass;
static bool          g_needsTermination;
static const Definition *g_searchCtx;
static bool          g_collectXRefs;
static int           g_inputLines;      //!< number of line in the code fragment
static int	     g_yyLineNr;        //!< current line number
static FileDef *     g_sourceFileDef;
static Definition *  g_currentDefinition;
static MemberDef *   g_currentMemberDef;
static bool          g_includeCodeFragment;
static QCString      g_realScope;
//static bool          g_insideBody;
static int           g_bodyCurlyCount;
static bool          g_searchingForBody;
static QCString      g_classScope;
static int           g_paramParens;
//static int           g_anchorCount;

static bool          g_exampleBlock;
static QCString      g_exampleName;

static QCString      g_type;
static QCString      g_name;

static bool          g_doubleStringIsDoc;
static bool          g_doubleQuote;
static bool          g_noSuiteFound;
static int           g_stringContext;

static QValueStack<uint> g_indents;  //!< Tracks indentation levels for scoping in python

static QCString      g_docBlock;     //!< contents of all lines of a documentation block
static bool          g_endComment;

static void endFontClass();
static void adjustScopesAndSuites(unsigned indentLength);
static const char *stateToString(int state);


/*! Represents a stack of variable to class mappings as found in the
 *  code. Each scope is enclosed in pushScope() and popScope() calls.
 *  Variables are added by calling addVariables() and one can search
 *  for variable using findVariable().
 */
class PyVariableContext 
{
  public:
    static const ClassDef *dummyContext;    
    class Scope : public SDict<ClassDef> 
    {
      public:
	Scope() : SDict<ClassDef>(17) {}
    };
    
    PyVariableContext() 
    {
      m_scopes.setAutoDelete(TRUE);
    }

    virtual ~PyVariableContext() 
    {
    }
    
    void pushScope() 
    {
      m_scopes.append(new Scope);
    }

    void popScope() 
    {
      if (m_scopes.count()>0) 
      {
	m_scopes.remove(m_scopes.count()-1);
      }
    }

    void clear() 
    {
      m_scopes.clear();
      m_globalScope.clear();
    }

    void clearExceptGlobal() 
    {
      m_scopes.clear();
    }

    void addVariable(const QCString &type,const QCString &name);
    ClassDef *findVariable(const QCString &name);
    
  private:
    Scope        m_globalScope;
    QList<Scope> m_scopes;
};

void PyVariableContext::addVariable(const QCString &type,const QCString &name)
{
  //printf("PyVariableContext::addVariable(%s,%s)\n",type.data(),name.data());
  QCString ltype = type.simplifyWhiteSpace();
  QCString lname = name.simplifyWhiteSpace();

  Scope *scope = m_scopes.count()==0 ? &m_globalScope : m_scopes.getLast();
  const ClassDef *varType;
  if (
      (varType=g_codeClassSDict[ltype]) ||  // look for class definitions inside the code block
      (varType=getResolvedClass(g_currentDefinition,g_sourceFileDef,ltype)) // look for global class definitions
     ) 
  {
    scope->append(lname,varType); // add it to a list
  }
  else 
  {
    if (m_scopes.count()>0) // for local variables add a dummy entry so the name 
                            // is hidden to avoid FALSE links to global variables with the same name
                            // TODO: make this work for namespaces as well!
    {
      scope->append(lname,dummyContext);
    }
  }
}

ClassDef *PyVariableContext::findVariable(const QCString &name)
{
  if (name.isEmpty()) return 0;
  ClassDef *result = 0;
  QListIterator<Scope> sli(m_scopes);
  Scope *scope;
  // search from inner to outer scope
  for (sli.toLast();(scope=sli.current());--sli)
  {
    result = scope->find(name);
    if (result) 
    {
      return result;
    }
  }
  // nothing found -> also try the global scope
  result=m_globalScope.find(name);
  return result;
}

static PyVariableContext g_theVarContext;
const ClassDef *PyVariableContext::dummyContext = (ClassDef*)0x8;

class PyCallContext
{
  public:
    struct Ctx
    {
      Ctx() : name(g_name), type(g_type), cd(0) {}
      QCString name;
      QCString type;
      const ClassDef *cd;
    };

    PyCallContext() 
    {
      m_classList.append(new Ctx);
      m_classList.setAutoDelete(TRUE);
    }

    virtual ~PyCallContext() {}

    void setClass(const ClassDef *cd)
    {
      Ctx *ctx = m_classList.getLast();
      if (ctx) 
      {
        ctx->cd=cd;
      }
    }
    void pushScope()
    {
      m_classList.append(new Ctx);
    }

    void popScope()
    {
      if (m_classList.count()>1)
      {
	Ctx *ctx = m_classList.getLast();
	if (ctx)
	{
	  g_name = ctx->name;
	  g_type = ctx->type;
	}
	m_classList.removeLast();
      }
      else
      {
      }
    }

    void clear()
    {
      m_classList.clear();
      m_classList.append(new Ctx);
    }

    const ClassDef *getClass() const
    {
      Ctx *ctx = m_classList.getLast();

      if (ctx)
        return ctx->cd;
      else
        return 0;
    }

  private:
    QList<Ctx> m_classList;    
};

static PyCallContext g_theCallContext;


/*! counts the number of lines in the input */
static int countLines()
{
  const char *p=g_inputString;
  char c;
  int count=1;
  while ((c=*p)) 
  { 
    p++ ; 
    if (c=='\n') count++;  
  }
  if (p>g_inputString && *(p-1)!='\n') 
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++, 
    g_needsTermination=TRUE; 
  } 
  return count;
}

static void setCurrentDoc(const QCString &anchor)
{
  if (Doxygen::searchIndex)
  {
    if (g_searchCtx)
    {
      Doxygen::searchIndex->setCurrentDoc(g_searchCtx,g_searchCtx->anchor(),FALSE);
    }
    else
    {
      Doxygen::searchIndex->setCurrentDoc(g_sourceFileDef,anchor,TRUE);
    }
  }
}

static void addToSearchIndex(const char *text)
{
  if (Doxygen::searchIndex)
  {
    Doxygen::searchIndex->addWord(text,FALSE);
  }
}


static const ClassDef *stripClassName(const char *s,Definition *d=g_currentDefinition)
{
  int pos=0;
  QCString type = s;
  QCString className;
  QCString templSpec;
  while (extractClassNameFromType(type,pos,className,templSpec)!=-1)
  {
    QCString clName=className+templSpec;

    const ClassDef *cd=0;
    if (!g_classScope.isEmpty())
    {
      cd=getResolvedClass(d,g_sourceFileDef,g_classScope+"::"+clName);
    }
    if (cd==0)
    {
      cd=getResolvedClass(d,g_sourceFileDef,clName);
    }
    if (cd)
    {
      return cd;
    }
  }

  return 0;
}



/*! start a new line of code, inserting a line number if g_sourceFileDef
 * is TRUE. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine()
{
  //if (g_currentFontClass) { g_code->endFontClass(); }
  if (g_sourceFileDef)
  {
    //QCString lineNumber,lineAnchor;
    //lineNumber.sprintf("%05d",g_yyLineNr);
    //lineAnchor.sprintf("l%05d",g_yyLineNr);
   
    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
    //printf("startCodeLine %d d=%p\n",g_yyLineNr,d);
    //g_code->startLineNumber();

    if (!g_includeCodeFragment && d && d->isLinkableInProject())
    {
      g_currentDefinition = d;
      g_currentMemberDef = g_sourceFileDef->getSourceMember(g_yyLineNr);
      //g_insideBody = FALSE;
      g_endComment = FALSE;
      g_searchingForBody = TRUE;
      g_realScope = d->name().copy();
      g_classScope = d->name().copy();
      //printf("Real scope: '%s'\n",g_realScope.data());
      g_bodyCurlyCount = 0;
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",g_yyLineNr);
      if (g_currentMemberDef)
      {
        g_code->writeLineNumber(g_currentMemberDef->getReference(),
	                        g_currentMemberDef->getOutputFileBase(),
	                        g_currentMemberDef->anchor(),g_yyLineNr);
        setCurrentDoc(lineAnchor);
      }
      else
      {
        g_code->writeLineNumber(d->getReference(),
	                        d->getOutputFileBase(),
	                        0,g_yyLineNr);
        setCurrentDoc(lineAnchor);
      }
    }
    else
    {
      //g_code->codify(lineNumber);
      g_code->writeLineNumber(0,0,0,g_yyLineNr);
    }
    //g_code->endLineNumber();
  }
  g_code->startCodeLine(g_sourceFileDef); 
  if (g_currentFontClass)
  {
    g_code->startFontClass(g_currentFontClass);
  }
}

static void codify(const char* text) 
{ 
  g_code->codify(text);
}

static void endCodeLine()
{
  endFontClass();
  g_code->endCodeLine();
}

static void nextCodeLine()
{
  const char *fc = g_currentFontClass;
  endCodeLine();
  if (g_yyLineNr<g_inputLines) 
  {
    g_currentFontClass = fc;
    startCodeLine();
  }
}


/*! writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be 
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(CodeOutputInterface &ol,
                  const Definition *d,
                  const char *text)
{
  static bool sourceTooltips = Config_getBool(SOURCE_TOOLTIPS);
  TooltipManager::instance()->addTooltip(d);
  QCString ref  = d->getReference();
  QCString file = d->getOutputFileBase();
  QCString anchor = d->anchor();
  QCString tooltip; 
  if (!sourceTooltips) // fall back to simple "title" tooltips
  {
    tooltip = d->briefDescriptionAsTooltip();
  }
  bool done=FALSE;
  char *p=(char *)text;
  while (!done)
  {
    char *sp=p;
    char c;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,tooltip);
      nextCodeLine();
    }
    else
    {
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,tooltip);
      done=TRUE;
    }
  }
}

static void startFontClass(const char *s)
{
  // if font class is already set don't stop and start it.
  // strcmp does not like null pointers as input.
  if (!g_currentFontClass || !s || strcmp(g_currentFontClass,s))
  {
    endFontClass();
    g_code->startFontClass(s);
    g_currentFontClass=s;
  }
}

static void endFontClass()
{
  if (g_currentFontClass)
  {
    g_code->endFontClass();
    g_currentFontClass=0;
  }
}

static void codifyLines(char *text)
{
  //printf("codifyLines(%d,\"%s\")\n",g_yyLineNr,text);
  char *p=text,*sp=p;
  char c;
  bool done=FALSE;
  const char *  tmp_currentFontClass = g_currentFontClass;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      g_code->codify(sp);
      endCodeLine();
      if (g_yyLineNr<g_inputLines)
      {
        startCodeLine();
      }
      if (tmp_currentFontClass)
      {
        startFontClass(tmp_currentFontClass);
      }
    }
    else
    {
      g_code->codify(sp);
      done=TRUE;
    }
  }
}

static void codifyLines(const QCString &str)
{
  char *tmp= (char *)malloc(str.length()+1);
  qstrcpy(tmp, str);
  codifyLines(tmp);
  free(tmp);
}

static bool getLinkInScope(const QCString &c,  // scope
                           const QCString &m,  // member
			   const char *memberText, // exact text
			   CodeOutputInterface &ol,
			   const char *text
			  )
{
  const MemberDef    *md = 0;
  const ClassDef     *cd = 0;
  const FileDef      *fd = 0;
  const NamespaceDef *nd = 0;
  const GroupDef     *gd = 0;
  //printf("Trying '%s'::'%s'\n",c.data(),m.data());
  if (getDefs(c,m,"()",md,cd,fd,nd,gd,FALSE,g_sourceFileDef) && 
      md->isLinkable())
  {
    //Definition *d=0;
    //if (cd) d=cd; else if (nd) d=nd; else if (fd) d=fd; else d=gd;

    const Definition *d = md->getOuterScope()==Doxygen::globalScope ?
	                  md->getBodyDef() : md->getOuterScope();
    //printf("Found! d=%s\n",d?d->name().data():"<none>");
    if (md->getGroupDef()) d = md->getGroupDef();
    if (d && d->isLinkable())
    {
      g_theCallContext.setClass(stripClassName(md->typeString(),md->getOuterScope()));
      //printf("g_currentDefinition=%p g_currentMemberDef=%p\n",
      //        g_currentDefinition,g_currentMemberDef);

      if (g_currentDefinition && g_currentMemberDef &&
	  md!=g_currentMemberDef && g_collectXRefs)
      {
	addDocCrossReference(g_currentMemberDef,const_cast<MemberDef*>(md));
      }
      //printf("d->getReference()='%s' d->getOutputBase()='%s' name='%s' member name='%s'\n",d->getReference().data(),d->getOutputFileBase().data(),d->name().data(),md->name().data());
     
      writeMultiLineCodeLink(ol,md, text ? text : memberText);
      addToSearchIndex(text ? text : memberText);
      return TRUE;
    } 
  }
  return FALSE;
}

static bool getLink(const char *className,
                    const char *memberName,
		    CodeOutputInterface &ol,
		    const char *text=0)
{
  QCString m=removeRedundantWhiteSpace(memberName);
  QCString c=className;
  if (!getLinkInScope(c,m,memberName,ol,text))
  {
    if (!g_curClassName.isEmpty())
    {
      if (!c.isEmpty()) c.prepend("::");
      c.prepend(g_curClassName);
      return getLinkInScope(c,m,memberName,ol,text);
    }
    return FALSE;
  }
  return TRUE;
}


/*
  For a given string in the source code,
  finds its class or global id and links to it.
*/
static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
                                      bool typeOnly=FALSE)
{
  QCString className=clName;

  // Don't do anything for empty text
  if (className.isEmpty()) return;

  DBG_CTX((stderr,"generateClassOrGlobalLink(className=%s)\n",className.data()));

  const ClassDef *cd=0,*lcd=0;  /** Class def that we may find */
  const MemberDef *md=0;        /** Member def that we may find */
  //bool isLocal=FALSE;

  if ((lcd=g_theVarContext.findVariable(className))==0) // not a local variable
  {
    Definition *d = g_currentDefinition;
    QCString scope = substitute(className,".","::");

    cd = getResolvedClass(d,g_sourceFileDef,substitute(className,".","::"),&md);

    DBG_CTX((stderr,"d=%s g_sourceFileDef=%s\n",
        d?d->displayName().data():"<null>",
        g_currentDefinition?g_currentDefinition->displayName().data():"<null>"));
    DBG_CTX((stderr,"is found as a type %s\n",cd?cd->name().data():"<null>"));

    if (cd==0 && md==0) // also see if it is variable or enum or enum value
    {
      const NamespaceDef *nd = getResolvedNamespace(scope);
      if (nd)
      {
        writeMultiLineCodeLink(ol,nd,clName);
        addToSearchIndex(className);
        return;
      }
      else if (getLink(g_classScope,clName,ol,clName))
      {
	return;
      }
    }
  }
  else
  {
    if (lcd!=PyVariableContext::dummyContext) 
    {
      g_theCallContext.setClass(lcd);
    }
    //isLocal=TRUE;
    DBG_CTX((stderr,"is a local variable cd=%p!\n",cd));
  }

  if (cd && cd->isLinkable()) // is it a linkable class
  {
    writeMultiLineCodeLink(ol,cd,clName);
    addToSearchIndex(className);
    if (md)
    {
      const Definition *d = md->getOuterScope()==Doxygen::globalScope ?
                            md->getBodyDef() : md->getOuterScope();
      if (md->getGroupDef()) d = md->getGroupDef();
      if (d && d->isLinkable() && md->isLinkable() && 
          g_currentMemberDef && g_collectXRefs)
      {
        addDocCrossReference(g_currentMemberDef,const_cast<MemberDef*>(md));
      }
    }
  }
  else // not a class, maybe a global member
  {
    int scopeEnd = className.findRev(".");
    if (scopeEnd!=-1 && !typeOnly) // name with explicit scope
    {
      QCString scope = substitute(className.left(scopeEnd),".","::");
      QCString locName = className.right(className.length()-scopeEnd-1);
      ClassDef *mcd = getClass(scope);
      DBG_CTX((stderr,"scope=%s locName=%s mcd=%p\n",scope.data(),locName.data(),mcd));
      if (mcd)
      {
	MemberDef *md = mcd->getMemberByName(locName);
	if (md)
	{
          g_theCallContext.setClass(stripClassName(md->typeString(),md->getOuterScope()));
          writeMultiLineCodeLink(ol,md,clName);
          addToSearchIndex(className);
	  const Definition *d = md->getOuterScope()==Doxygen::globalScope ?
	                        md->getBodyDef() : md->getOuterScope();
	  if (md->getGroupDef()) d = md->getGroupDef();
	  if (d && d->isLinkable() && md->isLinkable() && 
              g_currentMemberDef && g_collectXRefs)
	  {
	    addDocCrossReference(g_currentMemberDef,md);
	  }
	  return;
	}
      }
      else // check namespace as well
      {
        const NamespaceDef *mnd = getResolvedNamespace(scope);
        if (mnd)
        {
  	  MemberDef *md=mnd->getMemberByName(locName);
	  if (md)
          {
	    //printf("name=%s scope=%s\n",locName.data(),scope.data());
	    g_theCallContext.setClass(stripClassName(md->typeString(),md->getOuterScope()));
            writeMultiLineCodeLink(ol,md,clName);
            addToSearchIndex(className);
	    const Definition *d = md->getOuterScope()==Doxygen::globalScope ?
	                          md->getBodyDef() : md->getOuterScope();
	    if (md->getGroupDef()) d = md->getGroupDef();
	    if (d && d->isLinkable() && md->isLinkable() && 
                g_currentMemberDef && g_collectXRefs)
	    {
	      addDocCrossReference(g_currentMemberDef,md);
	    }
	    return;
          }
        }
      }
    }
    
    // nothing found, just write out the word
    codifyLines(clName);
    addToSearchIndex(clName);
  }
}

/*
   As of June 1, this function seems to work
   for file members, but scopes are not
   being correctly tracked for classes
   so it doesn't work for classes yet.

*/
static void generateFunctionLink(CodeOutputInterface &ol,char *funcName)
{
  //CodeClassDef *ccd=0;
  ClassDef *ccd=0;
  QCString locScope=g_classScope.copy();
  QCString locFunc=removeRedundantWhiteSpace(funcName);
  DBG_CTX((stdout,"*** locScope=%s locFunc=%s\n",locScope.data(),locFunc.data()));
  int i=locFunc.findRev("::");
  if (i>0)
  {
    locScope=locFunc.left(i);
    locFunc=locFunc.right(locFunc.length()-i-2).stripWhiteSpace();
  }
  //printf("generateFunctionLink(%s) classScope='%s'\n",locFunc.data(),locScope.data());
  if (!locScope.isEmpty() && (ccd=g_codeClassSDict[locScope]))
  {
    //printf("using classScope %s\n",g_classScope.data());
    if (ccd->baseClasses())
    {
      BaseClassListIterator bcli(*ccd->baseClasses());
      for ( ; bcli.current() ; ++bcli)
      {
	if (getLink(bcli.current()->classDef->name(),locFunc,ol,funcName)) 
	{
	  return;
	}
      }
    }
  }
  if (!getLink(locScope,locFunc,ol,funcName))
  {
    generateClassOrGlobalLink(ol,funcName);
  }
  return;
}

static bool findMemberLink(CodeOutputInterface &ol,Definition *sym,const char *symName)
{
  //printf("sym %s outerScope=%s equal=%d\n",
  //    sym->name().data(),sym->getOuterScope()->name().data(),
  //    sym->getOuterScope()==g_currentDefinition);

  if (sym->getOuterScope() &&
      sym->getOuterScope()->definitionType()==Definition::TypeClass &&
      g_currentDefinition->definitionType()==Definition::TypeClass)
  {
    ClassDef *cd = dynamic_cast<ClassDef*>(sym->getOuterScope());
    ClassDef *thisCd = dynamic_cast<ClassDef *>(g_currentDefinition);
    if (sym->definitionType()==Definition::TypeMember)
    {
      if (g_currentMemberDef && g_collectXRefs)
      {
	addDocCrossReference(g_currentMemberDef,dynamic_cast<MemberDef*>(sym));
      }
    }
    DBG_CTX((stderr,"cd=%s thisCd=%s\n",cd?cd->name().data():"<none>",thisCd?thisCd->name().data():"<none>"));

    // TODO: find the nearest base class in case cd is a base class of
    // thisCd 
    if (cd==thisCd || (thisCd && thisCd->isBaseClass(cd,TRUE)))
    {
      writeMultiLineCodeLink(ol,sym,symName);
      return TRUE;
    }
  }
  return FALSE;
}

static void findMemberLink(CodeOutputInterface &ol,char *symName)
{
  //printf("Member reference: %s scope=%s member=%s\n",
  //    pycodeYYtext,
  //    g_currentDefinition?g_currentDefinition->name().data():"<none>",
  //    g_currentMemberDef?g_currentMemberDef->name().data():"<none>"
  //    );
  if (g_currentDefinition)
  {
    DefinitionIntf *di = Doxygen::symbolMap->find(symName);
    if (di)
    {
      if (di->definitionType()==DefinitionIntf::TypeSymbolList) // multiple symbols
      {
	DefinitionListIterator dli(*(DefinitionList*)di);
	Definition *sym;
	for (dli.toFirst();(sym=dli.current());++dli)
	{
	  if (findMemberLink(ol,sym,symName)) return;
	}
      }
      else // single symbol
      {
	if (findMemberLink(ol,(Definition*)di,symName)) return;
      }
    }
  }
  //printf("sym %s not found\n",&pycodeYYtext[5]);
  codify(symName);
}

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while( c < max_size && g_inputString[g_inputPosition] )
  {
    *buf = g_inputString[g_inputPosition++] ;
    c++; buf++;
  }
  return c;
}
















#line 2087 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pycode.cpp"

#define INITIAL 0
#define Body 1
#define FunctionDec 2
#define FunctionParams 3
#define ClassDec 4
#define ClassInheritance 5
#define Suite 6
#define SuiteCaptureIndent 7
#define SuiteStart 8
#define SuiteMaintain 9
#define SuiteContinuing 10
#define LongString 11
#define SingleQuoteString 12
#define DoubleQuoteString 13
#define TripleString 14
#define DocBlock 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pycodeYYlex_destroy (void );

int pycodeYYget_debug (void );

void pycodeYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pycodeYYget_extra (void );

void pycodeYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pycodeYYget_in (void );

void pycodeYYset_in  (FILE * in_str  );

FILE *pycodeYYget_out (void );

void pycodeYYset_out  (FILE * out_str  );

yy_size_t pycodeYYget_leng (void );

char *pycodeYYget_text (void );

int pycodeYYget_lineno (void );

void pycodeYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pycodeYYwrap (void );
#else
extern int pycodeYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( pycodeYYtext, pycodeYYleng, 1, pycodeYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pycodeYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pycodeYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pycodeYYin))==0 && ferror(pycodeYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pycodeYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pycodeYYlex (void);

#define YY_DECL int pycodeYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pycodeYYtext and pycodeYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 995 "pycode.l"


#line 2297 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pycode.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pycodeYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in pycodeYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pycodeYYin )
			pycodeYYin = stdin;

		if ( ! pycodeYYout )
			pycodeYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pycodeYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE );
		}

		pycodeYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pycodeYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 564 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 563 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 998 "pycode.l"
{
				        startFontClass("keyword");
					codify(pycodeYYtext);
					endFontClass();
					BEGIN( FunctionDec );
		                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1005 "pycode.l"
{
				        startFontClass("keyword");
					codify(pycodeYYtext);
					endFontClass();
					BEGIN( ClassDec );
		                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1011 "pycode.l"
{
				        startFontClass("keywordtype");
					codify(pycodeYYtext);
					endFontClass();
				    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1016 "pycode.l"
{
				        codify("self.");
				        findMemberLink(*g_code,&pycodeYYtext[5]);
	                            }
	YY_BREAK
case 5:
*yy_cp = (yy_hold_char); /* undo effects of setting up pycodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pycodeYYtext again */
YY_RULE_SETUP
#line 1020 "pycode.l"
{
				        codify("self.");
				        findMemberLink(*g_code,&pycodeYYtext[5]);
	                            }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1024 "pycode.l"
{
				        codify("self.");
				        findMemberLink(*g_code,&pycodeYYtext[5]);
	                            }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 1028 "pycode.l"
{
				        codify("self.");
				        findMemberLink(*g_code,&pycodeYYtext[5]);
	                            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1032 "pycode.l"
{
				        codify("cls.");
				        findMemberLink(*g_code,&pycodeYYtext[4]);
	                            }
	YY_BREAK
case 9:
*yy_cp = (yy_hold_char); /* undo effects of setting up pycodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pycodeYYtext again */
YY_RULE_SETUP
#line 1036 "pycode.l"
{
				        codify("cls.");
				        findMemberLink(*g_code,&pycodeYYtext[4]);
	                            }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1040 "pycode.l"
{
				        codify("cls.");
				        findMemberLink(*g_code,&pycodeYYtext[4]);
	                            }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1044 "pycode.l"
{
				        codify("cls.");
				        findMemberLink(*g_code,&pycodeYYtext[4]);
	                            }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 1050 "pycode.l"
{

					generateClassOrGlobalLink(*g_code,pycodeYYtext);
					// codify(pycodeYYtext);
					g_curClassName = pycodeYYtext;
					g_curClassBases.clear();
					BEGIN( ClassInheritance );
		                    }
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 1060 "pycode.l"
{
					codify(pycodeYYtext);
                                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1064 "pycode.l"
{
                                        // The parser
					// is assuming
					// that ALL identifiers
					// in this state
					// are base classes;
					// it doesn't check to see
					// that the first parenthesis
					// has been seen.

					// This is bad - it should
					// probably be more strict
					// about what to accept.

                                        g_curClassBases.inSort(pycodeYYtext);
					generateClassOrGlobalLink(*g_code,pycodeYYtext);
					// codify(pycodeYYtext);
                                    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1083 "pycode.l"
{
				      codify(pycodeYYtext);

				      // Assume this will
				      // be a one-line suite;
				      // found counter-example
				      // in SuiteStart.

                                      // Push a class scope

                                      ClassDef *classDefToAdd = createClassDef("<code>",1,1,g_curClassName,ClassDef::Class,0,0,FALSE);
                                      g_codeClassSDict.append(g_curClassName,classDefToAdd);
                                      char *s=g_curClassBases.first();
                                      while (s) 
				      {
                                        const ClassDef *baseDefToAdd=g_codeClassSDict[s];

					// Try to find class in global
					// scope
					if (baseDefToAdd==0) 
					{
					  baseDefToAdd=getResolvedClass(g_currentDefinition,g_sourceFileDef,s);
					}

					if (baseDefToAdd && baseDefToAdd!=classDefToAdd) 
					{
				          classDefToAdd->insertBaseClass(const_cast<ClassDef*>(baseDefToAdd),s,Public,Normal);
					}

                                        s=g_curClassBases.next();
			              }

				      // Reset class-parsing variables.
				      g_curClassName.resize(0);
				      g_curClassBases.clear();
				      
				      g_noSuiteFound = TRUE;
				      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 1126 "pycode.l"
{
                                        generateFunctionLink(*g_code,pycodeYYtext);
                                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1130 "pycode.l"
{
				        codify(pycodeYYtext);
					BEGIN( FunctionParams );
		                    }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 1137 "pycode.l"
{
                                         // Parses delimiters
				         codify(pycodeYYtext);
                                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1142 "pycode.l"
{
				         codify(pycodeYYtext);
                                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1146 "pycode.l"
{
                                         codify(pycodeYYtext);
                                    }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 1150 "pycode.l"
{
				         codifyLines(pycodeYYtext);
                                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1154 "pycode.l"
{
				      codify(pycodeYYtext);

				      // Assume this will
				      // be a one-line suite;
				      // found counter-example
				      // in SuiteStart.
				      g_noSuiteFound = TRUE;
				      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 23:
YY_RULE_SETUP
#line 1168 "pycode.l"
{
                                 // Position-sensitive rules!
                                 // Must come AFTER keyword-triggered rules
                                 // Must come BEFORE identifier NONEMPTY-like rules
                                 //   to syntax highlight.

  		                 startFontClass("keyword");
  		                 codify(pycodeYYtext);
		                 endFontClass();
                               }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1179 "pycode.l"
{
                                 if (g_currentMemberDef && g_currentMemberDef->isFunction())
                                 {
                                   g_currentMemberDef->incrementFlowKeyWordCount();
                                 }
  		                 startFontClass("keywordflow");
  		                 codify(pycodeYYtext);
		                 endFontClass();
                               }
	YY_BREAK
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up pycodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pycodeYYtext again */
YY_RULE_SETUP
#line 1188 "pycode.l"
{
				 generateClassOrGlobalLink(*g_code,pycodeYYtext);
      			       }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1191 "pycode.l"
{
				 generateClassOrGlobalLink(*g_code,pycodeYYtext,TRUE);
			       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1194 "pycode.l"
{ codify(pycodeYYtext); }
	YY_BREAK


case 28:
YY_RULE_SETUP
#line 1202 "pycode.l"
{
                                         codify(pycodeYYtext);
                                       }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1205 "pycode.l"
{
                                          startFontClass("keyword");
					  codifyLines(pycodeYYtext);
		                          endFontClass();
					  BEGIN(Body);
      				       }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1211 "pycode.l"
{
                                          startFontClass("keyword");
					  codifyLines(pycodeYYtext);
		                          endFontClass();

					  // No indentation necessary
					  g_noSuiteFound = FALSE;
                                       }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1220 "pycode.l"
{
                                          if (g_currentMemberDef && g_currentMemberDef->isFunction())
                                          {
                                            g_currentMemberDef->incrementFlowKeyWordCount();
                                          }
                                          startFontClass("keywordflow");
					  codifyLines(pycodeYYtext);
		                          endFontClass();

					  // No indentation necessary
					  g_noSuiteFound = FALSE;
                                       }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1232 "pycode.l"
{
                                         codify(pycodeYYtext);
				       } 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1237 "pycode.l"
{
  				         if (YY_START==SingleQuoteString || 
				             YY_START==DoubleQuoteString || 
				             YY_START==TripleString
				            )
				         {
				           REJECT;
				         }
                                         yy_push_state(YY_START);
				         BEGIN(DocBlock);
				         g_docBlock=pycodeYYtext;
                                       }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 1250 "pycode.l"
{
					  codifyLines(pycodeYYtext);
					  if ( g_noSuiteFound ) 
					  {
                                            // printf("New suite to capture! [%d]\n", g_yyLineNr);
					    BEGIN ( SuiteCaptureIndent );
					  }
                                       }
	YY_BREAK


case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 1261 "pycode.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1266 "pycode.l"
{
                                 // This state lasts momentarily,
                                 // to check the indentation
                                 // level that is about to be
                                 // used.
				 codifyLines(pycodeYYtext);
				 g_indents.push(pycodeYYleng);
                                 // printf("Captured indent of %d [line %d]\n", pycodeYYleng, g_yyLineNr);
				 BEGIN( Suite );
                               }
	YY_BREAK


case 37:
YY_RULE_SETUP
#line 1280 "pycode.l"
{
                                 // This implements poor
				 // indentation-tracking;
                                 // should be improved.
				 // (translate tabs to space, etc)
  		                 codifyLines(pycodeYYtext);
                                 adjustScopesAndSuites((int)pycodeYYleng);
                               }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 1289 "pycode.l"
{
                                 // If this ever succeeds,
				 // it means that this is
				 // a blank line, and
				 // can be ignored.
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1297 "pycode.l"
{
                                 // Default rule; matches
				 // the empty string, assuming
				 // real text starts here.
				 // Just go straight to Body.
                                 adjustScopesAndSuites(0);
                               }
	YY_BREAK

case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 1307 "pycode.l"
{
                                 codifyLines(pycodeYYtext);
			         BEGIN( SuiteMaintain );
		               }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1311 "pycode.l"
{
  			         codify(pycodeYYtext);
                               }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 1314 "pycode.l"
{
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
// Single quoted string like 'That\'s a """nice""" string!'
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1319 "pycode.l"
{ // line continuation
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1322 "pycode.l"
{ // escaped char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 1325 "pycode.l"
{ // triple double quotes
  		                 codify(pycodeYYtext);
      			       }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1328 "pycode.l"
{ // end of the string
  		                 codify(pycodeYYtext);
				 endFontClass();
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1333 "pycode.l"
{ // normal chars
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1336 "pycode.l"
{ // normal char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK

// Double quoted string like "That's \"a '''nice'''\" string!"
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1342 "pycode.l"
{ // line continuation
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1345 "pycode.l"
{ // escaped char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1348 "pycode.l"
{ // triple single quotes
  		                 codify(pycodeYYtext);
      			       }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1351 "pycode.l"
{ // end of the string
  		                 codify(pycodeYYtext);
				 endFontClass();
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1356 "pycode.l"
{ // normal chars
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1359 "pycode.l"
{ // normal char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK


case 55:
#line 1366 "pycode.l"
case 56:
YY_RULE_SETUP
#line 1366 "pycode.l"
{
  		          codify(pycodeYYtext);
			  if (g_doubleQuote==(pycodeYYtext[0]=='"')) 
			  {
			    endFontClass();
			    BEGIN(g_stringContext);
			  }
		       }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1374 "pycode.l"
{
			 codifyLines(pycodeYYtext);
		       }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1377 "pycode.l"
{
			 codifyLines(pycodeYYtext);
                       }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1380 "pycode.l"
{
                         codify(pycodeYYtext);
                       }
	YY_BREAK

/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
  		                 codify(pycodeYYtext);
				 // printf("[pycode] '%s' [ state %d ]  [line %d] no match\n",
				 //       pycodeYYtext, YY_START, g_yyLineNr);

				 //endFontClass();
				 BEGIN(Body);					
                               }
   */
case 60:
YY_RULE_SETUP
#line 1396 "pycode.l"
{
				 if (YY_START==SingleQuoteString) REJECT;
				 startFontClass("stringliteral");
				 g_stringContext=YY_START;
				 g_doubleQuote=pycodeYYtext[pycodeYYleng-1]=='"';
				 codify(pycodeYYtext);
				 BEGIN(TripleString);
                               }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1404 "pycode.l"
{
				 if (YY_START==DoubleQuoteString) REJECT;
				 startFontClass("stringliteral");
				 g_stringContext=YY_START;
				 g_doubleQuote=pycodeYYtext[pycodeYYleng-1]=='"';
				 codify(pycodeYYtext);
				 BEGIN(TripleString);
                               }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1412 "pycode.l"
{ // single quoted string
				 if (YY_START==SingleQuoteString ||
				     YY_START==DoubleQuoteString ||
				     YY_START==TripleString
				    )
				 {
				   REJECT;
				 }
  				 startFontClass("stringliteral");
				 g_stringContext=YY_START;
  		                 codify(pycodeYYtext);
				 BEGIN(SingleQuoteString);
  			       }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1425 "pycode.l"
{ // double quoted string
				 if (YY_START==SingleQuoteString ||
				     YY_START==DoubleQuoteString ||
				     YY_START==TripleString
				    )
				 {
				   REJECT;
				 }
  				 startFontClass("stringliteral");
				 g_stringContext=YY_START;
  		                 codify(pycodeYYtext);
				 BEGIN(DoubleQuoteString);
                               }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1438 "pycode.l"
{ // contents of current comment line
                                 g_docBlock+=pycodeYYtext;
  			       }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1441 "pycode.l"
{ // comment block (next line is also comment line)
				 g_docBlock+=pycodeYYtext; 
   			       }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1444 "pycode.l"
{ // comment block ends at the end of this line
                                 // remove special comment (default config)
				 if (Config_getBool(STRIP_CODE_COMMENTS))
				 {
				    g_yyLineNr+=((QCString)g_docBlock).contains('\n');
				    g_endComment=TRUE;
				  }
				  else // do not remove comment
				  {
				    startFontClass("comment");
				    codifyLines(g_docBlock);
				    endFontClass();
				  }
				  unput(*pycodeYYtext);
				  yy_pop_state();
			       }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1460 "pycode.l"
{
  				 if (YY_START==SingleQuoteString || 
				     YY_START==DoubleQuoteString || 
				     YY_START==TripleString
				    )
				 {
				   REJECT;
				 }
                                 yy_push_state(YY_START);
				 BEGIN(DocBlock);
				 g_docBlock=pycodeYYtext;
                               }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1472 "pycode.l"
{ // normal comment
  				 if (YY_START==SingleQuoteString || 
				     YY_START==DoubleQuoteString || 
				     YY_START==TripleString
				    )
				 {
				   REJECT;
				 }
                                 startFontClass("comment");
                                 codifyLines(pycodeYYtext);
                                 endFontClass();
                               }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1484 "pycode.l"
{
				  if (g_endComment)
				  {
				    g_endComment=FALSE;
				  }
				  else
				  {
				    codifyLines(pycodeYYtext);
				  }
				 //printf("[pycode] %d NEWLINE [line %d] no match\n",
				 //       YY_START, g_yyLineNr);

				 //endFontClass();
				 BEGIN(Body);
                               }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1500 "pycode.l"
{
  		                 codify(pycodeYYtext);
				 BEGIN(Body);					
  			       }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1504 "pycode.l"
{
  		                 codify(pycodeYYtext);
				 // printf("[pycode] '%s' [ state %d ]  [line %d] no match\n",
				 //        pycodeYYtext, YY_START, g_yyLineNr);

				 //endFontClass();
				 BEGIN(Body);					
                               }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Body):
case YY_STATE_EOF(FunctionDec):
case YY_STATE_EOF(FunctionParams):
case YY_STATE_EOF(ClassDec):
case YY_STATE_EOF(ClassInheritance):
case YY_STATE_EOF(Suite):
case YY_STATE_EOF(SuiteCaptureIndent):
case YY_STATE_EOF(SuiteStart):
case YY_STATE_EOF(SuiteMaintain):
case YY_STATE_EOF(SuiteContinuing):
case YY_STATE_EOF(LongString):
case YY_STATE_EOF(SingleQuoteString):
case YY_STATE_EOF(DoubleQuoteString):
case YY_STATE_EOF(TripleString):
case YY_STATE_EOF(DocBlock):
#line 1513 "pycode.l"
{
                                 if (YY_START == DocBlock) {
                                   if (!Config_getBool(STRIP_CODE_COMMENTS))
                                   {
                                     startFontClass("comment");
                                     codifyLines(g_docBlock);
                                     endFontClass();
                                   }
                                 }
                                 yyterminate();
                               }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1524 "pycode.l"
ECHO;
	YY_BREAK
#line 3226 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pycode.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pycodeYYin at a new source and called
			 * pycodeYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pycodeYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pycodeYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pycodeYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pycodeYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pycodeYYrestart(pycodeYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pycodeYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 564 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 564 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 563);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up pycodeYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pycodeYYrestart(pycodeYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pycodeYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pycodeYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pycodeYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pycodeYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE );
	}

	pycodeYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pycodeYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pycodeYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pycodeYYpop_buffer_state();
	 *		pycodeYYpush_buffer_state(new_buffer);
     */
	pycodeYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pycodeYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pycodeYYwrap()) processing, but the only time this flag
	 * is looked at is after pycodeYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pycodeYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pycodeYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pycodeYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pycodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pycodeYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pycodeYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pycodeYY_create_buffer()
 * 
 */
    void pycodeYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pycodeYYfree((void *) b->yy_ch_buf  );

	pycodeYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pycodeYYrestart() or at EOF.
 */
    static void pycodeYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pycodeYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pycodeYY_init_buffer was _probably_
     * called from pycodeYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pycodeYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pycodeYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pycodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pycodeYYensure_buffer_stack();

	/* This block is copied from pycodeYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pycodeYY_switch_to_buffer. */
	pycodeYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pycodeYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pycodeYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pycodeYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pycodeYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pycodeYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pycodeYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pycodeYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pycodeYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pycodeYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pycodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pycodeYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pycodeYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pycodeYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pycodeYY_scan_string (yyconst char * yystr )
{
    
	return pycodeYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pycodeYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pycodeYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pycodeYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pycodeYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pycodeYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) pycodeYYalloc(new_size  );

		else
			(yy_start_stack) = (int *) pycodeYYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pycodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pycodeYYtext[pycodeYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pycodeYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pycodeYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pycodeYYget_lineno  (void)
{
        
    return pycodeYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pycodeYYget_in  (void)
{
        return pycodeYYin;
}

/** Get the output stream.
 * 
 */
FILE *pycodeYYget_out  (void)
{
        return pycodeYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pycodeYYget_leng  (void)
{
        return pycodeYYleng;
}

/** Get the current token.
 * 
 */

char *pycodeYYget_text  (void)
{
        return pycodeYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pycodeYYset_lineno (int  line_number )
{
    
    pycodeYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pycodeYY_switch_to_buffer
 */
void pycodeYYset_in (FILE *  in_str )
{
        pycodeYYin = in_str ;
}

void pycodeYYset_out (FILE *  out_str )
{
        pycodeYYout = out_str ;
}

int pycodeYYget_debug  (void)
{
        return pycodeYY_flex_debug;
}

void pycodeYYset_debug (int  bdebug )
{
        pycodeYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pycodeYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pycodeYYin = stdin;
    pycodeYYout = stdout;
#else
    pycodeYYin = (FILE *) 0;
    pycodeYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pycodeYYlex_init()
     */
    return 0;
}

/* pycodeYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pycodeYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pycodeYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pycodeYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pycodeYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        pycodeYYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    pycodeYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pycodeYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pycodeYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pycodeYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pycodeYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pycodeYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1524 "pycode.l"



/*@ ----------------------------------------------------------------------------
 */

void resetPythonCodeParserState() 
{
  g_codeClassSDict.setAutoDelete(TRUE);
  g_codeClassSDict.clear();
  g_currentDefinition = 0;
  g_currentMemberDef = 0;
  g_doubleStringIsDoc = FALSE;
  g_paramParens = 0;
  g_indents.clear();
  BEGIN( Body );
}

/*!
  Examines current stack of white-space indentations;
  re-syncs the parser with the correct scope.
*/
static void adjustScopesAndSuites(unsigned indentLength) 
{
  // States to pop
  if (!g_indents.isEmpty() && indentLength < g_indents.top()) 
  {
    while (!g_indents.isEmpty() && indentLength < g_indents.top()) 
    {
      // printf("Exited scope indent of [%d]\n", g_indents.top());
      g_indents.pop(); // Pop the old suite's indentation

      g_currentMemberDef=0;
      if (g_currentDefinition) 
	g_currentDefinition=g_currentDefinition->getOuterScope();
    }
  }

  // Are there any remaining indentation levels for suites?
  if (!g_indents.isEmpty()) 
  {
    BEGIN( Suite );
  }
  else 
  {
    BEGIN( Body );
  }
}

void parsePythonCode(CodeOutputInterface &od,const char * /*className*/,
                 const QCString &s,bool exBlock, const char *exName,
                 FileDef *fd,int startLine,int endLine,bool inlineFragment,
                 const MemberDef *,bool,const Definition *searchCtx,bool collectXRefs) 
{

  //printf("***parseCode()\n");
  
  //--------------------------------------
  if (s.isEmpty()) return;
  printlex(pycodeYY_flex_debug, TRUE, __FILE__, fd ? fd->fileName().data(): NULL);
  g_codeClassSDict.setAutoDelete(TRUE);
  g_code = &od;
  g_inputString   = s;
  g_inputPosition = 0;
  g_currentFontClass = 0;
  g_needsTermination = FALSE;
  g_searchCtx=searchCtx;
  g_collectXRefs=collectXRefs;
  if (startLine!=-1)
    g_yyLineNr    = startLine;
  else
    g_yyLineNr    = 1;
  if (endLine!=-1)
    g_inputLines  = endLine+1;
  else
    g_inputLines  = g_yyLineNr + countLines() - 1;
  
  
  g_exampleBlock  = exBlock; 
  g_exampleName   = exName;
  g_sourceFileDef = fd;

  bool cleanupSourceDef = FALSE;
  if (exBlock && fd==0)
  {
    // create a dummy filedef for the example
    g_sourceFileDef = createFileDef("",(exName?exName:"generated"));
    cleanupSourceDef = TRUE;
  }
  if (g_sourceFileDef) 
  {
    setCurrentDoc("l00001");
  }

  g_includeCodeFragment = inlineFragment;
  // Starts line 1 on the output  
  startCodeLine();

  pycodeYYrestart( pycodeYYin );

  pycodeYYlex();

  if (!g_indents.isEmpty()) 
  {
    // printf("Exited pysourceparser in inconsistent state!\n");
  }

  if (g_needsTermination)
  {
    endCodeLine();
  }
  if (cleanupSourceDef)
  {
    // delete the temporary file definition used for this example
    delete g_sourceFileDef;
    g_sourceFileDef=0;
  }
  printlex(pycodeYY_flex_debug, FALSE, __FILE__, fd ? fd->fileName().data(): NULL);
  return;
}

//----------------------------------------------------------------------------

void PythonCodeParser::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    SrcLangExt /*lang*/,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    const MemberDef *memberDef,
    bool showLineNumbers,
    const Definition *searchCtx,
    bool collectXRefs
    )
{
  ::parsePythonCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                    fileDef,startLine,endLine,inlineFragment,memberDef,
                    showLineNumbers,searchCtx,collectXRefs);
}

void PythonCodeParser::resetCodeParserState()
{
  ::resetPythonCodeParserState();
}


#include "pycode.l.h"

