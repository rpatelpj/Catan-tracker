#line 2 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/commentcnv.cpp"
#line 22 "commentcnv.l"
#include <stdint.h>



#line 8 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/commentcnv.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentcnvYYrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentcnvYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void commentcnvYYrestart (FILE *input_file ,yyscan_t yyscanner );
void commentcnvYY_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE commentcnvYY_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void commentcnvYY_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void commentcnvYY_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void commentcnvYYpop_buffer_state (yyscan_t yyscanner );

static void commentcnvYYensure_buffer_stack (yyscan_t yyscanner );
static void commentcnvYY_load_buffer_state (yyscan_t yyscanner );
static void commentcnvYY_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER commentcnvYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE commentcnvYY_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE commentcnvYY_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *commentcnvYYalloc (yy_size_t ,yyscan_t yyscanner );
void *commentcnvYYrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void commentcnvYYfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer commentcnvYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentcnvYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentcnvYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[430] =
    {   0,
        1,    1,   47,   47,   35,   35,   35,   35,   74,   74,
       94,   93,    1,   28,   93,   10,   93,   28,   93,    8,
       28,   93,   18,   28,   93,    9,   28,   93,    1,   28,
       93,    2,   28,   93,   28,   93,   28,   93,   28,   93,
       41,   93,   42,   93,   40,   41,   93,   41,   93,   45,
       93,   46,   93,   44,   45,   93,   45,   93,   70,   93,
       93,   93,   47,   56,   93,   50,   93,   56,   93,   56,
       93,   48,   56,   93,   47,   56,   93,   56,   93,   56,
       93,   56,   93,   47,   56,   93,   56,   93,   47,   56,
       93,   56,   93,   56,   93,   56,   93,   35,   38,   93,

       36,   93,   38,   93,   38,   93,   35,   38,   93,   38,
       93,   38,   93,   38,   93,   30,   38,   93,   31,   38,
       93,   38,   93,   35,   38,   93,   38,   93,   74,   92,
       93,   75,   93,   73,   92,   93,   74,   92,   93,   92,
       93,   74,   92,   93,   92,   93,   74,   92,   93,   74,
       92,   93,   74,   92,   93,   74,   92,   93,   81,   93,
       79,   81,   93,   86,   91,   93,   88,   93,   91,   93,
       87,   91,   93,   89,   91,   93,   90,   91,   93,   86,
       91,   93,   86,   91,   93,    1,    6,   20,   18,    1,
        7,    1,   17,   39,   43,   47,   55,   53,   54,   48,

       48,   52,   47,   51,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   47,   47,   35,   35,
       35,   34,   74,   75,   72,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   79,   86,   85,   86,   86,   86,
        4,    6,    5,    7,    1,   19,   17,   17,   15,16396,
       62,   49,   76,   82,   83,   82,   82,   82,   26,   26,
       83,   82,   82,   82,   82,   82,   82,   82,   82,   47,
       24,   24,   29,   37,   32,   32,   34,   71,   74,   74,
       24,   74,   24,   74,   86,16468,    3,   16,   15,   15,
    16396,   65,16448,16447,16452,16443,   57,   76,   76,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   47,   24,   24,   32,   32,   74,   74,   24,   74,
       24,   74, 8276,   86, 8276,   15,16451,16451,16450,16451,
    16453,16445,16445,   58,16445,16445, 8256, 8255, 8260, 8251,
       82,   82,   25,   25,   83,   82,   82,   82,   82,   82,
       82,   82,   82,   47,   74,   74, 8259, 8258, 8261, 8253,
       21,   77,   77,   77,   80,   77,   83,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   47,   74,   74,   60,
     8259,   60, 8253,   80,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   47,   23,   33,   74,   74,   11,   11,

       11,   60, 8258,   22,   82,   82,   82,   82,   82,   82,
       82,   74,   14, 8204, 8204, 8204,   14,   82,   78,   78,
       83,   82,   27,   27,   83,   82,   82,   13,   15
    } ;

static yyconst flex_int16_t yy_accept[514] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   16,   18,   20,   23,   26,
       29,   32,   35,   37,   39,   41,   43,   45,   48,   50,
       52,   54,   57,   59,   61,   62,   63,   66,   68,   70,
       72,   75,   78,   80,   82,   84,   87,   89,   92,   94,
       96,   98,  101,  103,  105,  107,  110,  112,  114,  116,
      119,  122,  124,  127,  129,  132,  134,  137,  140,  142,
      145,  147,  150,  153,  156,  159,  161,  164,  167,  169,
      171,  174,  177,  180,  183,  186,  187,  187,  188,  189,

      189,  190,  191,  192,  192,  192,  193,  193,  194,  194,
      195,  196,  196,  196,  196,  196,  196,  197,  198,  198,
      199,  200,  200,  201,  202,  203,  204,  204,  205,  205,
      205,  205,  205,  206,  207,  208,  209,  210,  211,  212,
      213,  214,  215,  216,  217,  218,  218,  219,  219,  219,
      219,  219,  219,  220,  220,  220,  221,  221,  221,  221,
      221,  221,  222,  222,  223,  224,  225,  226,  227,  227,
      228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
      238,  239,  240,  241,  241,  243,  243,  243,  245,  246,
      247,  248,  249,  249,  250,  250,  250,  251,  251,  252,

      252,  252,  253,  253,  253,  253,  254,  255,  256,  257,
      258,  259,  260,  262,  263,  264,  265,  266,  267,  268,
      269,  270,  271,  271,  272,  273,  273,  274,  275,  275,
      276,  277,  278,  279,  280,  281,  283,  285,  287,  288,
      289,  289,  290,  290,  290,  291,  292,  293,  293,  293,
      294,  295,  296,  297,  298,  298,  298,  298,  298,  299,
      300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
      310,  311,  312,  313,  313,  314,  315,  315,  315,  316,
      317,  318,  319,  321,  323,  325,  326,  326,  326,  326,
      326,  327,  327,  327,  327,  327,  328,  329,  330,  331,

      332,  333,  334,  335,  335,  336,  337,  337,  338,  338,
      339,  339,  340,  340,  341,  341,  341,  341,  342,  343,
      344,  346,  347,  348,  349,  350,  351,  352,  353,  354,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  356,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  359,  359,
      359,  359,  360,  360,  361,  361,  361,  361,  362,  362,
      362,  363,  364,  366,  368,  369,  370,  371,  372,  373,
      374,  375,  376,  377,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  379,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  382,  382,
      384,  384,  384,  384,  385,  386,  387,  388,  389,  390,
      391,  392,  393,  394,  395,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  397,  398,  399,  400,  401,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  404,  405,
      405,  406,  407,  408,  409,  410,  411,  412,  412,  412,
      412,  412,  412,  412,  412,  413,  414,  414,  415,  416,
      417,  418,  419,  420,  422,  423,  424,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  430,  430
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   10,
       10,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
        1,   21,    1,   22,   23,   23,   24,   25,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       26,   27,   28,    1,   23,   29,   30,   31,   32,   33,

       34,   35,   23,   36,   37,   23,   38,   39,   40,   41,
       42,   23,   23,   43,   44,   45,   46,   47,   23,   48,
       49,   23,   50,   51,   52,   53,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    1,    8,
        7,    9,   10,    7,   11,   12,   13,   14,    1,   15,
        1,   16,   17,   17,   17,    1,   18,    1,   19,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   20,
        8,   21,   22
    } ;

static yyconst flex_int16_t yy_base[571] =
    {   0,
        0,    0,    0,   30,    2,   13,    7,   19, 2369,   46,
       63,  115,  166,  218,  269,  321,  374,  117,  427,    0,
      115,  479, 2371, 2373,    0, 2373,  118, 2363, 2361, 2373,
      529, 2373, 2353,    9, 2373, 2373, 2373, 2373,    0, 2373,
     2373, 2373,    0,   26,  123, 2350,    0,  121, 2373, 2359,
       38,  556,   41, 2325,  587,  636, 2342,  128,  129, 2334,
     2309,    0, 2373, 2373,   25,  130, 2344, 2326, 2330, 2373,
     2373, 2305,  143, 2340, 2353, 2373, 2338,  688, 2342,  741,
        0, 2323,  147,   10,  134, 2373,    0,    0, 2373, 2335,
     2373, 2373, 2373,  149, 2334,    0, 2347, 2373, 2346, 2341,

     2373,  792, 2373, 2344, 2343,  817, 2339,   13,  156, 2373,
     2373,  169, 2327,  173, 2326,  155,    0, 2373,  189, 2373,
     2373, 2335,   44,  167, 2373, 2311,    0, 2373,  168, 2318,
      176,    0, 2289,  157,  159,  155,  199,  165,  162,  183,
      172,  179,  180,  103,  201, 2306,  232,  234, 2308, 2283,
     2306, 2281,    0, 2292,  223,  239, 2315, 2314, 2289, 2300,
     2275,  241, 2310,  236, 2323, 2373, 2373,    0, 2313,  226,
      237, 2287,  252,  174,  199,  247,  225,    0,    0, 2373,
      277, 2306,  256, 2319, 2373, 2315, 2317, 2373,  842, 2373,
     2373, 2302, 2315, 2373, 2314,  257,  138,  282, 2296, 2307,

      266, 2373, 2298,    0,  189,  287, 2263, 2373,  260,  252,
        2, 2373, 2373,  224,  250,  262,  275,  278,  279,  261,
      267,  288, 2270, 2282, 2257, 2276, 2373, 2373, 2275, 2278,
     2222, 2373, 2373,  293, 2192,  305,  311,  304, 2373, 2373,
     2214,  330,  317, 2213,  334,  338,  481, 2206,  485, 2163,
     2162, 2160, 2050, 2373,  341,    0, 1905,  318,  344,  357,
      311,  319,  322,  869,  460,  450,  459,  318,  469,  320,
      454,  471,  469, 1822, 1822, 1797,  540,  484, 1819, 1794,
      512, 1801,  491,  492,  511,    0,  537, 1828,  530, 1841,
      557, 1840,  587,  589,  524, 1839,  646,  658,  495, 1838,

     1837,  799, 2373,  552,  808,  519, 1835, 2373, 1634, 2373,
     1633, 2373, 1631, 2373, 1609,    0,  503,  922,  476, 2373,
     2373,  543,  553,  317,  555,  602,  536,  609,  615,  571,
     1585, 1573, 1569, 1582, 1579, 1563, 1572, 1565, 1560, 1554,
     1550, 1551,  631, 1545,  664,  565,  667, 1560,  810, 1557,
      973, 1561, 2373,  836,  550, 1557,  975, 2373,  765, 1556,
     1554, 2373, 1549, 2373,  979,  794, 1548, 1534, 1531,  632,
     2373,  862, 2373, 2373,  625,  636,  755,  766,  779,  783,
      632,  655,  797,  821,  983, 1513, 1501, 1493, 1496, 1501,
     1492, 1491, 1495, 1481, 1484, 1474,  820, 1468,    0,  987,

      989,  595,  981,  837, 1015, 1483, 1482, 2373, 1480, 2373,
      737,  833, 1023, 2373,  945,  566,  954,  955,  950,  958,
      963,  478,  972,  993, 2373, 1451, 1441, 1442, 1431, 1430,
     1440, 1428, 1414, 2373, 1011, 1404, 2373, 1033, 1323, 1034,
     1318,  639,    0, 1041, 1042, 1007, 1365, 2373, 2373,    0,
      998, 1069, 1000, 1002, 1122, 1015,  979, 1322, 1321, 1314,
     1319, 1180, 1190, 1178, 1178, 2373,  834, 2373, 1174, 1164,
     1211, 1012, 2373, 2373, 1008, 2373, 2373, 1171, 1171, 1169,
     1159, 1154, 1147, 1147, 1174, 1139,  996,  992,  971,  930,
      812,  777,  714, 1177, 1017,  641,  566,  561,  457, 1178,

      325,  231, 1179,  150, 1180,  107, 1181, 1184,   20,    1,
     2373, 2373, 1225, 1247, 1269, 1291, 1313, 1335, 1357, 1379,
     1401, 1423, 1445, 1467, 1488, 1510, 1532, 1544, 1561, 1578,
     1599, 1616, 1638, 1660, 1682, 1704, 1726, 1174, 1173, 1180,
     1748, 1770, 1792, 1814, 1188, 1835, 1852, 1874, 1896, 1918,
     1940, 1962, 1984, 2006, 2028, 1192, 2050, 2072, 2094, 2116,
     2138, 2150, 1193, 2167, 2189, 2201, 2218, 2240, 2262, 2284
    } ;

static yyconst flex_int16_t yy_def[571] =
    {   0,
      513,  513,  514,  514,  515,  515,  516,  516,  513,  513,
      512,   11,  517,  517,  517,  517,  512,   17,  512,   19,
      518,  518,  512,  512,  519,  512,  520,  512,  512,  512,
      521,  512,  512,  512,  512,  512,  512,  512,  522,  512,
      512,  512,  523,  512,  512,  512,  524,  525,  512,  512,
      526,  527,  512,  528,  512,  527,  512,  524,  512,  512,
      512,  529,  512,  512,  512,  529,  512,  512,  512,  512,
      512,  512,  529,  512,  530,  512,  512,  512,  512,  512,
       55,   78,  530,  530,  530,  512,  531,  532,  512,  512,
      512,  512,  512,  532,  532,  519,  520,  512,  533,  512,

      512,  521,  512,  534,  535,  536,  512,  512,  537,  512,
      512,  512,  512,  512,  512,  512,  524,  512,  525,  512,
      512,  512,  526,  526,  512,   56,  538,  512,  512,  528,
      528,  539,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,   56,  512,  524,  512,  512,  512,
      512,  512,  529,  512,  512,  529,  512,  512,  512,  512,
      512,  529,  512,  512,  530,  512,  512,   78,  512,   80,
       80,   78,  530,  530,  530,  530,  530,  531,  532,  512,
      532,  532,  532,  533,  512,  512,  534,  512,  536,  512,
      512,  512,  537,  512,  541,  537,  542,  512,  543,  512,

      544,  512,  538,  545,  528,  546,  540,  512,  540,  540,
      540,  512,  512,  540,  540,  540,  540,  540,  540,  540,
      540,   56,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,   80,   78,  530,  530,  547,  512,  512,
      541,  512,  537,  548,  549,  542,  550,  512,  551,  552,
      553,  554,  555,  512,  512,  556,  545,  528,  512,  546,
      540,  540,  540,  512,  540,  540,  540,  540,  540,  540,
      540,  540,   56,  512,  512,  512,  512,  512,  512,  512,
       80,   78,  530,  530,  547,  557,  512,  512,  537,  548,
      512,  549,  549,  512,  549,  558,  558,  559,  558,  560,

      561,  561,  512,  512,  561,  561,  552,  512,  553,  512,
      554,  512,  555,  512,  562,  563,  528,  512,  540,  512,
      512,  540,  540,  540,  540,  540,  540,  540,  540,   56,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,   80,   78,  512,  537,  512,  512,  512,  512,
      549,  558,  512,  558,  558,  559,  559,  512,  559,  564,
      560,  512,  561,  512,  561,  561,  565,  562,  566,  528,
      512,  512,  512,  512,  540,  540,  540,  540,  540,  540,
      540,  540,  540,   56,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,   80,   78,  567,  567,

      512,  537,  512,  512,  549,  568,  564,  512,  565,  512,
      566,  528,  512,  512,  540,  540,  540,  540,  540,  540,
      540,  540,  540,   56,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,   80,   78,  512,  512,  512,  512,
      512,  537,  569,  569,  549,  549,  568,  512,  512,  528,
      540,  512,  540,  540,  512,  540,  540,  512,  512,  512,
      512,  512,  512,  512,   80,  512,  537,  512,  512,  512,
      549,  540,  512,  512,  540,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  537,  540,  512,  512,  512,  512,
      512,  512,  512,  537,  540,  512,  512,  512,  512,  537,

      512,  512,  537,  512,  537,  512,  537,  537,  570,  570,
      512,    0,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512
    } ;

static yyconst flex_int16_t yy_nxt[2427] =
    {   0,
      512,  512,   26,  511,   37,   27,   28,   29,   38,   41,
       30,   31,  166,   32,   33,   37,   34,   42,  191,   38,
      108,   41,  511,   31,  192,  109,   35,  112,   39,   42,
      112,   31,   26,   43,  265,   27,   28,   29,  176,   39,
       30,   31,  113,   32,   33,   43,   34,   45,   44,  124,
       45,  208,  128,   31,  125,  512,   35,  129,  154,  155,
      512,   31,   46,   47,   47,   48,   47,   49,   49,   50,
       47,   47,   47,   47,   51,   52,   47,   52,   52,   53,
       52,   47,   54,   47,   55,   52,   52,   52,   47,   55,
       47,   49,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   56,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   57,   47,   47,   49,   58,   89,   83,   59,
       98,   83,  119,   99,  114,  119,   90,  114,  120,  147,
      148,  156,  148,  148,  156,  121,  166,   99,   99,  115,
      245,   91,  221,   60,  162,   84,  157,  162,  173,  166,
      181,  173,  208,  181,  246,  227,  149,  149,  194,  163,
      199,  195,  200,  196,   92,  182,   93,   61,   63,   85,
      112,  201,  197,  112,  114,  174,  166,  114,  124,  128,
      150,  150,   64,  125,  129,  113,  177,   65,  506,  115,
      119,  215,   65,  119,   64,  211,  120,  204,  209,  175,

      210,  166,  176,  121,  208,  205,  208,  212,  208,  214,
      204,  208,  216,  220,  208,   64,  218,   64,   64,   66,
       63,  208,   66,  219,  212,  258,  217,  166,  208,  208,
      126,  227,  208,  147,   67,  148,  148,  222,  148,   65,
      156,  232,  162,  156,   65,  162,   64,  204,  213,  166,
      227,  177,  232,  173,  166,  157,  173,  163,  204,  194,
      149,  238,  149,  266,  243,  170,  234,   64,  254,   64,
       64,   63,  238,  208,  227,  236,  170,  237,  181,  227,
      174,  181,  255,  263,  150,   64,  150,  247,  259,  248,
       68,  259,  261,  182,  267,   68,  264,   69,  249,  208,

      262,  208,  268,  271,  175,  272,  264,  166,  270,  208,
      208,  208,  269,  166,  204,  286,  208,  126,   70,  194,
       71,   72,   73,   63,  208,   73,  273,  208,  208,  281,
      286,  287,  170,  283,  287,  293,  294,   74,  293,  204,
      245,  289,   68,  254,  264,  259,  288,   68,  259,   69,
      295,  318,  319,  286,  246,  286,  317,  255,  259,  325,
      208,  259,  327,  284,  378,  504,  208,  208,  208,  208,
       70,  208,   71,   72,   75,   75,   76,   75,   75,   75,
       75,   75,   75,   75,   75,   77,   78,   75,   78,   78,
       79,   78,   75,   80,   75,   81,   78,   78,   78,   75,

       81,   75,   75,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   82,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   75,   75,   75,   75,   86,   87,   24,
       86,   87,   87,   86,   86,   86,   87,   86,   86,   86,
       86,   87,   87,   86,   87,   86,   86,   86,   86,   87,
       87,   87,   86,   86,   86,   86,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   86,   87,   86,   86,
       94,   89,  297,   94,  328,  297,  302,  303,  323,  302,
       90,  322,  324,  166,  166,   95,  227,  353,  126,  208,

      298,  304,  299,  208,  305,   91,  306,  299,  208,  208,
      326,  306,  329,  330,  457,  339,  340,  375,  208,  283,
      208,  364,  286,  341,  204,  208,  294,  208,   92,  342,
       93,  103,  194,  204,  104,  105,  105,  286,  287,  105,
      351,  287,  105,  105,  284,  105,  360,  370,  106,  106,
      343,  170,  353,  288,  303,  105,  117,  117,  347,  117,
      286,  347,  286,  117,  117,  117,  117,  194,  304,  117,
      367,  346,  332,  348,  117,  333,  117,  127,  334,  335,
      381,  117,  336,  117,  376,  208,  337,  338,  293,  294,
      349,  293,  208,  349,  377,  379,  402,  194,  452,  502,

      126,  360,  208,  295,  208,  350,  117,  117,  132,  133,
      133,  133,  384,  132,  227,  208,  133,  133,  134,  135,
      136,  137,  138,  133,  133,  139,  140,  133,  133,  141,
      142,  133,  133,  143,  144,  133,  117,  117,  382,  117,
      442,  194,  380,  117,  117,  117,  117,  354,  353,  117,
      354,  208,  204,  204,  117,  383,  117,  127,  208,  357,
      358,  117,  357,  117,  208,  145,  415,  355,  347,  399,
      170,  347,  355,  412,  208,  397,  416,  421,  467,  359,
      400,  208,  501,  348,  359,  208,  117,  117,  165,  165,
      166,  165,  165,  165,  165,  165,  165,  165,  165,  422,

      168,  165,  168,  168,  208,  168,  165,  165,  165,  127,
      168,  168,  168,  165,  401,  165,  165,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  165,  165,  165,
      165,  165,  165,  166,  165,  165,  165,  165,  165,  165,
      165,  165,  316,  170,  165,  170,  170,  449,  170,  165,
      165,  165,  227,  170,  170,  170,  165,  358,  165,  165,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      171,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      165,  165,  165,  165,  103,  417,  364,  105,  105,  105,

      365,  364,  105,  365,  208,  105,  105,  418,  105,  365,
      364,  349,  365,  499,  349,  208,  406,  419,  105,  188,
      366,  420,  187,  187,  187,  366,  350,  187,  208,  366,
      187,  187,  208,  187,  366,  423,  194,  354,  353,  424,
      354,  204,  443,  187,  188,  367,  208,  187,  187,  187,
      126,  450,  187,  443,  204,  187,  187,  355,  187,  170,
      227,  435,  355,  413,  414,  413,  413,  485,  187,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  207,  320,  320,  320,
      320,  207,  207,  207,  320,  320,  320,  320,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  321,  320,
      320,  320,  371,  372,  373,  372,  372,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  207,
      371,  371,  371,  371,  207,  207,  207,  371,  371,  371,
      371,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  374,  371,  371,  371,  294,  357,  358,  227,  357,
      365,  364,  451,  365,  425,  425,  443,  425,  438,  405,
      440,  438,  453,  440,  208,  454,  359,  444,  455,  208,

      366,  359,  456,  208,  208,  366,  455,  208,  439,  294,
      441,  498,  208,  439,  512,  441,  445,  294,  455,  445,
      455,  208,  126,  405,  413,  414,  413,  413,  208,  465,
      497,  401,  204,  496,  440,  440,  446,  440,  440,  472,
      475,  446,  469,  445,  294,  469,  445,  208,  455,  208,
      170,  208,  486,  264,  441,  441,  455,  208,  471,  441,
      441,  208,  470,  446,  208,  455,  208,  470,  446,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  207,  473,  473,  473,
      473,  207,  207,  207,  473,  473,  473,  473,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  474,  473,
      473,  473,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  207,
      476,  476,  476,  476,  207,  207,  207,  476,  476,  476,
      476,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  477,  476,  476,  476,  440,  194,  495,  440,  194,
      194,  194,  194,  194,  203,  493,  194,  203,  208,  206,
      203,  492,  491,  207,  206,  441,  207,  490,  257,  207,

      441,  257,  315,  369,  257,  315,  369,  503,  315,  369,
      489,  488,  487,  294,  494,  466,  507,  170,  484,  483,
      482,  500,  508,  505,  509,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   96,   96,  481,
       96,  480,  479,  478,   96,   96,   96,  448,   96,  466,
       96,   96,   96,   96,  466,   96,   96,   96,   96,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  110,  110,  512,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  111,  111,  434,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  117,  117,  464,
      463,  462,  461,  117,  117,  460,  117,  117,  117,  459,
      117,  458,  410,  117,  408,  448,  436,  117,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      123,  123,  434,  123,  123,  434,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  434,  123,  433,  123,  432,
      123,  123,  126,  126,  431,  430,  429,  428,  126,  126,
      427,  126,  126,  126,  426,  126,  316,  126,  126,  256,
      410,  364,  126,  130,  130,  130,  362,  130,  408,  358,
      130,  153,  153,  353,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  404,  153,  153,  403,  153,  165,  165,
      165,  165,  165,  165,  165,  165,  398,  165,  165,  165,
      396,  165,  165,  395,  165,  394,  165,  165,  165,  165,

      178,  393,  178,  178,  392,  391,  178,  390,  389,  178,
      178,  388,  178,  387,  386,  178,  179,  179,  385,  179,
      179,  179,  179,  179,  256,  179,  179,  179,  179,  179,
      179,  179,  179,  314,  179,  312,  310,  179,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  260,  308,  260,  364,
      362,  353,  294,  291,  345,  344,  280,  279,  260,  276,
      275,  260,  285,  285,  331,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  292,  292,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  296,  296,
      316,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      286,  286,  314,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      368,  368,  312,  368,  310,  308,  368,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  411,  411,  300,  411,  291,  242,  411,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      282,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  280,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  279,  278,  277,  276,
      275,  274,  208,  256,  252,  251,  242,  194,  240,  188,
      239,  185,  183,  235,  233,  166,  164,  231,  230,  229,
      228,  158,  226,  225,  224,  152,  151,  223,  208,  204,
      126,  202,  116,  198,  190,  103,  188,  186,  185,   98,
      183,  180,  172,  169,  167,  166,  164,  161,  160,  159,
      158,  152,  151,  146,  131,  122,  116,  107,  101,  100,
      512,   44,   23,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512
    } ;

static yyconst flex_int16_t yy_chk[2427] =
    {   0,
        0,    0,    3,  510,    5,    3,    3,    3,    5,    7,
        3,    3,   84,    3,    3,    6,    3,    7,  108,    6,
       34,    8,  509,    3,  108,   34,    3,   44,    5,    8,
       44,    3,    4,    7,  211,    4,    4,    4,   84,    6,
        4,    4,   44,    4,    4,    8,    4,   10,   10,   51,
       10,  211,   53,    4,   51,  123,    4,   53,   65,   65,
      123,    4,   10,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   21,   18,   12,
       27,   18,   48,   27,   45,   48,   21,   45,   48,   58,
       59,   66,   58,   59,   66,   48,   85,   27,   27,   45,
      197,   21,  144,   12,   73,   18,   66,   73,   83,   83,
       94,   83,  144,   94,  197,  506,   58,   59,  109,   73,
      116,  109,  116,  109,   21,   94,   21,   12,   13,   18,
      112,  116,  109,  112,  114,   83,  174,  114,  124,  129,
       58,   59,   13,  124,  129,  112,   85,   13,  504,  114,
      119,  139,   13,  119,   13,  136,  119,  131,  134,   83,

      135,  175,  174,  119,  136,  131,  134,  137,  135,  138,
      205,  139,  140,  143,  138,   13,  141,   13,   13,   14,
       14,  141,   14,  142,  137,  205,  140,  177,  142,  143,
      145,  155,  140,  147,   14,  148,  147,  145,  148,   14,
      156,  164,  162,  156,   14,  162,   14,  170,  137,  176,
      155,  175,  164,  173,  173,  156,  173,  162,  171,  196,
      147,  183,  148,  214,  196,  170,  171,   14,  201,   14,
       14,   15,  183,  214,  155,  176,  171,  177,  181,  502,
      173,  181,  201,  210,  147,   15,  148,  198,  206,  198,
       15,  206,  209,  181,  215,   15,  210,   15,  198,  215,

      209,  210,  216,  220,  173,  221,  217,  236,  219,  209,
      220,  216,  218,  237,  234,  238,  221,  222,   15,  243,
       15,   15,   16,   16,  217,   16,  222,  218,  219,  234,
      238,  242,  234,  236,  242,  245,  245,   16,  245,  258,
      246,  243,   16,  255,  261,  259,  242,   16,  259,   16,
      245,  262,  263,  238,  246,  238,  258,  255,  260,  268,
      261,  260,  270,  237,  324,  501,  324,  268,  262,  270,
       16,  263,   16,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       22,   22,  247,   22,  271,  247,  249,  249,  266,  249,
       22,  265,  267,  283,  284,   22,  499,  299,  273,  266,

      247,  249,  247,  271,  249,   22,  249,  247,  267,  265,
      269,  249,  272,  273,  422,  278,  278,  319,  269,  283,
      272,  306,  285,  278,  317,  319,  295,  422,   22,  278,
       22,   31,  289,  281,   31,   31,   31,  285,  287,   31,
      295,  287,   31,   31,  284,   31,  299,  317,   31,   31,
      281,  281,  355,  287,  304,   31,   52,   52,  291,   52,
      285,  291,  285,   52,   52,   52,   52,  346,  304,   52,
      306,  289,  277,  291,   52,  277,   52,   52,  277,  277,
      327,   52,  277,   52,  322,  327,  277,  277,  293,  293,
      294,  293,  322,  294,  323,  325,  346,  402,  416,  498,

      330,  355,  323,  293,  325,  294,   52,   52,   55,   55,
       55,   55,  330,   55,  497,  416,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   56,   56,  328,   56,
      402,  442,  326,   56,   56,   56,   56,  297,  297,   56,
      297,  326,  343,  370,   56,  329,   56,   56,  328,  298,
      298,   56,  298,   56,  329,   56,  375,  297,  347,  345,
      343,  347,  297,  370,  375,  343,  376,  381,  442,  298,
      345,  381,  496,  347,  298,  376,   56,   56,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,  382,

       78,   78,   78,   78,  382,   78,   78,   78,   78,   78,
       78,   78,   78,   78,  345,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  411,   80,   80,   80,   80,  411,   80,   80,
       80,   80,  493,   80,   80,   80,   80,  359,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,  102,  377,  366,  102,  102,  102,

      302,  302,  102,  302,  377,  102,  102,  378,  102,  305,
      305,  349,  305,  492,  349,  378,  359,  379,  102,  106,
      302,  380,  106,  106,  106,  302,  349,  106,  379,  305,
      106,  106,  380,  106,  305,  383,  467,  354,  354,  384,
      354,  397,  404,  106,  189,  366,  383,  189,  189,  189,
      384,  412,  189,  404,  412,  189,  189,  354,  189,  397,
      491,  397,  354,  372,  372,  372,  372,  467,  189,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  351,  357,  357,  490,  357,
      365,  365,  415,  365,  385,  385,  403,  385,  400,  351,
      401,  400,  417,  401,  415,  418,  357,  403,  419,  419,

      365,  357,  421,  417,  418,  365,  420,  420,  400,  446,
      401,  489,  421,  400,  424,  401,  405,  405,  457,  405,
      423,  423,  424,  351,  413,  413,  413,  413,  457,  435,
      488,  403,  435,  487,  438,  440,  405,  438,  440,  451,
      454,  405,  444,  445,  445,  444,  445,  451,  453,  453,
      435,  454,  472,  456,  438,  440,  475,  475,  446,  438,
      440,  472,  444,  445,  456,  495,  495,  444,  445,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  469,  485,  486,  469,  494,
      500,  503,  505,  507,  538,  484,  508,  538,  486,  539,
      538,  483,  482,  540,  539,  469,  540,  481,  545,  540,

      469,  545,  556,  563,  545,  556,  563,  500,  556,  563,
      480,  479,  478,  471,  485,  470,  505,  465,  464,  463,
      462,  494,  507,  503,  508,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  519,  519,  461,
      519,  460,  459,  458,  519,  519,  519,  447,  519,  441,
      519,  519,  519,  519,  439,  519,  519,  519,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  522,  522,  436,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  523,  523,  433,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  524,  524,  432,
      431,  430,  429,  524,  524,  428,  524,  524,  524,  427,
      524,  426,  409,  524,  407,  406,  398,  524,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,

      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      526,  526,  396,  526,  526,  395,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  394,  526,  393,  526,  392,
      526,  526,  527,  527,  391,  390,  389,  388,  527,  527,
      387,  527,  527,  527,  386,  527,  369,  527,  527,  368,
      367,  363,  527,  528,  528,  528,  361,  528,  360,  356,
      528,  529,  529,  352,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  350,  529,  529,  348,  529,  530,  530,
      530,  530,  530,  530,  530,  530,  344,  530,  530,  530,
      342,  530,  530,  341,  530,  340,  530,  530,  530,  530,

      531,  339,  531,  531,  338,  337,  531,  336,  335,  531,
      531,  334,  531,  333,  332,  531,  532,  532,  331,  532,
      532,  532,  532,  532,  315,  532,  532,  532,  532,  532,
      532,  532,  532,  313,  532,  311,  309,  532,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,  535,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  546,  307,  546,  301,
      300,  296,  292,  290,  288,  282,  280,  279,  546,  276,
      275,  546,  547,  547,  274,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  550,  550,
      257,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      557,  557,  253,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  559,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      562,  562,  252,  562,  251,  250,  562,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  566,  566,  248,  566,  244,  241,  566,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      235,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  231,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  230,  229,  226,  225,
      224,  223,  207,  203,  200,  199,  195,  193,  192,  187,
      186,  184,  182,  172,  169,  165,  163,  161,  160,  159,
      158,  157,  154,  152,  151,  150,  149,  146,  133,  130,
      126,  122,  115,  113,  107,  105,  104,  100,   99,   97,
       95,   90,   82,   79,   77,   75,   74,   72,   69,   68,
       67,   61,   60,   57,   54,   50,   46,   33,   29,   28,
       23,    9,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "commentcnv.l"
/*****************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 26 "commentcnv.l"

  
#include <stdio.h>
#include <stdlib.h>

#include <qstack.h>
#include <qregexp.h>
#include <qtextstream.h>
#include <qglobal.h>

#include "bufstr.h"
#include "debug.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "condparser.h"

#include <assert.h>

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define ADDCHAR(c)    yyextra->outBuf->addChar(c)
#define ADDARRAY(a,s) yyextra->outBuf->addArray(a,s)
  
struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};
  
struct CommentCtx
{
  CommentCtx(int line) 
    : lineNr(line) {}
  int lineNr;
};
  
struct commentcnvYY_state
{
  BufStr * inBuf = 0;
  BufStr * outBuf = 0;
  int      inBufPos = 0;
  int      col = 0;
  int      blockHeadCol = 0;
  bool     mlBrief = FALSE;
  int      readLineCtx = 0;
  bool     skip = FALSE;
  QCString fileName;
  int      lineNr = 0;
  int      condCtx = 0;
  QStack<CondCtx> condStack;
  QStack<CommentCtx> commentStack;
  QCString blockName;
  int      lastCommentContext = 0;
  bool     inSpecialComment = FALSE;
  bool     inRoseComment= FALSE;
  int      stringContext = 0;
  int      charContext = 0;
  int      javaBlock = 0;
  bool     specialComment = FALSE;

  QCString aliasString;
  int      blockCount = 0;
  bool     lastEscaped = FALSE;
  int      lastBlockContext= 0;
  bool     pythonDocString = FALSE;
  int      nestingCount= 0;

  bool     vhdl = FALSE; // for VHDL old style --! comment

  SrcLangExt lang = SrcLangExt_Unknown;
  bool       isFixedForm = FALSE; // For Fortran
};

static const char *stateToString(int state);
static inline int computeIndent(const char *s);

static void replaceCommentMarker(yyscan_t yyscanner,const char *s,int len);
static inline void copyToOutput(yyscan_t yyscanner,const char *s,int len);
static void startCondSection(yyscan_t yyscanner,const char *sectId);
static void endCondSection(yyscan_t yyscanner);
static void handleCondSectionId(yyscan_t yyscanner,const char *expression);
static void replaceAliases(yyscan_t yyscanner,const char *s);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);
static void replaceComment(yyscan_t yyscanner,int offset);




#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);












#line 1338 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/commentcnv.cpp"

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define Verbatim 6
#define VerbatimCode 7
#define ReadLine 8
#define CondLine 9
#define ReadAliasArgs 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct commentcnvYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int commentcnvYYlex_init (yyscan_t* scanner);

int commentcnvYYlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentcnvYYlex_destroy (yyscan_t yyscanner );

int commentcnvYYget_debug (yyscan_t yyscanner );

void commentcnvYYset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE commentcnvYYget_extra (yyscan_t yyscanner );

void commentcnvYYset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *commentcnvYYget_in (yyscan_t yyscanner );

void commentcnvYYset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *commentcnvYYget_out (yyscan_t yyscanner );

void commentcnvYYset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t commentcnvYYget_leng (yyscan_t yyscanner );

char *commentcnvYYget_text (yyscan_t yyscanner );

int commentcnvYYget_lineno (yyscan_t yyscanner );

void commentcnvYYset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentcnvYYwrap (yyscan_t yyscanner );
#else
extern int commentcnvYYwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentcnvYYlex (yyscan_t yyscanner);

#define YY_DECL int commentcnvYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 141 "commentcnv.l"


#line 1584 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/commentcnv.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)commentcnvYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentcnvYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		commentcnvYY_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 513 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 512 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 143 "commentcnv.l"
{ /* eat anything that is not " / , or \n */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 146 "commentcnv.l"
{ /* eat , so we have a nice separator in long initialization lines */ 
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 149 "commentcnv.l"
{ /* start of python long comment */
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->pythonDocString = TRUE;
                                       yyextra->nestingCount=1;
                                       yyextra->commentStack.clear(); /*  to be on the save side */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(CComment);
                                       yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
				     }
                                   }
	YY_BREAK
case 4:
/* rule 4 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 164 "commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0; // Fortran doesn't have an end comment
                                       yyextra->commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
				     }
  				   }
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 178 "commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       /* check for fixed format; we might have some conditional as part of multiline if like C<5 .and. & */
                                       if (yyextra->isFixedForm && (yyextra->col == 0))
                                       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng); 
                                         yyextra->nestingCount=0; // Fortran doesn't have an end comment
                                         yyextra->commentStack.clear(); /* to be on the safe side */
				         BEGIN(CComment);
                                         yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
				       }
				       else
				       {
				         REJECT;
				       }
				     }
  				   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 200 "commentcnv.l"
{
  			             if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
				     }
                                   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 210 "commentcnv.l"
{
  			             if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       if (yyextra->col == 0)
                                       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng); 
				       }
				       else
				       {
				         REJECT;
				       }
				     }
                                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 227 "commentcnv.l"
{ /* start of a string */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->stringContext = YY_START;
				     BEGIN(SkipString); 
                                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 232 "commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->charContext = YY_START;
                                     if (yyextra->lang!=SrcLangExt_VHDL)
                                     {
				       BEGIN(SkipChar);
                                     }
  				   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 240 "commentcnv.l"
{ /* new line */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 244 "commentcnv.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 244 "commentcnv.l"
{ /* start C++ style special comment block */
  				     if (yyextra->mlBrief) 
				     {
				       REJECT; // bail out if we do not need to convert
				     }
				     else
				     {
				       int i=3;
				       if (yytext[2]=='/')
				       {
					 while (i<(int)yyleng && yytext[i]=='/') i++;
				       }
				       yyextra->blockHeadCol=yyextra->col;
				       copyToOutput(yyscanner,"/**",3); 
				       replaceAliases(yyscanner,yytext+i);
				       yyextra->inSpecialComment=TRUE;
				       //BEGIN(SComment); 
				       yyextra->readLineCtx=SComment;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 265 "commentcnv.l"
{ /* Start of Rational Rose ANSI C++ comment block */
                                     if (yyextra->mlBrief) REJECT;
                                     int i=17; //=strlen("//##Documentation");
				     yyextra->blockHeadCol=yyextra->col;
				     copyToOutput(yyscanner,"/**",3);
				     replaceAliases(yyscanner,yytext+i);
				     yyextra->inRoseComment=TRUE;
				     BEGIN(SComment);
  				   }
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 274 "commentcnv.l"
{ // next line contains an end marker, see bug 752712
				     yyextra->inSpecialComment=yytext[2]=='/' || yytext[2]=='!';
  				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 280 "commentcnv.l"
{ /* one line C++ comment */ 
				     yyextra->inSpecialComment=yytext[2]=='/' || yytext[2]=='!';
  				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
				   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 286 "commentcnv.l"
{ /* avoid matching next rule for empty C comment, see bug 711723 */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 289 "commentcnv.l"
{ /* start of a C comment */
                                     if ((yyextra->lang==SrcLangExt_Python) || (yyextra->lang==SrcLangExt_Tcl))
				     {
				       REJECT;
                                     }
  			             yyextra->specialComment=(int)yyleng==3;
                                     yyextra->nestingCount=1;
                                     yyextra->commentStack.clear(); /*  to be on the save side */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     BEGIN(CComment); 
                                     yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
                                   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 301 "commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0; // Python doesn't have an end comment for #
                                       yyextra->commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
				     }
  				   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 315 "commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->vhdl = TRUE;
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0;  // VHDL doesn't have an end comment
                                       yyextra->commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
				     }
  				   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 330 "commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0;  // Fortran doesn't have an end comment
                                       yyextra->commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
				     }
  				   }
	YY_BREAK
case 21:
#line 345 "commentcnv.l"
case 22:
YY_RULE_SETUP
#line 345 "commentcnv.l"
{ // Mail address, to prevent seeing e.g x@code-factory.org as start of a code block
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 348 "commentcnv.l"
{
                                     copyToOutput(yyscanner,"@code",5); 
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=1;
				     yyextra->blockName=&yytext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 355 "commentcnv.l"
{ /* start of markdown code block */
                                     if (!Config_getBool(MARKDOWN_SUPPORT))
                                     {
                                       REJECT;
                                     }
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     yyextra->lastCommentContext = YY_START;
                                     yyextra->javaBlock=0;
                                     yyextra->blockName=QCString(yytext).stripWhiteSpace().left(3);
                                     BEGIN(VerbatimCode);
                                   }
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 366 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=0;
                                     if (qstrcmp(&yytext[1],"startuml")==0)
                                     {
                                       yyextra->blockName="uml";
                                     }
                                     else
                                     {
				       yyextra->blockName=&yytext[1];
                                     }
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 380 "commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->blockName=&yytext[1];
				     if (yyextra->blockName.at(1)=='[')
				     {
				       yyextra->blockName.at(1)=']';
				     }
				     else if (yyextra->blockName.at(1)=='{')
				     {
				       yyextra->blockName.at(1)='}';
				     }
				     yyextra->lastCommentContext = YY_START;
				     BEGIN(Verbatim);
  			           }
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 394 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->blockName=&yytext[1];
				     yyextra->lastCommentContext = YY_START;
                                     BEGIN(Verbatim);
                                   }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 400 "commentcnv.l"
{ /* any other character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 403 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     if (&yytext[1]==yyextra->blockName) // end of formula
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
				     else if (&yytext[4]==yyextra->blockName)
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
                                   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 414 "commentcnv.l"
{
                                     if (yyextra->javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       yyextra->javaBlock++;
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				     }
                                   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 425 "commentcnv.l"
{
                                     if (yyextra->javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       yyextra->javaBlock--;
				       if (yyextra->javaBlock==0)
				       {
                                         copyToOutput(yyscanner," @endcode ",10);
				         BEGIN(yyextra->lastCommentContext);
				       }
				       else
				       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng);
				       }
				     }
  				   }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 444 "commentcnv.l"
{ /* end of markdown code block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     if (yytext[0]==yyextra->blockName[0])
                                     {
                                       BEGIN(yyextra->lastCommentContext);
                                     }
                                   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 451 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     if (&yytext[4]==yyextra->blockName)
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
                                   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 458 "commentcnv.l"
{ /* skip leading comments */
  				     if (!yyextra->inSpecialComment)
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
				     }
                                     else
                                     {
                                       int l=0;
                                       while (yytext[l]==' ' || yytext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(yyscanner,yytext,l);
                                       if (yyleng-l==3) // ends with //! or ///
                                       {
                                         copyToOutput(yyscanner," * ",3);
                                       }
                                       else // ends with //
                                       {
                                         copyToOutput(yyscanner,"//",2);
                                       }
                                     }
  				   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 481 "commentcnv.l"
{ /* any character not a backslash or new line or } */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 484 "commentcnv.l"
{ /* new line in verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 487 "commentcnv.l"
{
  				     if (yyextra->blockName=="dot" || yyextra->blockName=="msc" || yyextra->blockName=="uml" || yyextra->blockName.at(0)=='f')
				     {
				       // see bug 487871, strip /// from dot images and formulas.
                                       int l=0;
                                       while (yytext[l]==' ' || yytext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(yyscanner,yytext,l);
				       copyToOutput(yyscanner,"   ",3);
				     }
				     else // even slashes are verbatim (e.g. \verbatim, \code)
				     {
				       REJECT;
				     }
  				   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 504 "commentcnv.l"
{ /* any other character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 507 "commentcnv.l"
{ /* escaped character in string */
                                     if (yyextra->lang==SrcLangExt_Fortran)
                                     {
                                       unput(yytext[1]);
                                       copyToOutput(yyscanner,yytext,1);
                                     }
                                     else
                                     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                     }
                                   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 518 "commentcnv.l"
{ /* end of string */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     BEGIN(yyextra->stringContext); 
                                   }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 522 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 525 "commentcnv.l"
{ /* new line inside string (illegal for some compilers) */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 528 "commentcnv.l"
{ /* escaped character */
                                     if (yyextra->lang==SrcLangExt_Fortran)
                                     {
                                       unput(yytext[1]);
                                       copyToOutput(yyscanner,yytext,1);
                                     }
                                     else
                                     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                     }
                                   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 539 "commentcnv.l"
{ /* end of character literal */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                     BEGIN(yyextra->charContext);
                                   }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 543 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 546 "commentcnv.l"
{ /* new line character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 550 "commentcnv.l"
{ /* anything that is not a '*' or command */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 553 "commentcnv.l"
{ /* stars without slashes */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 556 "commentcnv.l"
{ /* end of Python docstring */
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->nestingCount--;
                                       yyextra->pythonDocString = FALSE;
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 569 "commentcnv.l"
{ /* new line in comment */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     /* in case of Fortran always end of comment */
  				     if (yyextra->lang==SrcLangExt_Fortran)
				     {
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 577 "commentcnv.l"
{ /* nested C comment */
                                     if (yyextra->lang==SrcLangExt_Python ||
                                         yyextra->lang==SrcLangExt_Tcl    ||
                                         yyextra->lang==SrcLangExt_Markdown)
				     {
				       REJECT;
                                     }
                                     yyextra->nestingCount++;
                                     yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 588 "commentcnv.l"
{ /* end of C comment */
                                     if (yyextra->lang==SrcLangExt_Python ||
                                         yyextra->lang==SrcLangExt_Tcl    ||
                                         yyextra->lang==SrcLangExt_Markdown)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(yyscanner,yytext,(int)yyleng);
                                       yyextra->nestingCount--;
                                       if (yyextra->nestingCount<=0)
                                       {
				         BEGIN(Scan);
                                       }
                                       else
                                       {
                                         //yyextra->nestingCount--;
                                         delete yyextra->commentStack.pop();
                                       }
				     }
                                   }
	YY_BREAK
/* Python an VHDL share CComment, so special attention for ending comments is required */
case 53:
/* rule 53 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 611 "commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
                                     {
                                       REJECT;
                                     }
                                     else
                                     {
                                       if (yyextra->vhdl) // inside --! comment
                                       {
                                         yyextra->vhdl = FALSE;
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 630 "commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Python || yyextra->pythonDocString)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 641 "commentcnv.l"
{
                                     if (yyextra->lang==SrcLangExt_Python)
                                     {
                                       if (yyextra->pythonDocString)
                                       {
                                         REJECT;
                                       }
                                       else
                                       {
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                     }
                                     else if (yyextra->lang==SrcLangExt_VHDL)
                                     {
                                       if (yyextra->vhdl) // inside --! comment
                                       {
                                         yyextra->vhdl = FALSE;
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                     else
                                     {
				       REJECT;
                                     }
                                   }
	YY_BREAK
/* removed for bug 674842 (bug was introduced in rev 768)
<CComment>"'"			   {
  			             yyextra->charContext = YY_START;
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(SkipChar);
  				   }
<CComment>"\""			   {
  			             yyextra->stringContext = YY_START;
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(SkipString);
  				   }
   */
case 56:
YY_RULE_SETUP
#line 684 "commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
  				   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 687 "commentcnv.l"
{
  				     replaceComment(yyscanner,0);
  				   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 690 "commentcnv.l"
{
                                     replaceComment(yyscanner,1); 
                                   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 693 "commentcnv.l"
{ 
  				     replaceComment(yyscanner,0);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 698 "commentcnv.l"
{   
                                     /* See Bug 752712: end the multiline comment when finding a @} or \} command */
                                     copyToOutput(yyscanner," */",3); 
				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->inSpecialComment=FALSE;
				     yyextra->inRoseComment=FALSE;
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 706 "commentcnv.l"
{ 
                                     replaceComment(yyscanner,1); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 62:
#line 712 "commentcnv.l"
case 63:
/* rule 63 can match eol */
#line 713 "commentcnv.l"
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 713 "commentcnv.l"
{    // or   //!something
  				     replaceComment(yyscanner,0);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
#line 719 "commentcnv.l"
case 66:
/* rule 66 can match eol */
#line 720 "commentcnv.l"
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 720 "commentcnv.l"
{ 
                                     replaceComment(yyscanner,1); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 725 "commentcnv.l"
{
                                     if (!yyextra->inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
  				       replaceComment(yyscanner,0);
				       yyextra->readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 737 "commentcnv.l"
{
                                     if (!yyextra->inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
                                       replaceComment(yyscanner,1); 
				       yyextra->readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 749 "commentcnv.l"
{ /* end of special comment */
                                     copyToOutput(yyscanner," */",3); 
				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->inSpecialComment=FALSE;
				     yyextra->inRoseComment=FALSE;
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 756 "commentcnv.l"
{
				     copyToOutput(yyscanner,"/&zwj;**",8);
				   }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 759 "commentcnv.l"
{
				     copyToOutput(yyscanner,"*&zwj;/",7);
				   }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 762 "commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 765 "commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 768 "commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(yyextra->readLineCtx);
				   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 772 "commentcnv.l"
{ // escaped command
				     copyToOutput(yyscanner,yytext,(int)yyleng);
  				   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 775 "commentcnv.l"
{ // conditional section
  				     yyextra->condCtx = YY_START; 
  				     BEGIN(CondLine);
  				   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 779 "commentcnv.l"
{ // end of conditional section
  				     bool oldSkip=yyextra->skip;
  				     endCondSection(yyscanner);
				     if (YY_START==CComment && oldSkip && !yyextra->skip) 
    			             {
				       //printf("** Adding start of comment!\n");
				       if (yyextra->lang!=SrcLangExt_Python &&
					   yyextra->lang!=SrcLangExt_VHDL &&
					   yyextra->lang!=SrcLangExt_Markdown &&
					   yyextra->lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('/');
     				         ADDCHAR('*');
					 if (yyextra->specialComment)
					 {
					   ADDCHAR('*');
					 }
				       }
    				     }
				    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 799 "commentcnv.l"
{
                                     handleCondSectionId(yyscanner,yytext);
  				   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 802 "commentcnv.l"
{
  				     yyextra->condCtx=YY_START;
                                     handleCondSectionId(yyscanner," "); // fake section id causing the section to be hidden unconditionally
                                   }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 806 "commentcnv.l"
{ // forgot section id?
                                     handleCondSectionId(yyscanner," "); // fake section id causing the section to be hidden unconditionally
				     if (*yytext=='\n') yyextra->lineNr++;
  				   }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 810 "commentcnv.l"
{ // expand alias without arguments
				     replaceAliases(yyscanner,yytext);
  				   }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 813 "commentcnv.l"
{ // expand alias with arguments
                                     yyextra->lastBlockContext=YY_START;
				     yyextra->blockCount=1;
				     yyextra->aliasString=yytext;
				     yyextra->lastEscaped=0;
				     BEGIN( ReadAliasArgs );
  				   }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 820 "commentcnv.l"
{ // skip leading special comments (see bug 618079)
  				   }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 822 "commentcnv.l"
{ // oops, end of comment in the middle of an alias?
                                     if (yyextra->lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else // abort the alias, restart scanning
				     {
				       copyToOutput(yyscanner,yyextra->aliasString,yyextra->aliasString.length());
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 834 "commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 838 "commentcnv.l"
{
                                     if (yyextra->lastEscaped)  yyextra->lastEscaped=FALSE;
                                     else                yyextra->lastEscaped=TRUE;
                                     yyextra->aliasString+=yytext;
                                   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 843 "commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
                                     yyextra->lineNr++;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 848 "commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
                                     if (!yyextra->lastEscaped) yyextra->blockCount++;
				     yyextra->lastEscaped=FALSE;
                                   }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 853 "commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     if (!yyextra->lastEscaped) yyextra->blockCount--;
				     if (yyextra->blockCount==0)
				     {
				       replaceAliases(yyscanner,yyextra->aliasString);
				       BEGIN( yyextra->lastBlockContext );
				     }
				     yyextra->lastEscaped=FALSE;
  			           }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 863 "commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 867 "commentcnv.l"
{
  				     copyToOutput(yyscanner,yytext,(int)yyleng);
  				   }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 871 "commentcnv.l"
ECHO;
	YY_BREAK
#line 2874 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/commentcnv.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * commentcnvYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( commentcnvYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentcnvYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentcnvYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentcnvYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 513 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 513 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 512);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentcnvYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentcnvYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentcnvYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        commentcnvYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	commentcnvYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	commentcnvYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void commentcnvYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentcnvYYpop_buffer_state();
	 *		commentcnvYYpush_buffer_state(new_buffer);
     */
	commentcnvYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentcnvYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (commentcnvYYwrap()) processing, but the only time this flag
	 * is looked at is after commentcnvYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void commentcnvYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentcnvYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentcnvYYalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentcnvYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentcnvYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void commentcnvYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentcnvYYfree((void *) b->yy_ch_buf ,yyscanner );

	commentcnvYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentcnvYYrestart() or at EOF.
 */
    static void commentcnvYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	commentcnvYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentcnvYY_init_buffer was _probably_
     * called from commentcnvYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void commentcnvYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentcnvYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	commentcnvYYensure_buffer_stack(yyscanner);

	/* This block is copied from commentcnvYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentcnvYY_switch_to_buffer. */
	commentcnvYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void commentcnvYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	commentcnvYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		commentcnvYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentcnvYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentcnvYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentcnvYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentcnvYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentcnvYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentcnvYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return commentcnvYY_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentcnvYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentcnvYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentcnvYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentcnvYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE commentcnvYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int commentcnvYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int commentcnvYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *commentcnvYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *commentcnvYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t commentcnvYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *commentcnvYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void commentcnvYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void commentcnvYYset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "commentcnvYYset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void commentcnvYYset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "commentcnvYYset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see commentcnvYY_switch_to_buffer
 */
void commentcnvYYset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void commentcnvYYset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int commentcnvYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void commentcnvYYset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* commentcnvYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int commentcnvYYlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) commentcnvYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* commentcnvYYlex_init_extra has the same functionality as commentcnvYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to commentcnvYYalloc in
 * the yyextra field.
 */

int commentcnvYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    commentcnvYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) commentcnvYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    commentcnvYYset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentcnvYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentcnvYYlex_init()
     */
    return 0;
}

/* commentcnvYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentcnvYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentcnvYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentcnvYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	commentcnvYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        commentcnvYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    commentcnvYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentcnvYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    commentcnvYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentcnvYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *commentcnvYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentcnvYYfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see commentcnvYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 871 "commentcnv.l"



static void replaceCommentMarker(yyscan_t yyscanner,const char *s,int len)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=s;
  char c;
  // copy leading blanks
  while ((c=*p) && (c==' ' || c=='\t' || c=='\n')) 
  {
    ADDCHAR(c);
    yyextra->lineNr += c=='\n';
    p++;
  }
  // replace start of comment marker by blanks and the last character by a *
  int blanks=0;
  while ((c=*p) && (c=='/' || c=='!' || c=='#')) 
  {
    blanks++;
    p++;
    if (*p=='<') // comment-after-item marker 
    { 
      blanks++;
      p++; 
    }
    if (c=='!') // end after first !
    {
      break;
    }
  }
  if (blanks>0)
  {
    while (blanks>2)
    {
      ADDCHAR(' ');
      blanks--;
    }
    if (blanks>1) ADDCHAR('*');
    ADDCHAR(' ');
  }
  // copy comment line to output
  ADDARRAY(p,len-(int)(p-s));
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt(TAB_SIZE);
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize); 
    else break;
  }
  return col;
}

static inline void copyToOutput(yyscan_t yyscanner,const char *s,int len)
{
  int tabSize=Config_getInt(TAB_SIZE);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int i;
  if (yyextra->skip) // only add newlines.
  {
    for (i=0;i<len;i++)
    {
      switch(s[i])
      {
        case '\n':
	  ADDCHAR('\n');
	  yyextra->lineNr++;
          yyextra->col=0;
          break;
        case '\t':
          yyextra->col+=tabSize-(yyextra->col%tabSize);
          break;
        default:
          yyextra->col++;
          break;
      }
    }
  }
  else if (len>0)
  {
    ADDARRAY(s,len);
    for (i=0;i<len;i++) 
    {
      switch (s[i])
      {
	case '\n': yyextra->col=0; 
	           //fprintf(stderr,"---> copy %d\n",g_lineNr);
		   yyextra->lineNr++; break;
	case '\t': yyextra->col+=tabSize-(yyextra->col%tabSize); break;
	default:   yyextra->col++; break;
      }
    }
  }
}

static void startCondSection(yyscan_t yyscanner,const char *sectId)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(yyextra->fileName,yyextra->lineNr,sectId);
  yyextra->condStack.push(new CondCtx(yyextra->lineNr,sectId,yyextra->skip));
  if (!expResult) // not enabled
  {
    yyextra->skip=TRUE;
  }
}

static void endCondSection(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->condStack.isEmpty())
  {
    warn(yyextra->fileName,yyextra->lineNr,"Found \\endcond command without matching \\cond");
    yyextra->skip=FALSE;
  }
  else
  {
    CondCtx *ctx = yyextra->condStack.pop();
    yyextra->skip=ctx->skip;
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

static void handleCondSectionId(yyscan_t yyscanner,const char *expression)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool oldSkip=yyextra->skip;
  startCondSection(yyscanner,expression);
  if ((yyextra->condCtx==CComment || yyextra->readLineCtx==SComment) && 
      !oldSkip && yyextra->skip) 
  {
    if (yyextra->lang!=SrcLangExt_Python &&
        yyextra->lang!=SrcLangExt_VHDL &&
        yyextra->lang!=SrcLangExt_Markdown &&
        yyextra->lang!=SrcLangExt_Fortran)
    {
      ADDCHAR('*');
      ADDCHAR('/');
    }
  }
  if (yyextra->readLineCtx==SComment)
  {
    BEGIN(SComment);
  }
  else
  {
    BEGIN(yyextra->condCtx);
  }
}

/** copies string \a s with length \a len to the output, while 
 *  replacing any alias commands found in the string.
 */
static void replaceAliases(yyscan_t yyscanner,const char *s)
{
  QCString result = resolveAliasCmd(s);
  //printf("replaceAliases(%s)->'%s'\n",s,result.data());
  copyToOutput(yyscanner,result,result.length());
}


static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int bytesInBuf = yyextra->inBuf->curPos()-yyextra->inBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,yyextra->inBuf->data()+yyextra->inBufPos,bytesToCopy);
  yyextra->inBufPos+=bytesToCopy;
  return bytesToCopy;
}

static void replaceComment(yyscan_t yyscanner,int offset)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->mlBrief || yyextra->skip)
  {
    copyToOutput(yyscanner,yytext,(int)yyleng);
  }
  else
  {
    //printf("replaceComment(%s)\n",yytext);
    int i=computeIndent(&yytext[offset]);
    if (i==yyextra->blockHeadCol)
    {
      replaceCommentMarker(yyscanner,yytext,(int)yyleng);
    }
    else
    {
      copyToOutput(yyscanner," */",3);
      int i;for (i=(int)yyleng-1;i>=0;i--) unput(yytext[i]);
      yyextra->inSpecialComment=FALSE;
      BEGIN(Scan);
    }
  }
}

// simplified way to know if this is fixed form
// duplicate in fortrancode.l
static bool recognizeFixedForm(const char* contents)
{
  int column=0;
  bool skipLine=FALSE;

  for(int i=0;;i++) {
    column++;

    switch(contents[i]) {
      case '\n':
        column=0;
        skipLine=FALSE;
        break;
      case ' ':
        break;
      case '\000':
        return FALSE;
      case 'C':
      case 'c':
      case '*':
        if(column==1) return TRUE;
        if(skipLine) break;
        return FALSE;
      case '!':
        if(column>1 && column<7) return FALSE;
        skipLine=TRUE;
        break;
      default:
        if(skipLine) break;
        if(column==7) return TRUE;
        return FALSE;
    }
  }
  return FALSE;
}


/*! This function does three things:
 *  -# It converts multi-line C++ style comment blocks (that are aligned)
 *     to C style comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO).
 *  -# It replaces aliases with their definition (see ALIASES)
 *  -# It handles conditional sections (cond...endcond blocks)
 */
void convertCppComments(BufStr *inBuf,BufStr *outBuf,const char *fileName)
{
  yyscan_t yyscanner;
  commentcnvYY_state extra;
  commentcnvYYlex_init_extra(&extra,&yyscanner);
#ifdef FLEX_DEBUG
  commentcnvYYset_debug(1,yyscanner);
#endif
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("convertCppComments(%s)\n",fileName);
  yyextra->inBuf    = inBuf;
  yyextra->outBuf   = outBuf;
  yyextra->inBufPos = 0;
  yyextra->col      = 0;
  yyextra->mlBrief = Config_getBool(MULTILINE_CPP_IS_BRIEF);
  yyextra->skip     = FALSE;
  yyextra->fileName = fileName;
  yyextra->lang = getLanguageFromFileName(fileName);
  yyextra->pythonDocString = FALSE;
  yyextra->lineNr   = 1;
  yyextra->condStack.clear();
  yyextra->condStack.setAutoDelete(TRUE);
  yyextra->commentStack.clear();
  yyextra->commentStack.setAutoDelete(TRUE);
  yyextra->vhdl = FALSE;

  printlex(yy_flex_debug, TRUE, __FILE__, fileName);
  yyextra->isFixedForm = FALSE;
  if (yyextra->lang==SrcLangExt_Fortran)
  {
    yyextra->isFixedForm = recognizeFixedForm(inBuf->data());
  }

  if (yyextra->lang==SrcLangExt_Markdown)
  {
    yyextra->nestingCount=0;
    BEGIN(CComment);
    yyextra->commentStack.push(new CommentCtx(yyextra->lineNr));
  }
  else
  {
    BEGIN(Scan);
  }
  commentcnvYYlex(yyscanner);
  while (!yyextra->condStack.isEmpty())
  {
    CondCtx *ctx = yyextra->condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label '%s' ",ctx->sectionId.stripWhiteSpace().data());
    warn(yyextra->fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
  }
  if (yyextra->nestingCount>0 && yyextra->lang!=SrcLangExt_Markdown)
  {
    QCString tmp= "(probable line reference: ";
    bool first = TRUE;
    while (!yyextra->commentStack.isEmpty())
    {
      CommentCtx *ctx = yyextra->commentStack.pop();
      if (!first) tmp += ", ";
      tmp += QCString().setNum(ctx->lineNr);
      first = FALSE;
      delete ctx;
    }
    tmp += ")";
    warn(yyextra->fileName,yyextra->lineNr,"Reached end of file while still inside a (nested) comment. "
        "Nesting level %d %s",yyextra->nestingCount,tmp.data());
  }
  yyextra->commentStack.clear();
  yyextra->nestingCount = 0;
  if (Debug::isFlagSet(Debug::CommentCnv))
  {
    yyextra->outBuf->at(yyextra->outBuf->curPos())='\0';
    Debug::print(Debug::CommentCnv,0,"-----------\nCommentCnv: %s\n"
                 "output=[\n%s]\n-----------\n",fileName,yyextra->outBuf->data()
                );
  }
  printlex(yy_flex_debug, FALSE, __FILE__, fileName);
  commentcnvYYlex_destroy(yyscanner);
}


//----------------------------------------------------------------------------

#include "commentcnv.l.h"

