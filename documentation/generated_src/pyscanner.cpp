#line 2 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pyscanner.cpp"
#line 29 "pyscanner.l"
#include <stdint.h>



#line 8 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pyscanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscannerYYrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pyscannerYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void pyscannerYYrestart (FILE *input_file ,yyscan_t yyscanner );
void pyscannerYY_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE pyscannerYY_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void pyscannerYY_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void pyscannerYY_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void pyscannerYYpop_buffer_state (yyscan_t yyscanner );

static void pyscannerYYensure_buffer_stack (yyscan_t yyscanner );
static void pyscannerYY_load_buffer_state (yyscan_t yyscanner );
static void pyscannerYY_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER pyscannerYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE pyscannerYY_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE pyscannerYY_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *pyscannerYYalloc (yy_size_t ,yyscan_t yyscanner );
void *pyscannerYYrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void pyscannerYYfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer pyscannerYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscannerYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscannerYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscannerYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscannerYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 208
#define YY_END_OF_BUFFER 209
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1194] =
    {   0,
    16532,16532,  150,  150,   30,   30,   37,   37,   45,   45,
      209,  207,  208,  205,  208,  206,  207,  208,   25,  207,
      208,   25,  207,  208,   19,  205,  208,   13,   25,  207,
      208,   25,  207,  208,   12,   25,  206,  207,  208,   23,
       25,  207,  208,   24,   25,  207,  208,   25,  207,  208,
       17,   25,  207,  208,16395,   17,   25,  207,  208,16395,
       17,   25,  207,  208,16395,   17,   25,  207,  208,16395,
       17,   25,  207,  208,16395,   17,   25,  207,  208,16395,
       17,   25,  207,  208,16395,   17,   25,  207,  208,16395,
       18,   25,  207,  208,   17,   25,  207,  208,16393,16394,

    16395,   17,   25,  207,  208,16393,16394,16395,   17,   25,
      207,  208,16393,16394,16395,   17,   25,  207,  208,16393,
    16394,16395,   17,   25,  207,  208,16393,16394,16395,   17,
       25,  207,  208,16393,16394,16395,   17,   25,  207,  208,
    16393,16394,16395,   17,   25,  207,  208,16393,16394,16395,
       57,   58,  207,  208,   55,  205,  208,   54,   58,  207,
      208,   58,  207,  208,   53,   58,  206,  207,  208,   58,
      207,  208,   56,   58,  207,  208,   56,   58,  207,  208,
       56,   58,  207,  208,   56,   58,  207,  208,   56,   58,
      207,  208,   56,   58,  207,  208,   56,   57,   58,  207,

      208,  179,  182,  207,  208,  182,  207,  208,  180,  205,
      208,  182,  207,  208,  182,  206,  207,  208,  182,  207,
      208,  178,  182,  207,  208,  185,  187,  207,  208,  186,
      205,  208,  187,  207,  208,  185,  187,  206,  207,  208,
      185,  187,  207,  208,  183,  187,  207,  208,  207,  208,
       76,  207,  208,   77,  207,  208,  207,  208,   74,  207,
      208,   73,  207,  208,   85,  207,  208,   78,  207,  208,
       85,  207,  208,   85,  206,  207,  208,   82,  207,  208,
       79,   85,  207,  208,   78,   85,  207,  208,   83,  207,
      208,   81,   85,  207,  208,   80,   85,  207,  208,   65,

       69,  207,  208,   69,  207,  208,   68,  205,  208,16443,
       64,   69,  207,  208,   67,   69,  207,  208,   63,   69,
      206,  207,  208,   65,   69,  207,  208,   65,   69,  207,
      208,   65,   69,  207,  208,   62,   69,  207,  208,   67,
       69,  207,  208,  108,  207,  208,  107,  205,  208,  106,
      108,  207,  208,  105,  108,  206,  207,  208,   99,  108,
      207,  208,  102,  108,  207,  208,  104,  108,  207,  208,
      103,  108,  207,  208,   98,  108,  207,  208,  101,  108,
      207,  208,   97,  108,  207,  208,  100,  108,  207,  208,
       96,  207,  208,   95,  205,  208,   94,   96,  207,  208,

       93,   96,  206,  207,  208,   88,   96,  207,  208,   91,
       96,  207,  208,   92,   96,  207,  208,   87,   96,  207,
      208,   90,   96,  207,  208,   86,   96,  207,  208,   89,
       96,  207,  208,  119,  207,  208,  118,  205,  208,  117,
      119,  207,  208,  116,  119,  206,  207,  208,  111,  119,
      207,  208,  114,  119,  207,  208,  115,  119,  207,  208,
      110,  119,  207,  208,  113,  119,  207,  208,  109,  119,
      207,  208,  112,  119,  207,  208,  132,  207,  208,  133,
      207,  208,  137,  207,  208,  136,  206,  207,  208,  133,
      207,  208,  134,  207,  208,  135,  207,  208,  207,  208,

      142,  205,  208, 8340,  207,  208,  207,  208, 8340,  207,
      208,  206,  207,  208, 8340,  207,  208, 8340,  207,  208,
     8340,  207,  208,  147,  207,  208,  126,  129,  207,  208,
      129,  207,  208,  127,  205,  208,  125,  129,  207,  208,
      129,  207,  208,  124,  129,  206,  207,  208,  126,  129,
      207,  208,  126,  129,  207,  208,  126,  129,  207,  208,
      123,  129,  207,  208,  163,  207,  208,  150,  163,  207,
      208,  164,  205,  208,  155,  163,  207,  208,  161,  163,
      207,  208,  154,  163,  206,  207,  208,  158,  163,  207,
      208,  151,  163,  207,  208,  151,  163,  207,  208,  149,

      163,  207,  208,  162,  163,  207,  208,  162,  163,  207,
      208,  162,  163,  207,  208,  162,  163,  207,  208,  162,
      163,  207,  208,  159,  163,  207,  208,  162,  163,  207,
      208,  160,  163,  207,  208,  175,  207,  208,  174,  205,
      208,  175,  206,  207,  208,  172,  207,  208,  173,  205,
      208,  170,  172,  207,  208,  169,  172,  206,  207,  208,
      165,  172,  207,  208,  166,  172,  207,  208,  171,  172,
      207,  208,  171,  172,  207,  208,  171,  172,  207,  208,
      171,  172,  207,  208,  192,  193,  207,  208,  193,  207,
      208,  191,  193,  206,  207,  208,  193,  207,  208,  198,

      199,  207,  208,  197,  199,  207,  208,  199,  206,  207,
      208,  199,  207,  208,  202,  204,  207,  208,  202,  203,
      205,  208,  202,  204,  207,  208,  202,  204,  206,  207,
      208,  204,  207,  208,  139,  207,  208,  138,  139,  206,
      207,  208,  141,  207,  208,  140,  141,  207,  208,  141,
      206,  207,  208,   31,  207,  208,   30,   31,  207,  208,
       29,  205,  208,   31,  206,  207,  208,   26,   31,  207,
      208,   27,   31,  207,  208,   27,   31,  207,  208,   42,
      207,  208,   37,   42,  207,  208,   36,  205,  208,   42,
      206,  207,  208,   38,   42,  207,  208,   39,   42,  207,

      208,   32,   42,  207,  208,   40,   42,  207,  208,   35,
       42,  207,  208,16417,16418,   42,  207,  208,   46,  207,
      208,   45,   46,  207,  208,   44,  205,  208,   46,  206,
      207,  208,   43,   46,  207,  208,16395,   19,   16,   15,
       16,   17,16395,   17,16395,   17,16395,   17,16395,   17,
    16395,   17,16395,   18,16393,16394,16395,16393,16394,16395,
    16393,16394,16395,16393,16394,16395,16393,16394,16395,   17,
    16393,16394,16395,   17,16393,16394,16395,   17,16393,16394,
    16395,   17,16393,16394,16395,   17,16393,16394,16395,   17,
    16393,16394,16395,   57,   52,   56,   56,   56,   56,   56,

       57,  179,  181,  178,  185,  184,  185,  183,  183,   76,
       74,   75,   74,   73,   78,   84,   79,   83,   80,   65,
    16443,   67,   67,   65,   62,   61,   66,   67,  132,  133,
      135,  142,  146,  145,  147,  126,  128,  126,  123,  122,
      150,  161,  151,  151,  151,  162,  162,  155,  154,  162,
      162,  171,  171,  192,  189,  189,  188,  198,  195,  195,
      194,  202,  202,  202,   30,   27,   27,   37, 8226, 8225,
       35,16417,16418,   41,   45,   43,16395,   20,   16,   15,
       16,   22,   21, 8203,   17,16395,   17,16395,   17,16395,
       17,16395,16393,16394,16395,16393,16394,16395,16393,16394,

    16395,16393,16394,16395,16393,16394,16395, 8202, 8203, 8202,
     8203, 8202, 8203,   17,16393,16394,16395,   17,16393,16394,
    16395,   17,16393,16394,16395,   17,16393,16394,16395,   49,
       52,   51,   50,   56,   56,  176,  177,   84,   60, 8251,
       70,   67,   72,   72,   71,   66,   67,  135,  143,  146,
      145,  144,  120,  130,  128,  131,  156,  157,  152,  151,
      151,  162,  162,  167,  168,  190,  196,  200,  201,   27,
       27, 8225,   43,   20,   21,   17,16395,    2,   17,16395,
       17,16395,16393,16394,16395,16393,16394,16395,16393,16394,
    16395,16393,16394,16395,   17,16393,16394,16395,    1,    2,

       17,16393,16394,16395,   17,16393,16394,16395,   49,   50,
       56,   70,   71,  135,  143,  144,  121,  130,  131,  156,
      157,  152,  151,  162,  153,  162,  167,  168,   27,   27,
       43,   17,16395,    6,   17,16395,16393,16394,16395,    1,
    16393,16394,16395,16393,16394,16395,   17,16393,16394,16395,
        5,    6,   17,16393,16394,16395,16432,  152,   27,    4,
       17,16395,16393,16394,16395,    5,16393,16394,16395,    3,
        4,   17,16393,16394,16395,16432, 8240,16431,   27,   28,
        8,    3,16393,16394,16395,    7,    8,16431, 8239,   28,
        7, 8201,   14

    } ;

static yyconst flex_int16_t yy_accept[601] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        7,    8,    9,   10,   11,   12,   14,   16,   19,   22,
       25,   28,   32,   35,   40,   44,   48,   51,   56,   61,
       66,   71,   76,   81,   86,   91,   95,  102,  109,  116,
      123,  130,  137,  144,  151,  155,  158,  162,  165,  170,
      173,  177,  181,  185,  189,  193,  197,  202,  206,  209,

      212,  215,  219,  222,  226,  230,  233,  236,  241,  245,
      249,  251,  254,  257,  259,  262,  265,  268,  271,  274,
      278,  281,  285,  289,  292,  296,  300,  304,  307,  311,
      315,  319,  324,  328,  332,  336,  340,  344,  347,  350,
      354,  359,  363,  367,  371,  375,  379,  383,  387,  391,
      394,  397,  401,  406,  410,  414,  418,  422,  426,  430,
      434,  437,  440,  444,  449,  453,  457,  461,  465,  469,
      473,  477,  480,  483,  486,  490,  493,  496,  499,  501,
      504,  507,  509,  512,  515,  518,  521,  524,  527,  531,
      534,  537,  541,  544,  549,  553,  557,  561,  565,  568,

      572,  575,  579,  583,  588,  592,  596,  600,  604,  608,
      612,  616,  620,  624,  628,  632,  636,  639,  642,  646,
      649,  652,  656,  661,  665,  669,  673,  677,  681,  685,
      689,  692,  697,  700,  704,  708,  712,  715,  719,  723,
      727,  732,  735,  738,  743,  746,  750,  754,  757,  761,
      764,  768,  772,  776,  780,  783,  787,  790,  794,  798,
      802,  806,  810,  816,  819,  822,  826,  829,  833,  837,
      837,  838,  839,  839,  840,  842,  842,  842,  842,  842,
      842,  842,  844,  844,  844,  844,  846,  848,  850,  852,
      854,  855,  858,  861,  864,  867,  870,  870,  874,  874,

      878,  882,  886,  890,  894,  895,  895,  896,  896,  896,
      897,  897,  897,  898,  899,  900,  902,  903,  903,  903,
      904,  905,  906,  906,  907,  908,  909,  910,  910,  911,
      912,  913,  914,  915,  916,  917,  918,  919,  920,  921,
      922,  922,  922,  922,  923,  924,  924,  924,  924,  925,
      926,  927,  929,  930,  931,  931,  932,  932,  933,  933,
      934,  935,  935,  935,  935,  935,  936,  937,  937,  937,
      937,  938,  938,  938,  938,  939,  940,  941,  942,  942,
      943,  943,  943,  944,  945,  946,  946,  947,  948,  949,
      950,  951,  952,  952,  952,  953,  953,  953,  954,  955,

      955,  956,  957,  958,  959,  959,  960,  961,  962,  963,
      963,  964,  965,  966,  966,  966,  967,  968,  969,  969,
      970,  971,  974,  974,  975,  976,  976,  976,  977,  978,
      979,  980,  982,  983,  984,  984,  984,  984,  984,  985,
      987,  989,  991,  993,  996,  999, 1002, 1005, 1008, 1010,
     1012, 1014, 1018, 1022, 1026, 1030, 1031, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1041, 1042, 1044,
     1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1053, 1054,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1067, 1068, 1068, 1069, 1070, 1070,

     1071, 1072, 1073, 1073, 1074, 1075, 1076, 1076, 1076, 1078,
     1079, 1081, 1083, 1086, 1089, 1092, 1095, 1095, 1095, 1095,
     1099, 1101, 1105, 1109, 1110, 1111, 1111, 1112, 1113, 1114,
     1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1122, 1123,
     1124, 1125, 1127, 1128, 1129, 1130, 1131, 1132, 1132, 1134,
     1135, 1137, 1140, 1141, 1144, 1147, 1147, 1151, 1153, 1157,
     1158, 1158, 1158, 1159, 1160, 1160, 1161, 1163, 1166, 1167,
     1170, 1170, 1172, 1176, 1176, 1177, 1178, 1179, 1181, 1181,
     1182, 1183, 1186, 1186, 1188, 1188, 1189, 1190, 1191, 1191,
     1192, 1192, 1192, 1192, 1192, 1193, 1193, 1193, 1194, 1194

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   14,   15,    7,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,    7,    7,
       20,   21,    1,   22,   23,   23,   23,   23,   24,   25,
       26,   26,   26,   27,   26,   28,   26,   26,   26,   26,
       26,   29,   26,   30,   31,   26,   26,   32,   26,   26,
       33,   34,   35,    1,   36,    7,   37,   23,   38,   39,

       40,   41,   26,   42,   43,   27,   26,   44,   45,   26,
       46,   47,   26,   48,   49,   50,   51,   26,   26,   32,
       52,   26,   53,    7,   54,    7,    1,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    6,
        1,    1,    6,    1,    7,    8,    8,    8,    1,    9,
        1,    1,   10,   10,   10,   11,   11,   11,   11,   11,
       11,   11,    1,   12,    1,   11,   10,   10,   10,   10,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    1,    1,   13
    } ;

static yyconst flex_int16_t yy_base[715] =
    {   0,
        0,    1,    9,   64,  119,    0,  172,  173,  180,  184,
      187,  194,  218,    0,  273,    0,  327,  377,  426,  478,
      530,  582,  634,  686,  740,    0,  795,    0,  850,  901,
      951, 1001, 1052,    0,  176,  191, 1107,    0,  331,  335,
      342,  343,  352,  356,  195,  198,  202,  208, 1162,    0,
     1217,    0, 1272,    0, 1931, 3011, 3011, 3011, 3011, 1926,
     1920, 1916,    1, 1912, 3011, 3011, 1870,  361,  389,  442,
      394,  403,  393,  419,    0,  329,  443,  464,  494,  490,
      455,  425,  477,    0,    0, 3011, 1902, 1897, 1892, 3011,
        0,  204,  489, 1855, 1858,  500, 1327,    0, 3011, 3011,

     1892, 1888,    0, 1893,    0,    0, 3011,    0,  202, 1888,
      335, 3011, 3011, 1675, 1693,    0, 3011, 1692,    0, 3011,
     3011, 1682, 3011, 1690, 3011,    0,    0, 3011,  347, 1686,
     1683, 1678,  379,  507,  512,  175, 1679, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011, 3011,
     3011,    0, 1678, 3011, 3011, 3011, 3011, 1662,  386, 3011,
     3011, 1669, 1665, 1659,  395,  516,  522,  408,    0, 3011,
     1660, 1655,    0, 1647,  407,  538,  545,  415, 3011, 1650,

     3011, 1644,    0, 1638, 3011,  579,  561, 3011,    0, 1606,
      432, 1592,  551, 3011,  604, 3011, 3011, 3011, 3011, 3011,
     3011, 1634, 1629, 3011, 3011,    0,  511,  605,  611,    0,
     1629, 3011,  417,    0, 3011, 1623,  555, 1591, 1588, 1614,
     1605,  563, 3011, 3011, 3011, 3011, 3011, 3011, 1610, 3011,
     3011, 3011,  474,  606, 3011, 1609, 3011, 3011, 3011, 3011,
     3011, 3011,  559,  579, 3011, 1604, 3011, 3011,  560, 1601,
      612, 1583, 1580,    0,    0,    0, 1571, 1526,  618,  644,
     1571,  648,    0, 1567, 1563,  670,  661,  690,  691,  858,
      674,  712,  864,  860,  873,  915,  714,  716,  507,  914,

      927,  931,  948,  953,    0, 1561,    0,    0, 1552,    0,
     1553, 1545,  539, 1501, 1501, 1382,    0, 1536, 1530, 3011,
     1534,    0,  360, 3011,  596, 1526, 1524,  646, 3011, 1526,
     3011, 1523,    0, 1520,    0, 1507, 1515,    0,    0,  598,
     1502, 1503, 1499,    0,  621, 1487, 1486, 1479,  621,  654,
     3011,    0,    0, 1483,    0, 1469,  682, 3011, 1478,    0,
     1476, 1472, 1470, 1465,  665,  703,    0, 1460, 1462, 1456,
        0, 1446, 1439, 1434,  674,  705, 3011, 1437, 1429,    0,
     1425,  847,  961,  968, 3011,    0,    0, 1384, 1421, 1417,
     1369,  715, 1413, 1406,    0, 1407, 1398,  725,    0, 1368,

     3011,  885, 3011,    0, 1363, 3011,  887, 3011, 1334,  889,
     1349, 1324, 1328,  647, 1049,  852,  867, 1048,  929, 3011,
     1046,  988,  893, 3011, 1044,  897, 1042,  911, 1006, 1038,
        0,    0, 3011, 1035,  985,  440, 1018, 1008, 3011, 1356,
     1021, 1365, 1377, 1023, 1409, 1411, 1428, 1430, 3011,  526,
      969, 1443, 1025, 1445, 1447, 1010,    0, 3011, 1009,  966,
      176, 3011, 3011,    0, 3011,  946,  941,  914,    0, 3011,
      911,    0,  870,  872,    0,  855,  855,    0,  855,  736,
      731,    0,  724,  705,  693, 1454, 3011,  658,  628,  626,
      656,  641, 3011,  908, 3011,  943, 3011, 3011,  639,  960,

     1362,  628,  616,  972, 3011, 3011,  553, 1027, 1449, 1466,
     1486, 1487, 1499, 1500, 1501, 1513,  889,  504,  480, 1514,
     1527, 1529, 1541, 3011, 3011,    0,  486, 3011, 3011,  478,
     3011, 3011, 3011, 3011, 3011, 3011, 3011,  953, 3011, 3011,
      438,    0, 3011, 3011, 1009, 1340, 1348,  427, 1542, 1554,
     1555, 1567, 1568, 1580, 1581,  411, 1582, 1594, 1607,  918,
        0,  975, 1581, 1357,  413, 1608, 1613, 1622, 1628, 1634,
      409, 1643, 1648,  995, 1331, 3011, 1333, 1350,  387, 1649,
     1662, 1663,  378, 1668, 1354, 1407, 3011, 1355,  381, 1677,
      345,  343,  321,  310, 3011,  295,  176, 3011, 3011, 1697,

     1710, 1723, 1736, 1749, 1762, 1775, 1788, 1801, 1814, 1827,
     1840, 1853, 1866, 1879, 1891, 1904, 1916, 1928, 1940, 1953,
     1966, 1972, 1985, 1998, 2011, 2017, 2030, 2036, 2049, 2061,
     2074, 2087, 2093, 2100, 2113, 2126, 2135, 2148, 2161, 2167,
     2173, 2186, 2199, 2212, 2225, 2238, 2250, 2262, 2274, 2286,
     2298, 2311, 2324, 2337, 2349, 2361, 2374, 2386, 2398, 2410,
     2423, 2436, 2449, 2462, 2468, 2481, 2494, 2500, 2513, 2519,
     2532, 2544, 2556, 2569, 2582, 2595, 2601, 2605, 2612, 2625,
     2638, 2650, 2663, 2676, 2682, 2685, 2691, 2704, 2717, 2730,
     2742, 2754, 2766, 2778, 2790, 2802, 2815, 2828, 2840, 2852,

     2864, 2876, 2888, 2901, 2908, 2921, 2928, 2941, 2953, 2965,
     2969, 2981, 2985, 2997
    } ;

static yyconst flex_int16_t yy_def[715] =
    {   0,
      600,  600,  599,  599,  599,    5,  600,  600,  601,  601,
      602,  602,  599,   13,  599,   15,  603,  603,  604,  604,
      605,  605,  606,  606,  599,   25,  599,   27,  607,  607,
      608,  608,  599,   33,  609,  609,  599,   37,  610,  610,
      611,  611,  612,  612,  613,  613,  614,  614,  599,   49,
      599,   51,  599,   53,  599,  599,  599,  599,  599,  615,
      599,  599,  616,  599,  599,  599,  599,  617,  617,  617,
      617,  617,   70,   70,   70,  618,  619,  619,  619,  619,
      619,   79,   79,   79,  620,  599,  599,  621,  599,  599,
      622,  622,  622,  622,  622,  622,  622,  623,  599,  599,

      599,  599,  624,  599,  625,  599,  599,  625,  625,  599,
      599,  599,  599,  599,  599,  626,  599,  599,  627,  599,
      599,  599,  599,  599,  599,  628,  629,  599,  630,  599,
      631,  599,  629,  629,  629,  599,  632,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  633,  599,  599,  599,  599,  599,  634,  599,  599,
      599,  599,  635,  599,  599,  599,  599,  599,  636,  599,
      637,  599,  638,  599,  636,  636,  636,  599,  599,  599,

      599,  599,  639,  599,  599,  599,  599,  599,  640,  640,
      640,  640,  640,  599,  640,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  641,  641,  641,  641,  642,
      599,  599,  643,  644,  599,  599,  645,  646,  646,  599,
      599,  646,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  647,  647,  599,  599,  599,  599,  599,  599,
      599,  599,  648,  599,  599,  599,  599,  599,  649,  650,
      651,  599,  599,  652,  653,  654,  599,  599,  599,  599,
      655,  656,  657,  599,  599,  656,  656,  656,  656,  656,
      658,  659,  659,  659,  659,  659,  599,  660,  661,  660,

      660,  660,  660,  660,  662,  599,  663,  664,  599,  665,
      599,  599,  665,  665,  665,  665,  666,  599,  599,  599,
      599,  667,  599,  599,  667,  599,  599,  599,  599,  599,
      599,  599,  668,  599,  669,  599,  599,  670,  671,  672,
      599,  673,  599,  674,  675,  599,  599,  599,  671,  599,
      599,  676,  677,  599,  678,  679,  599,  599,  599,  680,
      599,  599,  599,  599,  599,  599,  681,  599,  682,  599,
      683,  599,  599,  599,  681,  599,  599,  599,  599,  684,
      599,  599,  599,  599,  599,  685,  686,  686,  599,  599,
      686,  686,  599,  599,  687,  599,  599,  687,  688,  599,

      599,  599,  599,  689,  599,  599,  599,  599,  690,  690,
      599,  599,  599,  599,  691,  692,  692,  599,  599,  599,
      599,  693,  599,  599,  599,  599,  694,  695,  696,  599,
      697,  698,  599,  599,  599,  599,  699,  700,  599,  701,
      701,  701,  701,  702,  702,  702,  702,  702,  599,  599,
      599,  703,  703,  703,  703,  599,  704,  599,  599,  705,
      705,  599,  599,  706,  599,  599,  673,  599,  674,  599,
      599,  676,  707,  599,  680,  599,  599,  708,  599,  682,
      599,  683,  599,  599,  599,  599,  599,  685,  686,  686,
      599,  599,  599,  599,  599,  599,  599,  599,  691,  709,

      692,  599,  694,  710,  599,  599,  599,  700,  701,  599,
      701,  701,  702,  702,  702,  702,  599,  599,  599,  703,
      599,  703,  703,  599,  599,  711,  705,  599,  599,  707,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      686,  686,  599,  599,  709,  692,  710,  599,  701,  599,
      701,  702,  599,  702,  702,  599,  703,  599,  703,  712,
      713,  599,  599,  692,  599,  599,  701,  702,  599,  702,
      599,  599,  703,  599,  712,  599,  714,  692,  599,  599,
      599,  702,  599,  599,  599,  714,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,    0,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599
    } ;

static yyconst flex_int16_t yy_nxt[3067] =
    {   0,
      599,  323,   57,   57,  275,  324,  276,   58,   58,   59,
       60,   61,   59,   62,   63,   59,   64,   65,   66,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       67,   68,   68,   68,   68,   68,   68,   69,   68,   70,
       68,   59,   59,   59,   68,   68,   71,   72,   68,   73,
       68,   74,   68,   68,   68,   68,   69,   68,   68,   75,
       68,   59,   59,   68,   59,   76,   61,   59,   62,   63,
       59,   64,   65,   66,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   67,   77,   77,   77,   77,
       77,   77,   78,   77,   79,   77,   59,   59,   59,   77,

       77,   80,   81,   77,   82,   77,   83,   77,   77,   77,
       77,   78,   77,   77,   84,   77,   59,   59,   77,   85,
       85,   86,   85,   87,   88,   85,   89,   85,   85,   85,
       85,   85,   85,   90,   85,   85,   85,   85,   85,   85,
       85,   91,   91,   91,   91,   91,   91,   92,   91,   93,
       91,   85,   85,   85,   91,   91,   94,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   92,   95,   91,   96,
       91,   85,   85,   97,   57,   57,  350,  351,  218,   58,
       58,   99,  100,  219,  101,  104,  100,  102,  101,  106,
      599,  102,  107,  218,  108,  109,  106,   57,  219,  110,

       57,  108,  244,  325,   57,  244,  246,  326,  311,  247,
       57,  312,  246,  103,  598,  247,  527,  103,   56,  111,
       57,   56,   56,   56,   56,   58,  112,  113,   56,   56,
       56,  114,   56,   56,   56,   56,  115,   56,   56,   56,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       56,   56,   56,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       56,   56,  116,  117,  118,   57,  117,  117,  119,  117,
      120,   56,  121,  122,  117,  123,  117,  117,  117,  117,
      117,  124,  125,  117,  117,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  117,  117,  117,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  117,  117,  126,  128,  129,
      291,  130,  131,   57,  132,  231,  328,   57,  232,  231,
      597,  128,  232,  329,   57,   57,  235,  235,  340,  236,
      236,  596,  341,  330,  239,  133,  240,  134,  239,  241,
      240,  323,  279,  241,  233,  324,  293,  294,  233,  295,
      280,  296,  595,  281,  133,  237,  237,  135,  136,  129,
      283,  130,  137,  347,  132,  242,  348,  357,  358,  242,
      279,  128,  594,  284,  593,  279,  285,  599,  280,  363,

      599,  281,  364,  280,  279,  133,  281,  134,  283,  366,
      358,  373,  280,  283,  374,  281,  376,  377,  402,  403,
      592,  282,  283,  599,  133,  591,  599,  135,  139,  599,
      140,  589,  599,  141,  142,  143,  389,  287,  144,  390,
      289,  436,  288,  279,  297,  145,  284,  282,  583,  285,
      579,  280,  280,  298,  281,  281,  297,  571,  146,  283,
      147,  283,  299,  290,  280,  297,  282,  281,  284,  565,
      286,  285,  303,  280,  299,  414,  281,  542,  148,  149,
      139,  599,  140,  299,  599,  141,  142,  143,  415,  286,
      144,  297,  355,  311,  302,  297,  312,  145,  284,  280,

      561,  285,  281,  280,  311,  298,  281,  312,  450,  299,
      146,  347,  147,  299,  348,  396,  347,  313,  397,  348,
      363,  304,  300,  364,  298,  556,  363,  517,  313,  364,
      148,  149,  151,  301,  152,  349,  313,  153,  154,  155,
      349,  300,  373,  311,  365,  374,  312,  313,  156,  373,
      365,  519,  374,  451,  349,  389,  407,  408,  390,  349,
      419,  426,  157,  365,  158,  599,  375,  409,  420,  365,
      409,  421,  518,  375,  427,  382,  384,  384,  384,  392,
      423,  424,  159,  160,  151,  375,  152,  385,  385,  153,
      154,  155,  375,  382,  383,  383,  384,  325,  392,  340,

      156,  326,  548,  341,  385,  385,  385,  414,  389,  396,
      386,  390,  397,  279,  157,  396,  158,  503,  397,  279,
      415,  280,  385,  470,  281,  347,  344,  280,  348,  502,
      281,  283,  392,  398,  159,  160,  162,  283,  163,  398,
      499,  164,  165,  166,  544,  436,  167,  328,  414,  279,
      417,  392,  398,  280,  329,  350,  351,  280,  398,  543,
      281,  415,  279,  283,  330,  542,  168,  283,  169,  363,
      280,  279,  364,  281,  284,  291,  541,  285,  373,  280,
      283,  374,  281,  357,  358,  540,  170,  171,  162,  283,
      163,  279,  279,  164,  165,  166,  537,  440,  167,  280,

      280,  540,  281,  281,  366,  358,  376,  377,  536,  283,
      283,  293,  294,  297,  295,  297,  296,  297,  168,  389,
      169,  280,  390,  280,  281,  280,  281,  535,  281,  396,
      441,  299,  397,  299,  534,  299,  442,  479,  170,  171,
       56,   56,   57,   56,   56,   56,   56,   58,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,   56,   56,   56,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,   56,   56,  172,   56,  173,   57,   56,  174,

       56,   56,  175,  176,  176,   56,   56,  176,   56,   56,
       56,   56,   56,  177,   56,   56,   56,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,   56,   56,   56,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,   56,   56,  178,
       56,  179,  180,  414,  182,  183,  479,  184,  532,  279,
      476,  297,  486,  486,  486,  297,  415,  280,  414,  280,
      281,   56,  281,  280,  297,  531,  281,  283,  185,  299,
      186,  415,  280,  299,  355,  281,  494,  403,  496,  408,
      517,  599,  299,  409,  423,  424,  409,  185,  426,  446,

      187,   56,  188,  180,  443,  182,  183,  445,  184,  494,
      403,  427,  426,  501,  529,  297,  297,  528,  284,  574,
      447,  285,   56,  280,  280,  427,  281,  281,  297,  185,
      419,  186,  297,  299,  299,  518,  280,  576,  420,  281,
      280,  421,  466,  281,  496,  408,  299,  466,  185,  297,
      299,  187,  190,  191,  297,  192,  193,  280,  194,  448,
      281,  414,  280,  452,  562,  281,  562,  299,  563,  563,
      563,  453,  299,  426,  415,  382,  383,  383,  384,  195,
      526,  196,  382,  384,  384,  384,  427,  385,  487,  419,
      563,  563,  563,  454,  385,  385,  574,  420,  195,  455,

      421,  197,  198,  191,  487,  192,  193,  279,  194,  279,
      414,  385,  525,  524,  576,  280,  519,  280,  281,  437,
      281,  507,  510,  415,  297,  283,  521,  283,  279,  195,
      280,  196,  280,  281,  280,  281,  280,  281,  506,  281,
      283,  505,  299,  503,  299,  425,  283,  502,  195,  418,
      499,  197,  199,  200,  201,  199,  202,  203,  199,  204,
      205,  199,  199,  199,  199,  199,  199,  206,  207,  207,
      199,  208,  199,  199,  209,  209,  210,  209,  209,  209,
      211,  212,  213,  209,  214,  199,  199,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  211,

      209,  209,  215,  209,  216,  199,  209,  220,  220,  221,
      220,  222,  220,  220,  223,  224,  225,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  226,
      226,  226,  226,  226,  226,  227,  226,  228,  226,  224,
      220,  225,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  227,  226,  226,  229,  226,  224,
      225,  226,  248,  249,  250,  248,  248,  248,  248,  251,
      248,  248,  248,  248,  248,  248,  252,  248,  248,  248,
      248,  248,  248,  248,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  248,  248,  248,  253,  253,  253,

      253,  253,  253,  253,  254,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  248,  248,  253,  255,  256,  257,
      255,  255,  255,  255,  258,  259,  260,  261,  255,  262,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  255,
      264,  255,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  255,
      255,  263,  265,  266,  267,  265,  265,  265,  265,  268,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  265,  265,  265,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  265,  265,  269,  305,  305,  413,
      305,  498,  574,  305,  585,  305,  305,  305,  305,  305,
      305,  414,  316,  316,  316,  305,  305,  305,  305,  426,
      576,  588,  587,  497,  415,  585,  588,  279,  414,  305,
      305,  305,  427,  414,  415,  280,  279,  410,  281,  415,
      495,  415,  493,  587,  280,  283,  415,  281,  279,  305,
      305,  316,  305,  305,  283,  305,  280,  564,  305,  281,
      305,  305,  305,  305,  305,  305,  283,  316,  316,  316,

      305,  305,  305,  305,  509,  394,  578,  546,  585,  511,
      297,  393,  297,  492,  305,  305,  305,  491,  280,  490,
      280,  281,  512,  281,  381,  379,  587,  489,  299,  297,
      299,  297,  485,  484,  305,  305,  316,  280,  378,  280,
      281,  372,  281,  370,  297,  513,  297,  299,  297,  299,
      279,  514,  280,  483,  280,  281,  280,  281,  280,  281,
      481,  281,  299,  479,  299,  478,  299,  510,  283,  486,
      486,  486,  362,  515,  359,  280,  516,  538,  281,  477,
      539,  476,  474,  355,  354,  283,  346,  550,  279,  522,
      343,  520,  523,  538,  471,  280,  280,  549,  281,  281,

      297,  553,  297,  468,  466,  283,  283,  465,  280,  280,
      280,  281,  281,  281,  297,  297,  337,  336,  299,  299,
      299,  334,  280,  280,  332,  281,  281,  332,  521,  327,
      558,  327,  299,  299,  551,  321,  280,  463,  280,  281,
      462,  281,  297,  566,  461,  554,  299,  552,  299,  460,
      280,  280,  309,  281,  281,  550,  279,  306,  555,  459,
      299,  283,  557,  280,  280,  456,  281,  281,  297,  553,
      277,  273,  437,  283,  283,  435,  280,  280,  434,  281,
      281,  569,  297,  572,  430,  272,  299,  299,  559,  280,
      280,  280,  281,  281,  281,  558,  563,  563,  563,  299,

      299,  299,  270,  280,  567,  425,  281,  539,  297,  566,
      418,  413,  412,  299,  580,  568,  280,  280,  411,  281,
      281,  410,  280,  581,  410,  281,  299,  283,  570,  569,
      405,  280,  283,  400,  281,  297,  394,  280,  393,  391,
      281,  299,  388,  280,  572,  381,  281,  299,  379,  584,
      580,  378,  280,  299,  372,  281,  573,  280,  280,  370,
      281,  281,  299,  581,  590,  368,  362,  299,  283,  584,
      361,  280,  280,  359,  281,  281,  355,  280,  590,  354,
      281,  299,  299,  582,  345,  346,  280,  299,  345,  281,
      343,  337,  336,  334,  332,  331,  299,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  271,  327,  321,  319,  318,  315,  314,  309,

      271,  271,  308,  271,  274,  274,  306,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  282,  278,  277,
      273,  282,  272,  282,  282,  282,  282,  270,  282,  292,
      599,  599,  599,  599,  599,  599,  599,  292,  292,  599,
      292,  298,  599,  599,  599,  298,  599,  298,  298,  298,
      298,  599,  298,  305,  305,  599,  599,  599,  305,  599,
      305,  305,  599,  599,  305,  305,  307,  307,  599,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  310,
      599,  310,  310,  599,  310,  317,  599,  599,  599,  317,
      317,  317,  317,  317,  317,  317,  599,  317,  320,  320,

      599,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  322,  322,  599,  322,  599,  322,  322,  322,  322,
      322,  322,  322,  322,  333,  599,  333,  333,  599,  333,
      335,  335,  599,  335,  599,  335,  335,  335,  335,  335,
      335,  335,  335,  338,  599,  338,  338,  599,  338,  339,
      599,  599,  599,  599,  339,  599,  339,  339,  339,  339,
      339,  339,  342,  599,  599,  342,  599,  599,  599,  599,
      342,  342,  599,  342,  344,  344,  599,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  352,  352,  599,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      353,  599,  353,  353,  599,  353,  356,  356,  599,  356,
      356,  599,  356,  360,  360,  599,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  367,  599,  599,  599,
      599,  367,  367,  367,  367,  367,  367,  367,  367,  369,
      599,  599,  599,  599,  369,  369,  599,  369,  371,  371,
      599,  371,  599,  371,  371,  371,  371,  371,  371,  371,
      371,  380,  380,  599,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  387,  599,  387,  387,  599,  387,
      395,  599,  395,  395,  599,  395,  399,  399,  599,  599,
      399,  399,  399,  399,  399,  399,  399,  599,  399,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  404,  404,  599,  599,  404,  404,  404,  404,
      404,  404,  404,  599,  404,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  409,  409,
      409,  599,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  416,  599,  599,  599,  599,  416,  416,  599,  416,
      416,  599,  416,  422,  599,  599,  599,  422,  599,  422,
      599,  422,  422,  599,  422,  428,  599,  599,  599,  599,
      428,  428,  599,  428,  428,  599,  428,  271,  599,  599,
      599,  599,  599,  599,  599,  271,  271,  599,  271,  429,

      599,  599,  599,  429,  599,  429,  429,  429,  429,  599,
      429,  431,  431,  599,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  432,  432,  599,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  433,  433,  433,
      433,  599,  433,  433,  433,  433,  433,  433,  433,  433,
      438,  599,  599,  599,  599,  599,  599,  599,  438,  438,
      599,  438,  282,  599,  599,  599,  282,  599,  282,  282,
      282,  282,  599,  282,  439,  439,  439,  439,  439,  439,
      439,  439,  599,  439,  439,  439,  439,  292,  599,  599,
      599,  599,  599,  599,  599,  292,  292,  599,  292,  444,

      599,  599,  599,  444,  599,  444,  444,  444,  444,  599,
      444,  298,  599,  599,  599,  298,  599,  298,  298,  298,
      298,  599,  298,  449,  449,  449,  449,  449,  449,  449,
      449,  599,  449,  449,  449,  449,  305,  305,  599,  599,
      599,  305,  599,  305,  305,  599,  599,  305,  305,  457,
      457,  599,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  458,  458,  458,  458,  599,  458,  458,  458,
      458,  458,  458,  458,  458,  310,  599,  310,  310,  599,
      310,  317,  599,  599,  599,  317,  317,  317,  317,  317,
      317,  317,  599,  317,  322,  322,  599,  322,  599,  322,

      322,  322,  322,  322,  322,  322,  322,  333,  599,  333,
      333,  599,  333,  464,  464,  599,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  338,  599,  338,  338,
      599,  338,  339,  599,  599,  599,  599,  339,  599,  339,
      339,  339,  339,  339,  339,  342,  599,  599,  342,  599,
      599,  599,  599,  342,  342,  599,  342,  467,  599,  599,
      599,  599,  599,  467,  599,  467,  467,  599,  467,  344,
      344,  599,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  472,  472,  599,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  353,  599,
      353,  353,  599,  353,  473,  473,  599,  473,  356,  356,
      599,  356,  356,  599,  356,  475,  475,  599,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  367,  599,
      599,  599,  599,  367,  367,  367,  367,  367,  367,  367,
      367,  480,  599,  599,  599,  599,  599,  480,  599,  480,
      480,  599,  480,  482,  482,  599,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  380,  380,  599,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  488,
      599,  488,  387,  599,  387,  387,  599,  387,  395,  599,

      395,  395,  599,  395,  399,  399,  599,  599,  399,  399,
      399,  399,  399,  399,  399,  599,  399,  404,  404,  599,
      599,  404,  404,  404,  404,  404,  404,  404,  599,  404,
      409,  409,  409,  599,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  500,  599,  599,  599,  599,  599,  599,
      599,  500,  500,  599,  500,  416,  599,  599,  599,  599,
      416,  416,  599,  416,  416,  599,  416,  422,  599,  599,
      599,  422,  599,  422,  599,  422,  422,  599,  422,  504,
      599,  599,  599,  599,  599,  599,  599,  504,  504,  599,
      504,  428,  599,  599,  599,  599,  428,  428,  599,  428,

      428,  599,  428,  429,  599,  599,  599,  429,  599,  429,
      429,  429,  429,  599,  429,  431,  431,  599,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  432,  432,
      599,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  438,  599,  599,  599,  599,  599,  599,  599,  438,
      438,  599,  438,  508,  599,  599,  599,  508,  599,  508,
      508,  508,  508,  599,  508,  282,  599,  599,  599,  282,
      599,  282,  282,  282,  282,  599,  282,  444,  599,  599,
      599,  444,  599,  444,  444,  444,  444,  599,  444,  298,
      599,  599,  599,  298,  599,  298,  298,  298,  298,  599,

      298,  457,  457,  599,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  310,  310,  599,  310,  310,  599,
      310,  464,  464,  599,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  530,  530,  599,  530,  530,  599,
      530,  533,  533,  533,  533,  599,  533,  533,  533,  533,
      533,  533,  533,  533,  545,  599,  599,  599,  599,  545,
      545,  599,  545,  545,  599,  545,  547,  599,  599,  599,
      599,  547,  547,  599,  547,  547,  599,  547,  560,  560,
      599,  560,  575,  599,  599,  599,  599,  599,  575,  575,
      575,  575,  599,  575,  577,  577,  599,  577,  586,  599,

      599,  599,  599,  599,  586,  586,  586,  586,  599,  586,
       55,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599
    } ;

static yyconst flex_int16_t yy_chk[3067] =
    {   0,
        0,  106,    1,    2,   63,  106,   63,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    7,    8,  136,  136,   35,    7,
        8,    9,    9,   35,    9,   10,   10,    9,   10,   11,
      461,   10,   11,   36,   11,   12,   12,   45,   36,   12,

       46,   12,   45,  109,   47,   46,   47,  109,   92,   47,
       48,   92,   48,    9,  597,   48,  461,   10,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,   17,
       76,   17,   17,   39,   17,   39,  111,   40,   39,   40,
      596,   17,   40,  111,   41,   42,   41,   42,  129,   41,
       42,  594,  129,  111,   43,   17,   43,   17,   44,   43,
       44,  323,   68,   44,   39,  323,   76,   76,   40,   76,
       68,   76,  593,   68,   17,   41,   42,   17,   18,   18,
       68,   18,   18,  133,   18,   43,  133,  179,  179,   44,
       69,   18,  592,   69,  591,   71,   69,   73,   69,  185,

       73,   69,  185,   71,   72,   18,   71,   18,   69,  188,
      188,  195,   72,   71,  195,   72,  198,  198,  233,  233,
      589,   73,   72,   74,   18,  583,   74,   18,   19,   82,
       19,  579,   82,   19,   19,   19,  211,   71,   19,  211,
       73,  436,   72,   70,   77,   19,   70,   74,  571,   70,
      565,   70,   77,   82,   70,   77,   81,  556,   19,  436,
       19,   70,   77,   74,   81,   78,   74,   81,   78,  548,
       70,   78,   82,   78,   81,  253,   78,  541,   19,   19,
       20,   83,   20,   78,   83,   20,   20,   20,  253,   70,
       20,   80,  530,   93,   81,   79,   93,   20,   79,   80,

      527,   79,   80,   79,   96,   83,   79,   96,  299,   80,
       20,  134,   20,   79,  134,  227,  135,   93,  227,  135,
      186,   83,   79,  186,   83,  519,  187,  450,   96,  187,
       20,   20,   21,   80,   21,  134,   93,   21,   21,   21,
      135,   79,  196,  313,  186,  196,  313,   96,   21,  197,
      187,  518,  197,  299,  134,  213,  237,  237,  213,  135,
      263,  269,   21,  186,   21,  242,  196,  242,  263,  187,
      242,  263,  450,  197,  269,  207,  207,  207,  207,  213,
      264,  264,   21,   21,   22,  196,   22,  207,  207,   22,
       22,   22,  197,  206,  206,  206,  206,  325,  213,  340,

       22,  325,  507,  340,  207,  206,  206,  254,  215,  228,
      206,  215,  228,  271,   22,  229,   22,  503,  229,  279,
      254,  271,  206,  345,  271,  349,  345,  279,  349,  502,
      279,  271,  215,  228,   22,   22,   23,  279,   23,  229,
      499,   23,   23,   23,  492,  280,   23,  328,  414,  282,
      254,  215,  228,  280,  328,  350,  350,  282,  229,  491,
      282,  414,  287,  280,  328,  490,   23,  282,   23,  365,
      287,  286,  365,  287,  286,  291,  489,  286,  375,  286,
      287,  375,  286,  357,  357,  488,   23,   23,   24,  286,
       24,  288,  289,   24,   24,   24,  485,  287,   24,  288,

      289,  488,  288,  289,  366,  366,  376,  376,  484,  288,
      289,  291,  291,  292,  291,  297,  291,  298,   24,  392,
       24,  292,  392,  297,  292,  298,  297,  483,  298,  398,
      288,  292,  398,  297,  481,  298,  289,  480,   24,   24,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       29,   29,   29,  416,   29,   29,  479,   29,  477,  290,
      476,  294,  382,  382,  382,  293,  416,  290,  417,  294,
      290,   29,  294,  293,  295,  474,  293,  290,   29,  294,
       29,  417,  295,  293,  473,  295,  402,  402,  407,  407,
      517,  410,  295,  410,  423,  423,  410,   29,  426,  294,

       29,   30,   30,   30,  290,   30,   30,  293,   30,  494,
      494,  426,  428,  417,  471,  300,  296,  468,  300,  560,
      295,  300,   30,  300,  296,  428,  300,  296,  301,   30,
      419,   30,  302,  300,  296,  517,  301,  560,  419,  301,
      302,  419,  467,  302,  496,  496,  301,  466,   30,  303,
      302,   30,   31,   31,  304,   31,   31,  303,   31,  296,
      303,  500,  304,  301,  538,  304,  538,  303,  538,  538,
      538,  302,  304,  504,  500,  383,  383,  383,  383,   31,
      460,   31,  384,  384,  384,  384,  504,  383,  383,  422,
      562,  562,  562,  303,  384,  384,  574,  422,   31,  304,

      422,   31,   32,   32,  383,   32,   32,  429,   32,  438,
      545,  384,  459,  456,  574,  429,  451,  438,  429,  437,
      438,  435,  441,  545,  444,  429,  453,  438,  508,   32,
      441,   32,  444,  441,  453,  444,  508,  453,  434,  508,
      441,  430,  444,  427,  453,  425,  508,  421,   32,  418,
      415,   32,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   97,   97,  413,
       97,  412,  575,   97,  577,   97,   97,   97,   97,   97,
       97,  546,   97,   97,   97,   97,   97,   97,   97,  547,
      575,  578,  577,  411,  546,  585,  588,  440,  564,   97,
       97,   97,  547,  501,  578,  440,  442,  409,  440,  588,
      405,  564,  400,  585,  442,  440,  501,  442,  443,   97,
       97,   97,  316,  316,  442,  316,  443,  546,  316,  443,
      316,  316,  316,  316,  316,  316,  443,  316,  316,  316,

      316,  316,  316,  316,  440,  397,  564,  501,  586,  442,
      445,  396,  446,  394,  316,  316,  316,  393,  445,  391,
      446,  445,  443,  446,  390,  389,  586,  388,  445,  447,
      446,  448,  381,  379,  316,  316,  316,  447,  378,  448,
      447,  374,  448,  373,  452,  445,  454,  447,  455,  448,
      509,  446,  452,  372,  454,  452,  455,  454,  509,  455,
      370,  509,  452,  369,  454,  368,  455,  510,  509,  486,
      486,  486,  364,  447,  363,  510,  448,  486,  510,  362,
      486,  361,  359,  356,  354,  510,  348,  511,  512,  454,
      347,  452,  455,  486,  346,  511,  512,  509,  511,  512,

      513,  514,  515,  343,  342,  511,  512,  341,  513,  514,
      515,  513,  514,  515,  516,  520,  337,  336,  513,  514,
      515,  334,  516,  520,  332,  516,  520,  330,  521,  327,
      522,  326,  516,  520,  512,  321,  521,  319,  522,  521,
      318,  522,  523,  549,  315,  515,  521,  513,  522,  314,
      523,  549,  312,  523,  549,  550,  551,  311,  516,  309,
      523,  549,  520,  550,  551,  306,  550,  551,  552,  553,
      285,  284,  281,  550,  551,  278,  552,  553,  277,  552,
      553,  554,  555,  557,  273,  272,  552,  553,  523,  554,
      555,  557,  554,  555,  557,  558,  563,  563,  563,  554,

      555,  557,  270,  558,  551,  266,  558,  563,  559,  566,
      256,  249,  241,  558,  567,  552,  559,  566,  240,  559,
      566,  239,  567,  568,  238,  567,  559,  566,  555,  569,
      236,  568,  567,  231,  568,  570,  223,  569,  222,  212,
      569,  568,  210,  570,  572,  204,  570,  569,  202,  573,
      580,  200,  572,  570,  194,  572,  559,  573,  580,  192,
      573,  580,  572,  581,  582,  191,  184,  573,  580,  584,
      183,  581,  582,  182,  581,  582,  178,  584,  590,  173,
      584,  581,  582,  570,  137,  132,  590,  584,  131,  590,
      130,  124,  122,  118,  115,  114,  590,  600,  600,  600,

      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  615,  110,  104,  102,  101,   95,   94,   89,

      615,  615,   88,  615,  616,  616,   87,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  617,   67,   64,
       62,  617,   61,  617,  617,  617,  617,   60,  617,  618,
       55,    0,    0,    0,    0,    0,    0,  618,  618,    0,
      618,  619,    0,    0,    0,  619,    0,  619,  619,  619,
      619,    0,  619,  620,  620,    0,    0,    0,  620,    0,
      620,  620,    0,    0,  620,  620,  621,  621,    0,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  622,
        0,  622,  622,    0,  622,  623,    0,    0,    0,  623,
      623,  623,  623,  623,  623,  623,    0,  623,  624,  624,

        0,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  625,  625,    0,  625,    0,  625,  625,  625,  625,
      625,  625,  625,  625,  626,    0,  626,  626,    0,  626,
      627,  627,    0,  627,    0,  627,  627,  627,  627,  627,
      627,  627,  627,  628,    0,  628,  628,    0,  628,  629,
        0,    0,    0,    0,  629,    0,  629,  629,  629,  629,
      629,  629,  630,    0,    0,  630,    0,    0,    0,    0,
      630,  630,    0,  630,  631,  631,    0,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  632,  632,    0,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      633,    0,  633,  633,    0,  633,  634,  634,    0,  634,
      634,    0,  634,  635,  635,    0,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  636,    0,    0,    0,
        0,  636,  636,  636,  636,  636,  636,  636,  636,  637,
        0,    0,    0,    0,  637,  637,    0,  637,  638,  638,
        0,  638,    0,  638,  638,  638,  638,  638,  638,  638,
      638,  639,  639,    0,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  640,    0,  640,  640,    0,  640,
      641,    0,  641,  641,    0,  641,  642,  642,    0,    0,
      642,  642,  642,  642,  642,  642,  642,    0,  642,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  644,  644,    0,    0,  644,  644,  644,  644,
      644,  644,  644,    0,  644,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  646,  646,
      646,    0,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  647,    0,    0,    0,    0,  647,  647,    0,  647,
      647,    0,  647,  648,    0,    0,    0,  648,    0,  648,
        0,  648,  648,    0,  648,  649,    0,    0,    0,    0,
      649,  649,    0,  649,  649,    0,  649,  650,    0,    0,
        0,    0,    0,    0,    0,  650,  650,    0,  650,  651,

        0,    0,    0,  651,    0,  651,  651,  651,  651,    0,
      651,  652,  652,    0,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  653,  653,    0,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  654,  654,  654,
      654,    0,  654,  654,  654,  654,  654,  654,  654,  654,
      655,    0,    0,    0,    0,    0,    0,    0,  655,  655,
        0,  655,  656,    0,    0,    0,  656,    0,  656,  656,
      656,  656,    0,  656,  657,  657,  657,  657,  657,  657,
      657,  657,    0,  657,  657,  657,  657,  658,    0,    0,
        0,    0,    0,    0,    0,  658,  658,    0,  658,  659,

        0,    0,    0,  659,    0,  659,  659,  659,  659,    0,
      659,  660,    0,    0,    0,  660,    0,  660,  660,  660,
      660,    0,  660,  661,  661,  661,  661,  661,  661,  661,
      661,    0,  661,  661,  661,  661,  662,  662,    0,    0,
        0,  662,    0,  662,  662,    0,    0,  662,  662,  663,
      663,    0,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  664,  664,  664,  664,    0,  664,  664,  664,
      664,  664,  664,  664,  664,  665,    0,  665,  665,    0,
      665,  666,    0,    0,    0,  666,  666,  666,  666,  666,
      666,  666,    0,  666,  667,  667,    0,  667,    0,  667,

      667,  667,  667,  667,  667,  667,  667,  668,    0,  668,
      668,    0,  668,  669,  669,    0,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  670,    0,  670,  670,
        0,  670,  671,    0,    0,    0,    0,  671,    0,  671,
      671,  671,  671,  671,  671,  672,    0,    0,  672,    0,
        0,    0,    0,  672,  672,    0,  672,  673,    0,    0,
        0,    0,    0,  673,    0,  673,  673,    0,  673,  674,
      674,    0,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  676,  676,    0,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  677,    0,
      677,  677,    0,  677,  678,  678,    0,  678,  679,  679,
        0,  679,  679,    0,  679,  680,  680,    0,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  681,    0,
        0,    0,    0,  681,  681,  681,  681,  681,  681,  681,
      681,  682,    0,    0,    0,    0,    0,  682,    0,  682,
      682,    0,  682,  683,  683,    0,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  684,  684,    0,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  685,
        0,  685,  686,    0,  686,  686,    0,  686,  687,    0,

      687,  687,    0,  687,  688,  688,    0,    0,  688,  688,
      688,  688,  688,  688,  688,    0,  688,  689,  689,    0,
        0,  689,  689,  689,  689,  689,  689,  689,    0,  689,
      690,  690,  690,    0,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  691,    0,    0,    0,    0,    0,    0,
        0,  691,  691,    0,  691,  692,    0,    0,    0,    0,
      692,  692,    0,  692,  692,    0,  692,  693,    0,    0,
        0,  693,    0,  693,    0,  693,  693,    0,  693,  694,
        0,    0,    0,    0,    0,    0,    0,  694,  694,    0,
      694,  695,    0,    0,    0,    0,  695,  695,    0,  695,

      695,    0,  695,  696,    0,    0,    0,  696,    0,  696,
      696,  696,  696,    0,  696,  697,  697,    0,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  698,  698,
        0,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  699,    0,    0,    0,    0,    0,    0,    0,  699,
      699,    0,  699,  700,    0,    0,    0,  700,    0,  700,
      700,  700,  700,    0,  700,  701,    0,    0,    0,  701,
        0,  701,  701,  701,  701,    0,  701,  702,    0,    0,
        0,  702,    0,  702,  702,  702,  702,    0,  702,  703,
        0,    0,    0,  703,    0,  703,  703,  703,  703,    0,

      703,  704,  704,    0,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  705,  705,    0,  705,  705,    0,
      705,  706,  706,    0,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  707,  707,    0,  707,  707,    0,
      707,  708,  708,  708,  708,    0,  708,  708,  708,  708,
      708,  708,  708,  708,  709,    0,    0,    0,    0,  709,
      709,    0,  709,  709,    0,  709,  710,    0,    0,    0,
        0,  710,  710,    0,  710,  710,    0,  710,  711,  711,
        0,  711,  712,    0,    0,    0,    0,    0,  712,  712,
      712,  712,    0,  712,  713,  713,    0,  713,  714,    0,

        0,    0,    0,    0,  714,  714,  714,  714,    0,  714,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pyscanner.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */

#line 33 "pyscanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <qfile.h>
#include <qfileinfo.h>
  
#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "arguments.h"
#include "markdown.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

/* ----------------------------------------------------------------- */

struct pyscannerYY_state
{
  pyscannerYY_state() : packageNameCache(257) {}
  CommentScanner          commentScanner;
  OutlineParserInterface *thisParser = 0;
  const char *            inputString = 0;
  int                     inputPosition = 0;
  Protection              protection = Public;
  std::shared_ptr<Entry>  current_root;
  std::shared_ptr<Entry>  current;
  std::shared_ptr<Entry>  previous;
  std::shared_ptr<Entry>  bodyEntry;
  int                     yyLineNr = 1 ;
  QCString                yyFileName;
  MethodTypes             mtype = Method;
  bool                    stat = FALSE;
  Specifier               virt = Normal;
  int                     docBlockContext = 0;
  QCString                docBlock;
  bool                    docBlockInBody = FALSE;
  bool                    docBlockJavaStyle = FALSE;
  bool                    docBrief = FALSE;
  bool                    docBlockSpecial = FALSE;
  bool                    doubleQuote = FALSE;
  bool                    specialBlock = FALSE;
  int                     stringContext = 0;
  QGString *              copyString = 0;
  int                     indent = 0;
  int                     curIndent = 0;
  bool                    importTuple = FALSE;
  QDict<QCString>         packageNameCache;
  char                    atomStart = 0;
  char                    atomEnd = 0;
  int                     atomCount = 0;
  QCString                moduleScope;
  QCString                packageName;
  QGString                defVal;
  int                     braceCount = 0;
  bool                    lexInit = FALSE;
  bool                    packageCommentAllowed = FALSE;
  bool                    start_init = FALSE;
  int                     search_count = 0;
  QCString                argType;
  bool                    funcParamsEnd = FALSE;
};

//-----------------------------------------------------------------------------
static const char *stateToString(int state);

static inline int computeIndent(const char *s);

static void initParser(yyscan_t yyscanner);
static void initEntry(yyscan_t yyscanner);
static void newEntry(yyscan_t yyscanner);
static void newVariable(yyscan_t yyscanner);
static void newFunction(yyscan_t yyscanner);
static QCString findPackageScopeFromPath(yyscan_t yyscanner,const QCString &path);
static void addFrom(yyscan_t yyscanner,bool all);
static void lineCount(yyscan_t yyscanner);
static void incLineNr(yyscan_t yyscanner);
static void startCommentBlock(yyscan_t yyscanner,bool brief);
static void handleCommentBlock(yyscan_t yyscanner,const QCString &doc,bool brief);
static void endOfDef(yyscan_t yyscanner,int correction=0);
static inline void addToString(yyscan_t yyscanner,const char *s);
static void initTriDoubleQuoteBlock(yyscan_t yyscanner);
static void initTriSingleQuoteBlock(yyscan_t yyscanner);
static void initSpecialBlock(yyscan_t yyscanner);
static void searchFoundDef(yyscan_t yyscanner);
static void searchFoundClass(yyscan_t yyscanner);
static QCString findPackageScope(yyscan_t yyscanner,const char *fileName);
static int yyread(yyscan_t yyscanner,char *buf,int max_size);

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */






/* Class states */




/* Variable states */



/* String states */





/* import */



#line 1653 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pyscanner.cpp"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionAnnotation 9
#define FunctionTypeAnnotation 10
#define FunctionParamDefVal 11
#define ClassDec 12
#define ClassInheritance 13
#define ClassCaptureIndent 14
#define ClassBody 15
#define VariableDec 16
#define VariableEnd 17
#define VariableAtom 18
#define SingleQuoteString 19
#define DoubleQuoteString 20
#define TripleString 21
#define SingleQuoteStringIgnore 22
#define DoubleQuoteStringIgnore 23
#define FromMod 24
#define FromModItem 25
#define Import 26

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct pyscannerYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int pyscannerYYlex_init (yyscan_t* scanner);

int pyscannerYYlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pyscannerYYlex_destroy (yyscan_t yyscanner );

int pyscannerYYget_debug (yyscan_t yyscanner );

void pyscannerYYset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE pyscannerYYget_extra (yyscan_t yyscanner );

void pyscannerYYset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *pyscannerYYget_in (yyscan_t yyscanner );

void pyscannerYYset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *pyscannerYYget_out (yyscan_t yyscanner );

void pyscannerYYset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t pyscannerYYget_leng (yyscan_t yyscanner );

char *pyscannerYYget_text (yyscan_t yyscanner );

int pyscannerYYget_lineno (yyscan_t yyscanner );

void pyscannerYYset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscannerYYwrap (yyscan_t yyscanner );
#else
extern int pyscannerYYwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscannerYYlex (yyscan_t yyscanner);

#define YY_DECL int pyscannerYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 244 "pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 1917 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pyscanner.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)pyscannerYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pyscannerYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				pyscannerYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		pyscannerYY_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 600 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 599 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 250 "pyscanner.l"
{ // start of a function/method definition with indent
      			  DBG_CTX((stderr,"Found def at %d\n",yyextra->yyLineNr));
      			  yyextra->indent=computeIndent(yytext);
			  searchFoundDef(yyscanner);
			  BEGIN( FunctionDec );
      			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 256 "pyscanner.l"
{ // start of a function/method definition
			  searchFoundDef(yyscanner);
			  BEGIN( FunctionDec );
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 261 "pyscanner.l"
{ // start of a class definition with indent
       			  DBG_CTX((stderr,"Found class at %d\n",yyextra->yyLineNr));
      			  yyextra->indent=computeIndent(yytext);
			  searchFoundClass(yyscanner);
			  BEGIN( ClassDec ) ;
       			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 267 "pyscanner.l"
{  // start of a class definition
			  searchFoundClass(yyscanner);
			  BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 5:
#line 272 "pyscanner.l"
case 6:
YY_RULE_SETUP
#line 272 "pyscanner.l"
{ // start of an from import
			  yyextra->packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 7:
#line 278 "pyscanner.l"
case 8:
YY_RULE_SETUP
#line 278 "pyscanner.l"
{ // start of an import statement
			  yyextra->packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 282 "pyscanner.l"
{ // property
      			yyextra->current->section   = Entry::VARIABLE_SEC;
  			yyextra->current->mtype     = Property;
			yyextra->current->name      = QCString(yytext).stripWhiteSpace();
			yyextra->current->fileName  = yyextra->yyFileName;
			yyextra->current->startLine = yyextra->yyLineNr;
			yyextra->current->bodyLine  = yyextra->yyLineNr;
			yyextra->packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
       	              }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 292 "pyscanner.l"
{ // variable
                        if (yyextra->search_count) REJECT;
      			yyextra->indent=computeIndent(yytext);
      			yyextra->current->section   = Entry::VARIABLE_SEC;
			yyextra->current->name      = QCString(yytext).stripWhiteSpace();
			yyextra->current->fileName  = yyextra->yyFileName;
			yyextra->current->startLine = yyextra->yyLineNr;
			yyextra->current->bodyLine  = yyextra->yyLineNr;
			yyextra->packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
      		      }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 303 "pyscanner.l"
{ // list of variables, we cannot place the default value
                                                               // so we will skip it later on in a general rule
                                                               // Also note ")" this is to catch also (a,b). the "("
                                                               // is caught in the rule: [(], the ")" will be handled in [)]
                        if (yyextra->search_count > 1) REJECT;
      			yyextra->indent=computeIndent(yytext);
      			yyextra->current->section   = Entry::VARIABLE_SEC;
			yyextra->current->name      = QCString(yytext).stripWhiteSpace();
			yyextra->current->fileName  = yyextra->yyFileName;
			yyextra->current->startLine = yyextra->yyLineNr;
			yyextra->current->bodyLine  = yyextra->yyLineNr;
			yyextra->packageCommentAllowed = FALSE;
			newVariable(yyscanner);
      		      }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 317 "pyscanner.l"
{ // start of a single quoted string
       		        yyextra->stringContext=YY_START;
		        yyextra->copyString=0;
			yyextra->packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 323 "pyscanner.l"
{ // start of a double quoted string
       	                yyextra->stringContext=YY_START;
			yyextra->copyString=0;
			yyextra->packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 329 "pyscanner.l"
{
       			yyextra->stat=TRUE;
      		      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 332 "pyscanner.l"
{ // Unix type script comment
                        if (yyextra->yyLineNr != 1) REJECT;
      		      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 335 "pyscanner.l"
{ // normal comment 
			yyextra->packageCommentAllowed = FALSE;
      		      }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 338 "pyscanner.l"
{ // some other identifier
			yyextra->packageCommentAllowed = FALSE;
		      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 341 "pyscanner.l"
{
      			yyextra->curIndent=computeIndent(yytext);
                      }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 345 "pyscanner.l"
{ // new line
                        lineCount(yyscanner);
                      }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 349 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 354 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 359 "pyscanner.l"
{  // start of a special comment
      			yyextra->curIndent=computeIndent(yytext);
			yyextra->packageCommentAllowed = FALSE;
			initSpecialBlock(yyscanner);
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 365 "pyscanner.l"
{ // we have to do something with (
                        yyextra->search_count += 1;
                      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 368 "pyscanner.l"
{ // we have to do something with )
                        yyextra->search_count -= 1;
                      }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 371 "pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK


case 26:
YY_RULE_SETUP
#line 379 "pyscanner.l"
{ // python3 style imports
                      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 381 "pyscanner.l"
{ // from package import 
                        yyextra->packageName=yytext;
		      }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 384 "pyscanner.l"
{
    			BEGIN(FromModItem);
    		      }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 387 "pyscanner.l"
{
                        incLineNr(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 391 "pyscanner.l"
{
		      }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 393 "pyscanner.l"
{
                        unput(*yytext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 32:
YY_RULE_SETUP
#line 400 "pyscanner.l"
{ // import all
                  addFrom(yyscanner,TRUE);
                  BEGIN(Search);
    		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 404 "pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
		}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 407 "pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 410 "pyscanner.l"
{
                  addFrom(yyscanner,FALSE);
                  if (!yyextra->importTuple)
                  {
                    BEGIN(Search);
                  }
		}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 417 "pyscanner.l"
{
                  incLineNr(yyscanner);
                  if (!yyextra->importTuple)
                  {
                    BEGIN(Search);
                  }
                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 424 "pyscanner.l"
{
		}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 426 "pyscanner.l"
{
                  yyextra->importTuple=TRUE;
                }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 429 "pyscanner.l"
{
                  yyextra->importTuple=FALSE;
                  BEGIN(Search);
                }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 433 "pyscanner.l"
{
  		}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 435 "pyscanner.l"
{ // line continuation
                  incLineNr(yyscanner);
                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 438 "pyscanner.l"
{
                  unput(*yytext);
                  BEGIN(Search);
                }
	YY_BREAK


case 43:
YY_RULE_SETUP
#line 445 "pyscanner.l"
{
			yyextra->current->name=removeRedundantWhiteSpace(substitute(yytext,".","::"));
			yyextra->current->fileName = yyextra->yyFileName; 
			//printf("Adding using declaration: found:%s:%d name=%s\n",yyextra->yyFileName.data(),yyextra->yyLineNr,yyextra->current->name.data());
			yyextra->current->section=Entry::USINGDECL_SEC;
			yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
			initEntry(yyscanner);
			BEGIN(Search);
                      }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 454 "pyscanner.l"
{
                  incLineNr(yyscanner);
                  BEGIN(Search);
                }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 458 "pyscanner.l"
{
		}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 460 "pyscanner.l"
{
                  unput(*yytext);
                  BEGIN(Search);
                }
	YY_BREAK


case 47:
YY_RULE_SETUP
#line 467 "pyscanner.l"
{
                        DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n",&yytext[5],yyextra->current_root->name.data(),yyextra->yyLineNr));
			yyextra->current->name=&yytext[5];
			yyextra->current->section=Entry::VARIABLE_SEC;
			yyextra->current->fileName  = yyextra->yyFileName;
			yyextra->current->startLine = yyextra->yyLineNr;
			yyextra->current->bodyLine  = yyextra->yyLineNr;
			yyextra->current->type.resize(0);
			if (yyextra->current->name.at(0)=='_') // mark as private
			{
			  yyextra->current->protection=Private;
			}
			newEntry(yyscanner);
                      }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 481 "pyscanner.l"
{
                        DBG_CTX((stderr,"Found class method variable %s in %s at %d\n",&yytext[4],yyextra->current_root->name.data(),yyextra->yyLineNr));
			yyextra->current->name=&yytext[4];
			yyextra->current->section=Entry::VARIABLE_SEC;
			yyextra->current->fileName  = yyextra->yyFileName;
			yyextra->current->startLine = yyextra->yyLineNr;
			yyextra->current->bodyLine  = yyextra->yyLineNr;
			yyextra->current->type.resize(0);
			if (yyextra->current->name.at(0)=='_') // mark as private
			{
			  yyextra->current->protection=Private;
			}
			newEntry(yyscanner);
                      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 495 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 500 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 505 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock(yyscanner);
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 509 "pyscanner.l"
{ // #
	              }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 511 "pyscanner.l"
{ // start of a single quoted string
       			yyextra->stringContext=YY_START;
			yyextra->copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 516 "pyscanner.l"
{ // start of a double quoted string
       			yyextra->stringContext=YY_START;
			yyextra->copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 521 "pyscanner.l"
{ incLineNr(yyscanner); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 522 "pyscanner.l"
// identifiers
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 523 "pyscanner.l"
// other uninteresting stuff
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 524 "pyscanner.l"
// anything else
	YY_BREAK


case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 528 "pyscanner.l"
{
                        DBG_CTX((stderr,"indent %d<=%d\n",computeIndent(&yytext[1]),yyextra->indent));
                        if (computeIndent(&yytext[1])<=yyextra->indent) 
			{
			  int i;
			  for (i=(int)yyleng-1;i>=0;i--)
			  {
			    unput(yytext[i]);
			  }
			  endOfDef(yyscanner);
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
                          incLineNr(yyscanner);
      		          yyextra->current->program+=yytext;
			}
                      }
	YY_BREAK
case 60:
/* rule 60 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 547 "pyscanner.l"
{
                        if (computeIndent(&yytext[1])<=yyextra->indent)
			{
			  int i;
			  for (i=(int)yyleng-1;i>=0;i--)
			  {
			    unput(yytext[i]);
			  }
			  endOfDef(yyscanner);
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
			  incLineNr(yyscanner);
      		          yyextra->current->program+=yytext;
			}
      		      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 565 "pyscanner.l"
{
			endOfDef(yyscanner);
			yyterminate();
      		      }
	YY_BREAK
case 61:
/* rule 61 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 569 "pyscanner.l"
{ // skip empty line
      		        yyextra->current->program+=yytext;
      	              }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 572 "pyscanner.l"
{ // something at indent >0
      		        yyextra->current->program+=yytext;
			yyextra->curIndent = computeIndent(yytext);
                        if (yyextra->curIndent<=yyextra->indent) 
			  // jumped out of the function
			{
			  endOfDef(yyscanner,1);
                          BEGIN(Search);
			}
      		      }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 582 "pyscanner.l"
{ // start of a single quoted string
      		        yyextra->current->program+=yytext;
       			yyextra->stringContext=YY_START;
		        yyextra->specialBlock = FALSE; 
			yyextra->copyString=&yyextra->current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 589 "pyscanner.l"
{ // start of a double quoted string
      		        yyextra->current->program+=yytext;
       			yyextra->stringContext=YY_START;
		        yyextra->specialBlock = FALSE; 
			yyextra->copyString=&yyextra->current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 596 "pyscanner.l"
{ // non-special stuff
      		        yyextra->current->program+=yytext;
		        yyextra->specialBlock = FALSE; 
                      }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 600 "pyscanner.l"
{ // normal comment 
      		        yyextra->current->program+=yytext;
      		      }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 603 "pyscanner.l"
{ // comment half way
      		        yyextra->current->program+=yytext;
                      }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 606 "pyscanner.l"
{ 
			incLineNr(yyscanner); 
      		        yyextra->current->program+=yytext;
		      }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 610 "pyscanner.l"
{ // any character
      		        yyextra->current->program+=*yytext;
		        yyextra->specialBlock = FALSE; 
                      }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 615 "pyscanner.l"
{ // start of a comment block
			yyextra->current->program+=yytext;
			initTriDoubleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 621 "pyscanner.l"
{ // start of a comment block
			yyextra->current->program+=yytext;
			initTriSingleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 72:
/* rule 72 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 627 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock(yyscanner);
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 73:
YY_RULE_SETUP
#line 635 "pyscanner.l"
{
			      //found function name
			      if (yyextra->current->type.isEmpty()) 
			      {
				  yyextra->current->type = "def";
			      }
			      yyextra->current->name = yytext;
			      yyextra->current->name = yyextra->current->name.stripWhiteSpace();
			      newFunction(yyscanner);
                            }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 645 "pyscanner.l"
{ // function without arguments
			      yyextra->specialBlock = TRUE; // expecting a docstring
			      yyextra->bodyEntry = yyextra->current;
                              BEGIN(FunctionBody);
			    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 651 "pyscanner.l"
{
			      yyextra->defVal.resize(0);
			      yyextra->braceCount = 0;
			      BEGIN(FunctionTypeAnnotation);
		            }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 656 "pyscanner.l"
{
			      yyextra->funcParamsEnd = FALSE;
                              yyextra->current->bodyLine  = yyextra->yyLineNr;
			      BEGIN(FunctionParams);
		            }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 661 "pyscanner.l"
{ // end of parameter list
                              if (yyextra->current->argList.empty())
                              {
                                yyextra->current->argList.noParameters=TRUE;
                              }
        		      yyextra->current->args = argListToString(yyextra->current->argList);
        		      yyextra->funcParamsEnd = TRUE;
                            }
	YY_BREAK


case 78:
YY_RULE_SETUP
#line 672 "pyscanner.l"
{
                        }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 675 "pyscanner.l"
{
                          yyextra->argType = yytext;
                        }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 678 "pyscanner.l"
{ // Name of parameter
			  lineCount(yyscanner);
			  Argument a;
			  a.name = QCString(yytext).stripWhiteSpace();
			  a.type = yyextra->argType;
			  yyextra->current->argList.push_back(a);
                          yyextra->argType = "";
                        }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 686 "pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
			  yyextra->defVal.resize(0);
			  yyextra->braceCount = 0;
			  BEGIN(FunctionParamDefVal);
      			}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 693 "pyscanner.l"
{
			  unput(*yytext);
			  BEGIN(FunctionDec);
                        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 697 "pyscanner.l"
{
			  yyextra->defVal.resize(0);
			  yyextra->braceCount = 0;
			  BEGIN(FunctionAnnotation);
			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 702 "pyscanner.l"
{ // a comment
			}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 704 "pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 86:
#line 711 "pyscanner.l"
case 87:
#line 712 "pyscanner.l"
case 88:
YY_RULE_SETUP
#line 712 "pyscanner.l"
{
     			  ++yyextra->braceCount;
     			  yyextra->defVal+=*yytext;
     			}
	YY_BREAK
case 89:
#line 717 "pyscanner.l"
case 90:
#line 718 "pyscanner.l"
case 91:
YY_RULE_SETUP
#line 718 "pyscanner.l"
{
			  --yyextra->braceCount;
			  yyextra->defVal+=*yytext;
       			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 722 "pyscanner.l"
{
			  if (yyextra->braceCount == 0)
			  {
			    yyextra->current->type = yyextra->defVal.data();
			    unput(*yytext);
			    BEGIN(FunctionDec);
			  }
			  else
     			    yyextra->defVal+=*yytext;
       			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 732 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
			  yyextra->copyString=&yyextra->defVal;
			  yyextra->stringContext=FunctionTypeAnnotation;
			  BEGIN(SingleQuoteString);
                        }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 738 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
			  yyextra->copyString=&yyextra->defVal;
			  yyextra->stringContext=FunctionTypeAnnotation;
			  BEGIN(DoubleQuoteString);
                        }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 744 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
			  incLineNr(yyscanner);
			}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 748 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
       			}
	YY_BREAK


case 97:
#line 755 "pyscanner.l"
case 98:
#line 756 "pyscanner.l"
case 99:
YY_RULE_SETUP
#line 756 "pyscanner.l"
{
     			  ++yyextra->braceCount;
     			  yyextra->defVal+=*yytext;
     			}
	YY_BREAK
case 100:
#line 761 "pyscanner.l"
case 101:
YY_RULE_SETUP
#line 761 "pyscanner.l"
{
			  --yyextra->braceCount;
			  yyextra->defVal+=*yytext;
       			}
	YY_BREAK
case 102:
#line 766 "pyscanner.l"
case 103:
#line 767 "pyscanner.l"
case 104:
YY_RULE_SETUP
#line 767 "pyscanner.l"
{
			  if (yyextra->braceCount == 0)
			  {
			    if (!yyextra->current->argList.empty())
			      yyextra->current->argList.back().type += yyextra->defVal;
			    if (*yytext != ',')
			      unput(*yytext);
			    BEGIN(FunctionParams);
			  }
			  else
			  {
			    if (*yytext == ')')
			      --yyextra->braceCount;
			    yyextra->defVal += *yytext;
     			  }
       			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 783 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
			  yyextra->copyString=&yyextra->defVal;
			  yyextra->stringContext=FunctionAnnotation;
			  BEGIN(SingleQuoteString);
                        }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 789 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
			  yyextra->copyString=&yyextra->defVal;
			  yyextra->stringContext=FunctionAnnotation;
			  BEGIN(DoubleQuoteString);
                        }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 795 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
			  incLineNr(yyscanner);
       			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 799 "pyscanner.l"
{
			  yyextra->defVal+=*yytext;
       			}
	YY_BREAK


case 109:
#line 806 "pyscanner.l"
case 110:
#line 807 "pyscanner.l"
case 111:
YY_RULE_SETUP
#line 807 "pyscanner.l"
{ // internal opening brace, assumption is that we have correct code so braces do match
       			  ++yyextra->braceCount;
			  yyextra->defVal+=*yytext;
       			}
	YY_BREAK
case 112:
#line 812 "pyscanner.l"
case 113:
YY_RULE_SETUP
#line 812 "pyscanner.l"
{
			  --yyextra->braceCount;
			  yyextra->defVal+=*yytext;
       			}
	YY_BREAK
case 114:
#line 817 "pyscanner.l"
case 115:
YY_RULE_SETUP
#line 817 "pyscanner.l"
{
			  if (yyextra->braceCount == 0)
			  {
			    if (!yyextra->current->argList.empty())
			      yyextra->current->argList.back().defval=QCString(yyextra->defVal).stripWhiteSpace();
			    if (*yytext == ')')
			      unput(*yytext);
			    BEGIN(FunctionParams);
			  }
     			  else
     			  {
			    if (*yytext == ')')
			      --yyextra->braceCount;
     			    yyextra->defVal += *yytext;
     			  }
       			}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 834 "pyscanner.l"
{
                          yyextra->defVal+=*yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionParamDefVal;
                          BEGIN( SingleQuoteString );
                        }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 840 "pyscanner.l"
{
                          yyextra->defVal+=*yytext;
                          yyextra->copyString=&yyextra->defVal;
                          yyextra->stringContext=FunctionParamDefVal;
                          BEGIN( DoubleQuoteString );
                        }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 846 "pyscanner.l"
{
       			    yyextra->defVal+=*yytext;
			    incLineNr(yyscanner);
       			}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 850 "pyscanner.l"
{
			    yyextra->defVal+=*yytext;
       			}
	YY_BREAK


case 120:
/* rule 120 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 857 "pyscanner.l"
{ // new def at indent 0
                        incLineNr(yyscanner);
			endOfDef(yyscanner);
			//yyextra->hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 864 "pyscanner.l"
{  // start of a special comment at indent 0
                        incLineNr(yyscanner);
			endOfDef(yyscanner);
			//yyextra->hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 122:
/* rule 122 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 871 "pyscanner.l"
{ // skip empty line
      		        yyextra->current->program+=yytext;
      	              }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 874 "pyscanner.l"
{
			endOfDef(yyscanner);
			yyterminate();
      		      }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 878 "pyscanner.l"
{ // something at indent >0
                        yyextra->curIndent=computeIndent(yytext);
			DBG_CTX((stderr,"yyextra->curIndent=%d yyextra->indent=%d\n",yyextra->curIndent,yyextra->indent));
                        if (yyextra->curIndent<=yyextra->indent) 
			  // jumped out of the class/method
			{
			  endOfDef(yyscanner,1);
			  yyextra->indent=yyextra->curIndent;
			  // make sure the next rule matches ^...
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
			  //yyextra->hideClassDocs = FALSE;
                          BEGIN(Search);
			}
			else
			{
      		          yyextra->current->program+=yytext;
			}
      		      }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 896 "pyscanner.l"
{ // start of a single quoted string
      		        yyextra->current->program+=*yytext;
       			yyextra->stringContext=YY_START;
		        yyextra->specialBlock = FALSE; 
			yyextra->copyString=&yyextra->current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 903 "pyscanner.l"
{ // start of a double quoted string
      		        yyextra->current->program+=*yytext;
       			yyextra->stringContext=YY_START;
		        yyextra->specialBlock = FALSE; 
			yyextra->copyString=&yyextra->current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 910 "pyscanner.l"
{ // non-special stuff
      		        yyextra->current->program+=yytext;
		        yyextra->specialBlock = FALSE; 
			//yyextra->hideClassDocs = FALSE;
                      }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 915 "pyscanner.l"
{ 
      		        yyextra->current->program+=*yytext;
			incLineNr(yyscanner); 
		      }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 919 "pyscanner.l"
{ // normal comment
      		        yyextra->current->program+=yytext;
                      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 922 "pyscanner.l"
{ // any character
		        yyextra->specialBlock = FALSE; 
      		        yyextra->current->program+=*yytext;
                      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 926 "pyscanner.l"
{ // start of a comment block
      		        //if (!yyextra->hideClassDocs) 
			yyextra->current->program+=yytext;
			initTriDoubleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 933 "pyscanner.l"
{ // start of a comment block
      		        //if (!yyextra->hideClassDocs) 
			yyextra->current->program+=yytext;
			initTriSingleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK

case 132:
YY_RULE_SETUP
#line 941 "pyscanner.l"
{
			  if (yyextra->current->type.isEmpty()) 
			  {
			      yyextra->current->type = "class";
			  }

			  yyextra->current->section = Entry::CLASS_SEC;
			  yyextra->current->name = yytext;

			  // prepend scope in case of nested classes
			  if (yyextra->current_root->section&Entry::SCOPE_MASK)
			  {
			    //printf("*** Prepending scope %s to class %s\n",yyextra->current_root->name.data(),yyextra->current->name.data());
			    yyextra->current->name.prepend(yyextra->current_root->name+"::");
			  }
			  
			  yyextra->current->name = yyextra->current->name.stripWhiteSpace();
			  yyextra->current->fileName = yyextra->yyFileName;        
			  yyextra->docBlockContext   = YY_START;
			  yyextra->docBlockInBody    = FALSE;
			  yyextra->docBlockJavaStyle = FALSE;
			  yyextra->docBlock.resize(0);

			  BEGIN(ClassInheritance);                 
                        }
	YY_BREAK

case 133:
YY_RULE_SETUP
#line 968 "pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 971 "pyscanner.l"
{ // begin of the class definition
			 yyextra->specialBlock = TRUE; // expecting a docstring
                         yyextra->current->bodyLine  = yyextra->yyLineNr;
			 yyextra->current->program.resize(0);
      			 BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 978 "pyscanner.l"
{
                         yyextra->current->extends.push_back(
					      BaseInfo(substitute(yytext,".","::"),Public,Normal)
					    );
                         //Has base class-do stuff
                       }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 984 "pyscanner.l"
{ // start of a single quoted string
       			 yyextra->stringContext=YY_START;
                         BEGIN( SingleQuoteStringIgnore );
                       }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 988 "pyscanner.l"
{ // start of a double quoted string
       			 yyextra->stringContext=YY_START;
                         BEGIN( DoubleQuoteStringIgnore );
                       }
	YY_BREAK


case 138:
YY_RULE_SETUP
#line 995 "pyscanner.l"
{ // end of a single quoted string
			 BEGIN(yyextra->stringContext);
                       }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 998 "pyscanner.l"
{ }
	YY_BREAK


case 140:
YY_RULE_SETUP
#line 1001 "pyscanner.l"
{ // end of a double quoted string
			 BEGIN(yyextra->stringContext);
                       }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1004 "pyscanner.l"
{ }
	YY_BREAK


case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1008 "pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 lineCount(yyscanner);
      				 yyextra->current->program+=yytext;
                               }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1014 "pyscanner.l"
{ // start of a comment block
				 initTriDoubleQuoteBlock(yyscanner);
      				 yyextra->current->program+=yytext;
			 	 BEGIN(TripleComment);
                      	       }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1019 "pyscanner.l"
{ // start of a comment block
			         initTriSingleQuoteBlock(yyscanner);
      				 yyextra->current->program+=yytext;
			         BEGIN(TripleComment);
                               }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1024 "pyscanner.l"
{  // start of a special comment
                                 initSpecialBlock(yyscanner);
                                 BEGIN(SpecialComment);
                               }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1028 "pyscanner.l"
{ // ignore comment with just one #
                               }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1030 "pyscanner.l"
{
      				 yyextra->current->program+=yytext;
			         //yyextra->current->startLine = yyextra->yyLineNr;
				 yyextra->curIndent=computeIndent(yytext);
				 yyextra->bodyEntry = yyextra->current;
				 DBG_CTX((stderr,"setting indent %d\n",yyextra->curIndent));
				 //printf("yyextra->current->program=[%s]\n",yyextra->current->program.data());
				 //yyextra->hideClassDocs = TRUE;
			         BEGIN(ClassBody);
                               }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1041 "pyscanner.l"
{
				 // Just pushback an empty class, and
				 // resume parsing the body.
                                 newEntry(yyscanner);
      				 yyextra->current->program+=yytext;

				 // printf("Failed to find indent - skipping!");
				 BEGIN( Search );
                               }
	YY_BREAK


case 149:
YY_RULE_SETUP
#line 1054 "pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyextra->yyLineNr);
                        yyextra->start_init = TRUE;
			yyextra->current->initializer = yytext;
			yyextra->current->initializer += " ";
                      }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1060 "pyscanner.l"
{ // spaces
			yyextra->current->initializer += yytext;
	              }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1063 "pyscanner.l"
{ // integer value
			if (yyextra->current-> type.isEmpty()) yyextra->current->type = "int";
			yyextra->current->initializer += yytext;
		      }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1067 "pyscanner.l"
{ // floating point value
			if (yyextra->current->type.isEmpty()) yyextra->current->type = "float";
			yyextra->current->initializer += yytext;
		      }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1071 "pyscanner.l"
{ // boolean value
			if (yyextra->current->type.isEmpty()) yyextra->current->type = "bool";
			yyextra->current->initializer += yytext;
		      }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1075 "pyscanner.l"
{ // string
			if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
			yyextra->current->initializer += yytext;
			yyextra->copyString=&yyextra->current->initializer;
       			yyextra->stringContext=VariableDec;
                        BEGIN( SingleQuoteString );
     		      }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1082 "pyscanner.l"
{ // string
			if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
			yyextra->current->initializer += yytext;
			yyextra->copyString=&yyextra->current->initializer;
       			yyextra->stringContext=VariableDec;
                        BEGIN( DoubleQuoteString );
     		      }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1089 "pyscanner.l"
{ // start of a comment block
			if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
			yyextra->current->initializer += yytext;
			yyextra->doubleQuote=TRUE;
			yyextra->copyString=&yyextra->current->initializer;
       			yyextra->stringContext=VariableDec;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1098 "pyscanner.l"
{ // start of a comment block
			if (yyextra->current->type.isEmpty()) yyextra->current->type = "string";
			yyextra->current->initializer += yytext;
			yyextra->doubleQuote=FALSE;
			yyextra->copyString=&yyextra->current->initializer;
       			yyextra->stringContext=VariableDec;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1106 "pyscanner.l"
{ // tuple, only when direct after =
                        if (yyextra->current->mtype!=Property && yyextra->start_init)
			{
			  yyextra->current->type = "tuple";
			}
      		        yyextra->current->initializer+=*yytext;
                        yyextra->atomStart='(';
			yyextra->atomEnd=')';
			yyextra->atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1117 "pyscanner.l"
{ // list
                        if (yyextra->start_init) yyextra->current->type = "list";
      		        yyextra->current->initializer+=*yytext;
                        yyextra->atomStart='[';
			yyextra->atomEnd=']';
			yyextra->atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1125 "pyscanner.l"
{ // dictionary
                        if (yyextra->start_init) yyextra->current->type = "dictionary";
      		        yyextra->current->initializer+=*yytext;
                        yyextra->atomStart='{';
			yyextra->atomEnd='}';
			yyextra->atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1133 "pyscanner.l"
{ // comment
                        BEGIN( VariableEnd ); 
                      }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1136 "pyscanner.l"
{
			// do something based on the type of the IDENTIFIER
			if (yyextra->current->type.isEmpty())
                        {
                          //QListIterator<Entry> eli(*(yyextra->current_root->children()));
                          //Entry *child;
                          //for (eli.toFirst();(child=eli.yyextra->current());++eli)
                          for (const auto &child : yyextra->current_root->children())
                          {
                            if (child->name == QCString(yytext))
                            {
                               yyextra->current->type = child->type;
                               break;
                            }
                          }
                        }
                        yyextra->start_init = FALSE;
      		        yyextra->current->initializer+=yytext;
	              }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1155 "pyscanner.l"
{
                        yyextra->start_init = FALSE;
      		        yyextra->current->initializer+=*yytext;
                      }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1159 "pyscanner.l"
{
     		        unput('\n');
     			BEGIN( VariableEnd );
     		      }
	YY_BREAK


case 165:
YY_RULE_SETUP
#line 1166 "pyscanner.l"
{
      		        yyextra->current->initializer+=*yytext;
                        if (yyextra->atomStart==*yytext)
			{
			  yyextra->atomCount++;
			}
                      }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1173 "pyscanner.l"
{
      		        yyextra->current->initializer+=*yytext;
                        if (yyextra->atomEnd==*yytext)
			{
			  yyextra->atomCount--;
			}
			if (yyextra->atomCount==0)
			{
                          yyextra->start_init = FALSE;
			  BEGIN(VariableDec);
			}
                      }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1185 "pyscanner.l"
{ // start of a comment block
                        yyextra->specialBlock = FALSE;
			yyextra->current->program+=yytext;
			initTriDoubleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1192 "pyscanner.l"
{ // start of a comment block
                        yyextra->specialBlock = FALSE;
			yyextra->current->program+=yytext;
			initTriSingleQuoteBlock(yyscanner);
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1198 "pyscanner.l"
{
       			yyextra->stringContext=YY_START;
			yyextra->current->initializer+="'";
			yyextra->copyString=&yyextra->current->initializer;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1204 "pyscanner.l"
{
       			yyextra->stringContext=YY_START;
			yyextra->current->initializer+="\"";
			yyextra->copyString=&yyextra->current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1210 "pyscanner.l"
{
      		        yyextra->current->initializer+=yytext;
	              }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1213 "pyscanner.l"
{
      		        yyextra->current->initializer+=*yytext;
                      }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 1216 "pyscanner.l"
{
      		        yyextra->current->initializer+=*yytext;
     			incLineNr(yyscanner);
     		      }
	YY_BREAK


case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 1224 "pyscanner.l"
{
                        incLineNr(yyscanner);
			newVariable(yyscanner);
                        BEGIN(Search);
                      }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1229 "pyscanner.l"
{ 
                        unput(*yytext);
			newVariable(yyscanner);
                        BEGIN(Search);
      		      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1234 "pyscanner.l"
{ yyterminate();
                      }
	YY_BREAK


case 176:
#line 1240 "pyscanner.l"
case 177:
YY_RULE_SETUP
#line 1240 "pyscanner.l"
{
			  // printf("Expected module block %d special=%d\n",yyextra->expectModuleDocs,yyextra->specialBlock);
			  if (yyextra->doubleQuote==(yytext[0]=='"')) 
			  {
			    if (yyextra->specialBlock) // expecting a docstring
			    {
			      QCString actualDoc=yyextra->docBlock;
			      if (!yyextra->docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      //printf("-------> yyextra->current=%p yyextra->bodyEntry=%p\n",yyextra->current,yyextra->bodyEntry);
			      handleCommentBlock(yyscanner, actualDoc, FALSE);
			    }
			    else if (yyextra->packageCommentAllowed) // expecting module docs
			    {
			      QCString actualDoc=yyextra->docBlock;
			      if (!yyextra->docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      actualDoc.prepend("\\namespace "+yyextra->moduleScope+" ");
			      handleCommentBlock(yyscanner, actualDoc, FALSE);
			    }
			    if ((yyextra->docBlockContext==ClassBody /*&& !yyextra->hideClassDocs*/) ||
				yyextra->docBlockContext==FunctionBody)
			    {
			      yyextra->current->program+=yyextra->docBlock;
			      yyextra->current->program+=yytext;
			    }
                            //if (yyextra->hideClassDocs)
			    //{
                            //  yyextra->current->startLine = yyextra->yyLineNr;
			    //}
			    //yyextra->hideClassDocs=FALSE;
			    BEGIN(yyextra->docBlockContext);
			  }
                          else 
			  {
                            yyextra->docBlock += yytext;
                          }
			  yyextra->packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1287 "pyscanner.l"
{ // leading whitespace
      			  int indent = computeIndent(yytext);
			  if (indent>=yyextra->curIndent)
			  { // strip yyextra->curIndent amount of whitespace
			    int i;
			    for (i=0;i<indent-yyextra->curIndent;i++) yyextra->docBlock+=' ';
			    DBG_CTX((stderr,"stripping indent %d\n",yyextra->curIndent));
			  }
			  else
			  {
			    DBG_CTX((stderr,"not stripping: %d<%d\n",indent,yyextra->curIndent));
			    yyextra->docBlock += yytext;
			  }
      			}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1301 "pyscanner.l"
{
			  yyextra->docBlock += yytext;
                        }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 1304 "pyscanner.l"
{
      			  incLineNr(yyscanner);
			  yyextra->docBlock += yytext;
      			}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1308 "pyscanner.l"
{ // escaped char
			  yyextra->docBlock += yytext;
      			}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1311 "pyscanner.l"
{
			  yyextra->docBlock += yytext;
      			}
	YY_BREAK


case 183:
YY_RULE_SETUP
#line 1317 "pyscanner.l"
{ // skip leading hashes
      			}
	YY_BREAK
case 184:
/* rule 184 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1319 "pyscanner.l"
{ // continuation of the comment on the next line
      			  yyextra->docBlock+='\n';
			  yyextra->docBrief = FALSE;
                          startCommentBlock(yyscanner,FALSE);
			  incLineNr(yyscanner);
      			}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1325 "pyscanner.l"
{ // any other stuff
      			  yyextra->docBlock+=yytext;
      			}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 1328 "pyscanner.l"
{ // new line that ends the comment
			  handleCommentBlock(yyscanner, yyextra->docBlock, yyextra->docBrief);
      			  incLineNr(yyscanner);
			  BEGIN(yyextra->docBlockContext);
      			}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1333 "pyscanner.l"
{ // anything we missed
      			  yyextra->docBlock+=*yytext;
      			}
	YY_BREAK


case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 1339 "pyscanner.l"
{ // line continuation
      			         addToString(yyscanner,yytext);
      				 incLineNr(yyscanner);
                               }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1343 "pyscanner.l"
{ // escaped char
      			         addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1346 "pyscanner.l"
{ // triple double quotes
      			         addToString(yyscanner,yytext);
      			       }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1349 "pyscanner.l"
{ // end of the string
      			         addToString(yyscanner,yytext);
      		                 BEGIN(yyextra->stringContext);
                               }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1353 "pyscanner.l"
{ // normal chars
      			         addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1356 "pyscanner.l"
{ // normal char
      			         addToString(yyscanner,yytext);
                               }
	YY_BREAK


case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 1362 "pyscanner.l"
{ // line continuation
      			         addToString(yyscanner,yytext);
      				 incLineNr(yyscanner);
                               }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1366 "pyscanner.l"
{ // escaped char
      			         addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1369 "pyscanner.l"
{ // triple single quotes
      			         addToString(yyscanner,yytext);
      			       }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1372 "pyscanner.l"
{ // end of the string
      			         addToString(yyscanner,yytext);
      		                 BEGIN(yyextra->stringContext);
                               }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1376 "pyscanner.l"
{ // normal chars
      			         addToString(yyscanner,yytext);
                               }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1379 "pyscanner.l"
{ // normal char
      			         addToString(yyscanner,yytext);
                               }
	YY_BREAK


case 200:
#line 1386 "pyscanner.l"
case 201:
YY_RULE_SETUP
#line 1386 "pyscanner.l"
{
                          *yyextra->copyString += yytext;
			  if (yyextra->doubleQuote==(yytext[0]=='"')) 
			  {
			    BEGIN(yyextra->stringContext);
			  }
                        }
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 1395 "pyscanner.l"
{
			  lineCount(yyscanner);
                          *yyextra->copyString += yytext;
                        }
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1399 "pyscanner.l"
{
      			  incLineNr(yyscanner);
                          *yyextra->copyString += yytext;
      			}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1403 "pyscanner.l"
{
                          *yyextra->copyString += *yytext;
      			}
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       yytext, YY_START, yyextra->yyLineNr);

                               }
  */
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 1418 "pyscanner.l"
{
				 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
				 //       YY_START, yyextra->yyLineNr);

                                 lineCount(yyscanner);
                               }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1425 "pyscanner.l"
{
       fprintf(stderr,"Quote: %d\n",YY_START);
                               }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1429 "pyscanner.l"
{
				 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       yytext, YY_START, yyextra->yyLineNr);

                               }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1436 "pyscanner.l"
ECHO;
	YY_BREAK
#line 4013 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pyscanner.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionAnnotation):
			case YY_STATE_EOF(FunctionTypeAnnotation):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(SingleQuoteStringIgnore):
			case YY_STATE_EOF(DoubleQuoteStringIgnore):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * pyscannerYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( pyscannerYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pyscannerYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pyscannerYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pyscannerYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 600 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 600 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 599);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pyscannerYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pyscannerYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pyscannerYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        pyscannerYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            pyscannerYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	pyscannerYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	pyscannerYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void pyscannerYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pyscannerYYpop_buffer_state();
	 *		pyscannerYYpush_buffer_state(new_buffer);
     */
	pyscannerYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pyscannerYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (pyscannerYYwrap()) processing, but the only time this flag
	 * is looked at is after pyscannerYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void pyscannerYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pyscannerYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pyscannerYYalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pyscannerYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscannerYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void pyscannerYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pyscannerYYfree((void *) b->yy_ch_buf ,yyscanner );

	pyscannerYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscannerYYrestart() or at EOF.
 */
    static void pyscannerYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	pyscannerYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pyscannerYY_init_buffer was _probably_
     * called from pyscannerYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void pyscannerYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pyscannerYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void pyscannerYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	pyscannerYYensure_buffer_stack(yyscanner);

	/* This block is copied from pyscannerYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pyscannerYY_switch_to_buffer. */
	pyscannerYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void pyscannerYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	pyscannerYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		pyscannerYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscannerYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)pyscannerYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)pyscannerYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in pyscannerYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pyscannerYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pyscannerYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pyscannerYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscannerYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscannerYY_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return pyscannerYY_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscannerYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscannerYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pyscannerYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscannerYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pyscannerYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pyscannerYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE pyscannerYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int pyscannerYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int pyscannerYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *pyscannerYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *pyscannerYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t pyscannerYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *pyscannerYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void pyscannerYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void pyscannerYYset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "pyscannerYYset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void pyscannerYYset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "pyscannerYYset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see pyscannerYY_switch_to_buffer
 */
void pyscannerYYset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void pyscannerYYset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int pyscannerYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void pyscannerYYset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* pyscannerYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int pyscannerYYlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) pyscannerYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* pyscannerYYlex_init_extra has the same functionality as pyscannerYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to pyscannerYYalloc in
 * the yyextra field.
 */

int pyscannerYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    pyscannerYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) pyscannerYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    pyscannerYYset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pyscannerYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pyscannerYYlex_init()
     */
    return 0;
}

/* pyscannerYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscannerYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pyscannerYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pyscannerYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	pyscannerYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        pyscannerYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    pyscannerYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pyscannerYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    pyscannerYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pyscannerYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *pyscannerYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pyscannerYYfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see pyscannerYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1436 "pyscanner.l"



//----------------------------------------------------------------------------

static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int c=0;
  const char *p = yyextra->inputString + yyextra->inputPosition;
  while ( c < max_size && *p ) { *buf++ = *p++; c++; }
  yyextra->inputPosition+=c;
  return c;
}

static void initParser(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->protection = Public;
  yyextra->mtype = Method;
  yyextra->stat = FALSE;
  yyextra->virt = Normal;
  yyextra->previous = 0;
  yyextra->packageCommentAllowed = TRUE;
  yyextra->packageNameCache.setAutoDelete(TRUE);
}

static void initEntry(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //yyextra->current->python = TRUE;
  yyextra->current->protection = yyextra->protection ;
  yyextra->current->mtype      = yyextra->mtype;
  yyextra->current->virt       = yyextra->virt;
  yyextra->current->stat       = yyextra->stat;
  yyextra->current->lang       = SrcLangExt_Python; 
  yyextra->commentScanner.initGroupInfo(yyextra->current.get());
  yyextra->stat = FALSE;
}

static void newEntry(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->previous = yyextra->current;
  yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  initEntry(yyscanner);
}

static void newVariable(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->name.isEmpty() && yyextra->current->name.at(0)=='_') // mark as private
  {
    yyextra->current->protection=Private;
  }
  if (yyextra->current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    yyextra->current->stat = TRUE;
  }
  newEntry(yyscanner);
}

static void newFunction(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->name.left(2)=="__" && yyextra->current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    yyextra->current->protection=Public;
  }
  else if (yyextra->current->name.at(0)=='_')
  {
    yyextra->current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt(TAB_SIZE);
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(yyscan_t yyscanner,const QCString &path)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString *pScope = yyextra->packageNameCache.find(path);
  if (pScope)
  {
    return *pScope;
  }
  QFileInfo pf(path+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(yyscanner,path.left(i));
      if (!scope.isEmpty())
      {
	scope+="::";
      }
      scope+=path.mid(i+1);
      yyextra->packageNameCache.insert(path,new QCString(scope));
      return scope;
    }
  }
  return "";
}
  
static QCString findPackageScope(yyscan_t yyscanner,const char *fileName)
{
  if (fileName==0) return "";
  QFileInfo fi(fileName);
  return findPackageScopeFromPath(yyscanner,fi.dirPath(TRUE).data());
}

static void addFrom(yyscan_t yyscanner,bool all)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString item=all ? yyextra->packageName : yyextra->packageName+"."+yytext;
  yyextra->current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
  yyextra->current->fileName = yyextra->yyFileName; 
  //printf("Adding using declaration: found:%s:%d name=%s\n",yyextra->yyFileName.data(),yyextra->yyLineNr,yyextra->current->name.data());
  yyextra->current->section=all ? Entry::USINGDIR_SEC : Entry::USINGDECL_SEC;
  yyextra->current_root->moveToSubEntryAndRefresh(yyextra->current);
  initEntry(yyscanner);
}
//-----------------------------------------------------------------------------

static void lineCount(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  DBG_CTX((stderr,"yyextra->yyLineNr=%d\n",yyextra->yyLineNr));
  for (const char *p = yytext; *p; ++p)
  {
    yyextra->yyLineNr += (*p == '\n') ;
  }
}

static void incLineNr(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  DBG_CTX((stderr,"yyextra->yyLineNr=%d\n",yyextra->yyLineNr));
  yyextra->yyLineNr++;
}

//-----------------------------------------------------------------
static void startCommentBlock(yyscan_t yyscanner,bool brief)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (brief)
  {
    yyextra->current->briefFile = yyextra->yyFileName;
    yyextra->current->briefLine = yyextra->yyLineNr;
  }
  else
  {
    yyextra->current->docFile = yyextra->yyFileName;
    yyextra->current->docLine = yyextra->yyLineNr;
  }
}

static void handleCommentBlock(yyscan_t yyscanner,const QCString &doc,bool brief)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("handleCommentBlock(doc=[%s] brief=%d yyextra->docBlockInBody=%d yyextra->docBlockJavaStyle=%d\n",
  //    doc.data(),brief,yyextra->docBlockInBody,yyextra->docBlockJavaStyle);

  // TODO: Fix me
  yyextra->docBlockInBody=FALSE;
  
  if (yyextra->docBlockInBody && yyextra->previous && !yyextra->previous->doc.isEmpty())
  {
    yyextra->previous->doc=yyextra->previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry;
  int lineNr = brief ? yyextra->current->briefLine : yyextra->current->docLine;
  QCString processedDoc = processMarkdownForCommentBlock(doc,yyextra->yyFileName,lineNr);
  while (yyextra->commentScanner.parseCommentBlock(
        yyextra->thisParser,
        (yyextra->docBlockInBody && yyextra->previous) ? yyextra->previous.get() : yyextra->current.get(),
        processedDoc, // text
        yyextra->yyFileName,   // file
        lineNr,
        yyextra->docBlockInBody ? FALSE : brief, 
        yyextra->docBlockJavaStyle, // javadoc style // or FALSE,
        yyextra->docBlockInBody,
        yyextra->protection,
        position,
        needsEntry)
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry(yyscanner);
    }
  }
  if (needsEntry)
  {
    newEntry(yyscanner);
  }

}

static void endOfDef(yyscan_t yyscanner,int correction)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("endOfDef at=%d\n",yyextra->yyLineNr);
  if (yyextra->bodyEntry)
  {
    yyextra->bodyEntry->endBodyLine  = yyextra->yyLineNr-correction;
    yyextra->bodyEntry = 0;
  }
  newEntry(yyscanner);
  //yyextra->insideConstructor = FALSE;
}

static inline void addToString(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->copyString) (*yyextra->copyString)+=s;
}

static void initTriDoubleQuoteBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBlockSpecial   = yytext[strlen(yytext) - 1]=='!';
  yyextra->docBlock.resize(0);
  yyextra->doubleQuote = TRUE;
  startCommentBlock(yyscanner,FALSE);
}

static void initTriSingleQuoteBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBlockSpecial   = yytext[strlen(yytext) - 1]=='!';
  yyextra->docBlock.resize(0);
  yyextra->doubleQuote = FALSE;
  startCommentBlock(yyscanner,FALSE);
}

static void initSpecialBlock(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->docBlockContext   = YY_START;
  yyextra->docBlockInBody    = FALSE;
  yyextra->docBlockJavaStyle = TRUE;
  yyextra->docBrief = TRUE;
  yyextra->docBlock.resize(0);
  startCommentBlock(yyscanner,TRUE);
}

static void searchFoundDef(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->fileName  = yyextra->yyFileName;
  yyextra->current->startLine = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;
  yyextra->current->section = Entry::FUNCTION_SEC;
  yyextra->current->lang = SrcLangExt_Python;
  yyextra->current->virt = Normal;
  yyextra->current->stat = yyextra->stat;
  yyextra->current->mtype = yyextra->mtype = Method;
  yyextra->current->type.resize(0);
  yyextra->current->name.resize(0);
  yyextra->current->args.resize(0);
  yyextra->current->argList.clear();
  yyextra->packageCommentAllowed = FALSE;
  yyextra->stat=FALSE;
  //printf("searchFoundDef at=%d\n",yyextra->yyLineNr);
}

static void searchFoundClass(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->section = Entry::CLASS_SEC;
  yyextra->current->argList.clear();
  yyextra->current->type += "class" ;
  yyextra->current->fileName  = yyextra->yyFileName;
  yyextra->current->startLine  = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;
  yyextra->packageCommentAllowed = FALSE;
}

//----------------------------------------------------------------------------

static void parseCompounds(yyscan_t yyscanner,std::shared_ptr<Entry> rt)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("parseCompounds(%s)\n",rt->name.data());
  for (int i=0; i<rt->children().size(); ++i)
  {
    std::shared_ptr<Entry> ce = rt->children()[i];
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      yyextra->inputString = ce->program;
      yyextra->inputPosition = 0;
      pyscannerYYrestart( 0, yyscanner );
      if (ce->section&Entry::COMPOUND_MASK)
      {
        yyextra->current_root = ce;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        yyextra->current_root = rt;
	//printf("Searching for member variables in %s parent=%s\n",
	//    ce->name.data(),ce->parent->name.data());
	BEGIN( SearchMemVars );
      }
      yyextra->yyFileName = ce->fileName;
      yyextra->yyLineNr   = ce->bodyLine ;
      yyextra->current = std::make_shared<Entry>();
      initEntry(yyscanner);

      QCString name = ce->name;
      yyextra->commentScanner.enterCompound(yyextra->yyFileName,yyextra->yyLineNr,name);

      pyscannerYYlex(yyscanner) ;
      yyextra->lexInit=TRUE;
      ce->program.resize(0);

      yyextra->commentScanner.leaveCompound(yyextra->yyFileName,yyextra->yyLineNr,name);

    }
    parseCompounds(yyscanner,ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(yyscan_t yyscanner, const char *fileName,const char *fileBuf,const std::shared_ptr<Entry> &rt)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  initParser(yyscanner);

  yyextra->inputString = fileBuf;
  yyextra->inputPosition = 0;

  yyextra->protection    = Public;
  yyextra->mtype         = Method;
  yyextra->stat         = FALSE;
  yyextra->virt          = Normal;
  yyextra->current_root  = rt;
  yyextra->specialBlock = FALSE;


  yyextra->yyLineNr= 1 ; 
  yyextra->yyFileName = fileName;
  //setContext();
  msg("Parsing file %s...\n",yyextra->yyFileName.data());

  QFileInfo fi(fileName);
  yyextra->moduleScope = findPackageScope(yyscanner,fileName);
  QCString baseName=fi.baseName().utf8();
  if (baseName!="__init__") // package initializer file is not a package itself
  {
    if (!yyextra->moduleScope.isEmpty())
    {
      yyextra->moduleScope+="::";
    }
    yyextra->moduleScope+=baseName;
  }

  yyextra->current            = std::make_shared<Entry>();
  initEntry(yyscanner);
  yyextra->current->name      = yyextra->moduleScope;
  yyextra->current->section   = Entry::NAMESPACE_SEC;
  yyextra->current->type      = "namespace";
  yyextra->current->fileName  = yyextra->yyFileName;
  yyextra->current->startLine = yyextra->yyLineNr;
  yyextra->current->bodyLine  = yyextra->yyLineNr;

  yyextra->current_root  = yyextra->current;

  rt->moveToSubEntryAndRefresh(yyextra->current);

  initParser(yyscanner);

  yyextra->commentScanner.enterFile(yyextra->yyFileName,yyextra->yyLineNr);

  yyextra->current->reset();
  initEntry(yyscanner);
  pyscannerYYrestart(0,yyscanner);
  BEGIN( Search );
  pyscannerYYlex(yyscanner);
  yyextra->lexInit=TRUE;

  yyextra->commentScanner.leaveFile(yyextra->yyFileName,yyextra->yyLineNr);

  yyextra->current_root->program.resize(0);

  parseCompounds(yyscanner, yyextra->current_root);
}

//----------------------------------------------------------------------------

static void parsePrototype(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyextra->yyFileName,yyextra->yyLineNr,"Empty prototype found!");
    return;
  }

  yyextra->specialBlock = FALSE;
  yyextra->packageCommentAllowed = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  pyscannerYY_switch_to_buffer(pyscannerYY_create_buffer(0,YY_BUF_SIZE,yyscanner),yyscanner);
  orgInputString = yyextra->inputString; 
  orgInputPosition = yyextra->inputPosition;

  // set new string
  yyextra->inputString = text;
  yyextra->inputPosition = 0;
  pyscannerYYrestart( 0, yyscanner );

  BEGIN( FunctionDec );

  pyscannerYYlex(yyscanner);
  yyextra->lexInit=TRUE;

  yyextra->current->name = yyextra->current->name.stripWhiteSpace();
  if (yyextra->current->section == Entry::MEMBERDOC_SEC && yyextra->current->args.isEmpty())
    yyextra->current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
  pyscannerYY_switch_to_buffer(orgState,yyscanner);
  pyscannerYY_delete_buffer(tmpBuf,yyscanner);

  yyextra->inputString = orgInputString; 
  yyextra->inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

//----------------------------------------------------------------------------

struct PythonOutlineParser::Private
{
  yyscan_t yyscanner;
  pyscannerYY_state state;
};

PythonOutlineParser::PythonOutlineParser() : p(std::make_unique<PythonOutlineParser::Private>())
{
  pyscannerYYlex_init_extra(&p->state,&p->yyscanner);
#ifdef FLEX_DEBUG
  pyscannerYYset_debug(1,p->yyscanner);
#endif
}

PythonOutlineParser::~PythonOutlineParser()
{
  pyscannerYYlex_destroy(p->yyscanner);
}


void PythonOutlineParser::parseInput(const char *fileName,
                                       const char *fileBuf,
                                       const std::shared_ptr<Entry> &root,
                                       bool /*sameTranslationUnit*/,
                                       QStrList & /*filesInSameTranslationUnit*/)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->thisParser = this;
  printlex(yy_flex_debug, TRUE, __FILE__, fileName);
  ::parseMain(p->yyscanner, fileName,fileBuf,root);
  printlex(yy_flex_debug, FALSE, __FILE__, fileName);

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonOutlineParser::needsPreprocessing(const QCString &) const
{
  return FALSE;
}

void PythonOutlineParser::parsePrototype(const char *text)
{
  ::parsePrototype(p->yyscanner,text);

}

//----------------------------------------------------------------------------

#include "pyscanner.l.h"

