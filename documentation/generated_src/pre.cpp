#line 2 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pre.cpp"
#line 22 "pre.l"
#include <stdint.h>



#line 8 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pre.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void preYYrestart (FILE *input_file ,yyscan_t yyscanner );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void preYY_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void preYY_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void preYYpop_buffer_state (yyscan_t yyscanner );

static void preYYensure_buffer_stack (yyscan_t yyscanner );
static void preYY_load_buffer_state (yyscan_t yyscanner );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *preYYalloc (yy_size_t ,yyscan_t yyscanner );
void *preYYrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void preYYfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 205
#define YY_END_OF_BUFFER 206
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1609] =
    {   0,
      187,  187,  206,  204,  205,    1,  204,  205,  203,  205,
        3,  204,  205,  204,  205,  204,  205,    2,  204,  205,
        6,  204,  205,    1,    6,  204,  205,    6,  204,  205,
        6,  203,  205,    3,    6,  204,  205,    5,  204,  205,
        6,  204,  205,    6,  204,  205,    6,  204,  205,    6,
      204,  205,    2,    6,  204,  205,   75,  204,  205,    1,
       75,  204,  205,   70,  203,  205,    3,   75,  204,  205,
       75,  204,  205,   75,  204,  205,   72,   75,  204,  205,
       72,   75,  204,  205,   72,   75,  204,  205,   72,   75,
      204,  205,   72,   75,  204,  205,   72,   75,  204,  205,

       72,   75,  204,  205,    2,   75,  204,  205,  100,  204,
      205,    1,  100,  204,  205,   98,  203,  205,    3,  100,
      204,  205,  100,  204,  205,  100,  204,  205,   99,  100,
      204,  205,   99,  100,  204,  205,   99,  100,  204,  205,
        2,  100,  204,  205,  101,  104,  204,  205,    1,  101,
      104,  204,  205,  109,  203,  205,    3,  101,  104,  204,
      205,  103,  104,  204,  205,  104,  204,  205,  104,  204,
      205,  101,  104,  204,  205,    2,  101,  104,  204,  205,
      110,  113,  204,  205,    1,  110,  113,  204,  205,    3,
      110,  113,  204,  205,  112,  113,  204,  205,  110,  113,

      204,  205,  110,  113,  204,  205,  113,  204,  205,    2,
      110,  113,  204,  205,   36,  204,  205,    1,   36,  204,
      205,   37,  203,  205,    3,   36,  204,  205,   18,   36,
      204,  205,   19,   36,  204,  205,   36,  204,  205,   36,
      204,  205,   36,  204,  205,   34,   36,  204,  205,16417,
       34,   36,  204,  205,16417,   34,   36,  204,  205,16417,
       36,  204,  205,   34,   36,  204,  205,16417,   34,   36,
      204,  205,16417,   12,   36,  204,  205,   13,   36,  204,
      205,    2,   36,  204,  205,   20,  204,  205,    1,   20,
      204,  205,   23,  204,  205,   20,  204,  205,   20,  204,

      205,  204,  205,    2,   20,  204,  205,   21,  204,  205,
        1,   21,  204,  205,   21,  204,  205,   21,  204,  205,
        2,   21,  204,  205,   27,  204,  205,    1,   27,  204,
      205,   29,  204,  205,   27,  204,  205,   27,  204,  205,
      204,  205,    2,   27,  204,  205,   24,  204,  205,    1,
       24,  204,  205,   26,  204,  205,   24,  204,  205,   24,
      204,  205,  204,  205,    2,   24,  204,  205,   31,   32,
      204,  205,    1,   31,   32,  204,  205,   31,  203,  205,
        3,   31,   32,  204,  205,   32,  204,  205,   31,   32,
      204,  205,   31,   32,  204,  205,    2,   31,   32,  204,

      205,  204,  205,    1,  204,  205,    3,  204,  205,  204,
      205,  204,  205,    2,  204,  205,  115,  204,  205,  119,
      204,  205,    1,  119,  204,  205,  117,  203,  205,    3,
      119,  204,  205,  119,  204,  205,  119,  204,  205,  119,
      204,  205,    2,  119,  204,  205, 8315,  204,  205,16504,
    16506,16507,  204,  205,  126,  204,  205,  127,  204,  205,
      125,  204,  205,  204,  205,  129,  204,  205,  204,  205,
      199,  204,  205,    1,  199,  204,  205,  187,  199,  204,
      205,  186,  203,  205,    3,  199,  204,  205,  190,  199,
      204,  205,  182,  199,  204,  205,  191,  199,  204,  205,

      199,  204,  205,  199,  204,  205,  189,  199,  204,  205,
      183,  199,  204,  205,  199,  204,  205,    2,  199,  204,
      205,   93,  204,  205,    1,   93,  204,  205,   92,  203,
      205,    3,   93,  204,  205,   93,  204,  205,   93,  204,
      205,    2,   93,  204,  205,   91,   93,  204,  205,    1,
       91,   93,  204,  205,   91,   93,  204,  205,   91,   92,
      203,  205,    3,   91,   93,  204,  205,   90,   93,  204,
      205,   91,   93,  204,  205,   91,   93,  204,  205,    2,
       91,   93,  204,  205,  158,  160,  204,  205,    1,  160,
      204,  205,  159,  203,  205,    3,  158,  160,  204,  205,

      160,  204,  205,  160,  204,  205,  158,  160,  204,  205,
      160,  204,  205,  160,  204,  205,    2,  158,  160,  204,
      205,  158,  160,  204,  205,  160,  204,  205,  160,  204,
      205,  160,  204,  205,   47,   50,  204,  205,    1,   47,
       50,  204,  205,   49,  203,  205,    3,   47,   50,  204,
      205,   50,  204,  205,   47,   50,  204,  205,   47,   50,
      204,  205,    2,   47,   50,  204,  205,  161,  184,  204,
      205,    1,  161,  184,  204,  205,  164,  203,  205,    3,
      161,  184,  204,  205,  184,  204,  205,  161,  184,  204,
      205,  161,  184,  204,  205,  183,  184,  204,  205,  184,

      204,  205,    2,  161,  184,  204,  205,  160,  204,  205,
      160,  204,  205,  160,  204,  205,  158,  160,  204,  205,
      160,  204,  205,  160,  204,  205,  160,  204,  205,  172,
      176,  177,  204,  205,    1,  172,  177,  204,  205,  173,
      203,  205,    3,  172,  176,  177,  204,  205,  176,  177,
      204,  205,  172,  176,  177,  204,  205,  177,  204,  205,
        2,  172,  176,  177,  204,  205,  169,  171,  204,  205,
        1,  171,  204,  205,  170,  203,  205,    3,  169,  171,
      204,  205,  171,  204,  205,  169,  171,  204,  205,  169,
      171,  204,  205,    2,  169,  171,  204,  205,  180,  181,

      204,  205,    1,  181,  204,  205,    3,  180,  181,  204,
      205,  180,  181,  204,  205,  180,  181,  204,  205,    2,
      180,  181,  204,  205,   82,  204,  205,    1,   82,  204,
      205,   83,  203,  205,    3,   82,  204,  205,   82,  204,
      205,   82,  204,  205,   81,   82,  204,  205,   80,   82,
      204,  205,   82,  204,  205,   80,   82,  204,  205,    2,
       82,  204,  205,   89,  204,  205,    1,   89,  204,  205,
       87,  203,  205,    3,   89,  204,  205,   89,  204,  205,
       89,  204,  205,   85,   89,  204,  205,   89,  204,  205,
        2,   89,  204,  205,   88,   89,  204,  205,   86,   89,

      204,  205,  197,  204,  205,    1,  197,  204,  205,    3,
      197,  204,  205,  194,  197,  204,  205,  197,  204,  205,
      197,  204,  205,  197,  204,  205,    2,  197,  204,  205,
      198,  204,  205,    1,  198,  204,  205,    3,  198,  204,
      205,  196,  198,  204,  205,  198,  204,  205,  198,  204,
      205,  198,  204,  205,    2,  198,  204,  205,   76,  204,
      205,   74,  204,  205,    1,   74,  204,  205,    3,   74,
      204,  205,   74,  204,  205,   74,  204,  205,   74,  204,
      205,    2,   74,  204,  205,   46,  204,  205,    1,   46,
      204,  205,   44,  203,  205,    3,   46,  204,  205,   42,

       46,  204,  205,   43,   46,  204,  205,   38,   46,  204,
      205,   39,   46,  204,  205,   46,  204,  205,   46,  204,
      205,   45,   46,  204,  205,    2,   46,  204,  205,   56,
      204,  205,    1,   56,  204,  205,    3,   56,  204,  205,
       51,   56,  204,  205,   52,   56,  204,  205,   56,  204,
      205,   56,  204,  205,   56,  204,  205,    2,   56,  204,
      205,  144,  204,  205,    1,  144,  204,  205,  143,  144,
      204,  205,    3,  144,  204,  205,  144,  204,  205,  144,
      204,  205,    2,  144,  204,  205,  147,  148,  204,  205,
        1,  147,  148,  204,  205,  146,  203,  205,    3,  147,

      148,  204,  205,  147,  204,  205,  147,  204,  205,  147,
      148,  204,  205,  147,  204,  205,    2,  147,  148,  204,
      205,  201,  202,    6,    6,    5,    6,    6,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,  108,  201,
      106,  202,   99,   99,   99,   99,  101,  101,  110,  107,
      110,  201,  105,  110,  202,  110,  111,   17, 8225,   34,
    16417,   34,16417,   35,   34,16417,   34,16417,   20,   20,
      201,   20,  202,   20,   22,   21,   21,  201,   21,  202,
       21,   27,   27,  201,   27,  202,   27,   28,   24,   24,
      201,   24,  202,   24,   25,   31,   30,   31,  201,   31,

      202,   31,  116,  201,  202,  114,  115,  117,  201,  202,
      118, 8315, 8314, 8312, 8315,16504,16506,16507,  127,  126,
      127,  125,  129,  129,  124,  187,  188,  130,  201,  131,
      202,  183,  185,   91,   91,   90,  158,  132,  134,  201,
      133,  202,  158,  158,   47,   48,   47,  202,   47,  161,
      163,  161,  202,  161,  162,  161,  157,  157,  201,  158,
      172,  176,  172,  176,  174,  176,  201,  175,  176,  202,
      172,  176,  169,  166,  168,  201,  167,  169,  202,  169,
      180,  178,  180,  201,  179,  180,  202,  180,   80,   77,
       80,   85,   84,   86,  193,  201,  192,  202,  195,   76,

       73,   41,  201,   53,  201,   53,  202,   55,   54,   55,
      143,  148,  201,  202,  148,  201,  202,    4,   72,   72,
       72,   72,   72,   64,   72,   72,   72,   72,   72,   72,
      108,  108,  201,  106,  106,  202,   99,   99,   99,   94,
       99,   99,  102,    4,  101,  107,  110,  107,  107,  110,
      201,  105,  110,  105,  105,  110,  202,    4,  110,   16,
       16,   11,   34,16417,   20,  201,   20,  202,    4,   20,
       21,  201,   21,  202,    4,   21,   27,  201,   27,  202,
        4,   27,   24,  201,   24,  202,    4,   24,   30,   31,
      201,   31,  202,    4,   31,  201,  202,    4,    4,  116,

      201,  202,    4,  128,  188,  130,  130,  201,  131,  131,
      202,  133,  202,    4,  158,  158,  137,  136,   47,  202,
        4,   47,  161,  202,    4,  161,  154,  158,  156,  155,
      176,  201,  176,  202,    4,  172,  176,    4,  176,  165,
      169,  202,    4,  169,  180,  201,  180,  202,    4,  180,
       80,  192,  202,   40,   41,  201,  150,  150,  201,  149,
      149,  202,    4,  148,  200,16391,16391,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,  108,  200,
       99,   95,   99,   99,   99,  102,  107,  110,  200,   15,
       14,   15,   34,16417,   20,  200,   21,  200,   27,  200,

       24,  200,   30,   31,  200,  200,  200,  121,  129,  133,
      135,  158,  137,  136,  158,  156,  155,  176,  200,  180,
      200,   80,   40,16391,    9, 8199,   72,   72,   65,   68,
       66,   66,   72,   72,   72,   72,   72,   72,   72,   72,
       96,   99,   97,   99,   99,   14,   34,16417,   30,  139,
       80, 8199,    9,   72,   72,   69,   61,   60,   72,   72,
       72,   72,   67,   34,16417,   30,  138,  142,  145,  141,
       80,    8,    9,   59,   63,   62,16441,   58,   10,   30,
      140,   80,    9, 8249,   30,   79,   78,    9, 8249,   30,
      153,  152,    9,   30,  151,    9,   71,   30,    9,   30,

        9,   30,    9,   30,   30,   30,   30,   30
    } ;

static yyconst flex_int16_t yy_accept[1452] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    9,   11,   14,   16,   18,   21,   24,
       28,   31,   34,   38,   41,   44,   47,   50,   53,   57,

       60,   64,   67,   71,   74,   77,   81,   85,   89,   93,
       97,  101,  105,  109,  112,  116,  119,  123,  126,  129,
      133,  137,  141,  145,  149,  154,  157,  162,  166,  169,
      172,  176,  181,  185,  190,  195,  199,  203,  207,  210,
      215,  218,  222,  225,  229,  233,  237,  240,  243,  246,
      251,  256,  261,  264,  269,  274,  278,  282,  286,  289,
      293,  296,  299,  302,  304,  308,  311,  315,  318,  321,
      325,  328,  332,  335,  338,  341,  343,  347,  350,  354,
      357,  360,  363,  365,  369,  373,  378,  381,  386,  389,
      393,  397,  402,  404,  407,  410,  412,  414,  417,  420,

      423,  427,  430,  434,  437,  440,  443,  447,  453,  455,
      458,  461,  464,  466,  469,  471,  474,  478,  482,  485,
      489,  493,  497,  501,  504,  507,  511,  515,  518,  522,
      525,  529,  532,  536,  539,  542,  546,  550,  555,  559,
      563,  568,  572,  576,  580,  585,  589,  593,  596,  601,
      604,  607,  611,  614,  617,  622,  626,  629,  632,  635,
      639,  644,  647,  652,  655,  659,  663,  668,  672,  677,
      680,  685,  688,  692,  696,  700,  703,  708,  711,  714,
      717,  721,  724,  727,  730,  735,  740,  743,  749,  753,
      758,  761,  767,  771,  775,  778,  783,  786,  790,  794,

      799,  803,  807,  812,  816,  820,  825,  828,  832,  835,
      839,  842,  845,  849,  853,  856,  860,  864,  867,  871,
      874,  878,  881,  884,  888,  891,  895,  899,  903,  906,
      910,  914,  918,  921,  924,  927,  931,  934,  938,  942,
      946,  949,  952,  955,  959,  962,  965,  969,  973,  976,
      979,  982,  986,  989,  993,  996, 1000, 1004, 1008, 1012,
     1016, 1019, 1022, 1026, 1030, 1033, 1037, 1041, 1045, 1049,
     1052, 1055, 1058, 1062, 1065, 1069, 1073, 1077, 1080, 1083,
     1087, 1091, 1096, 1099, 1104, 1107, 1110, 1114, 1117, 1122,
     1123, 1124, 1124, 1125, 1126, 1127, 1128, 1129, 1129, 1129,

     1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1141, 1143, 1144, 1145, 1146, 1147, 1148, 1148, 1148, 1149,
     1150, 1153, 1156, 1157, 1158, 1158, 1158, 1159, 1159, 1160,
     1162, 1164, 1164, 1165, 1165, 1167, 1169, 1170, 1172, 1174,
     1175, 1176, 1177, 1179, 1181, 1182, 1183, 1185, 1187, 1188,
     1189, 1190, 1192, 1194, 1195, 1196, 1197, 1197, 1198, 1200,
     1202, 1203, 1203, 1204, 1205, 1206, 1206, 1206, 1207, 1208,
     1208, 1209, 1210, 1211, 1211, 1212, 1212, 1213, 1214, 1215,
     1219, 1219, 1219, 1220, 1221, 1222, 1223, 1223, 1224, 1224,
     1225, 1226, 1227, 1227, 1228, 1230, 1232, 1233, 1234, 1234,

     1235, 1236, 1237, 1238, 1239, 1241, 1243, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1246, 1247, 1249, 1250, 1251,
     1251, 1252, 1254, 1255, 1256, 1257, 1258, 1260, 1260, 1260,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1263, 1264, 1265,
     1268, 1271, 1273, 1273, 1273, 1274, 1275, 1277, 1280, 1281,
     1282, 1285, 1288, 1289, 1290, 1291, 1291, 1292, 1293, 1294,
     1295, 1297, 1299, 1300, 1301, 1302, 1302, 1302, 1302, 1304,
     1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1316, 1316, 1317, 1318, 1319, 1319, 1319, 1319, 1319, 1320,

     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
     1331, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1343, 1344, 1344, 1344, 1346, 1348, 1349, 1352, 1354,
     1355, 1358, 1360, 1361, 1361, 1362, 1362, 1362, 1362, 1363,
     1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383,
     1385, 1387, 1389, 1389, 1390, 1392, 1394, 1396, 1397, 1398,
     1399, 1401, 1402, 1403, 1404, 1404, 1404, 1405, 1405, 1406,
     1407, 1409, 1410, 1412, 1414, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1417, 1417, 1418, 1419, 1421,

     1423, 1425, 1427, 1427, 1428, 1429, 1429, 1430, 1431, 1433,
     1435, 1438, 1440, 1440, 1440, 1440, 1441, 1443, 1445, 1447,
     1449, 1451, 1452, 1454, 1454, 1455, 1455, 1455, 1457, 1458,
     1460, 1461, 1463, 1465, 1465, 1466, 1466, 1466, 1467, 1467,
     1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
     1478, 1479, 1481, 1482, 1484, 1485, 1486, 1486, 1487, 1487,
     1490, 1491, 1493, 1493, 1493, 1493, 1495, 1497, 1499, 1501,
     1503, 1503, 1504, 1506, 1507, 1508, 1509, 1510, 1511, 1511,
     1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1513, 1513, 1514, 1515, 1515, 1516, 1516, 1517, 1518, 1520,
     1520, 1520, 1522, 1523, 1523, 1524, 1524, 1524, 1524, 1525,
     1525, 1526, 1526, 1527, 1528, 1529, 1531, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1542, 1543,
     1545, 1546, 1546, 1546, 1547, 1547, 1547, 1547, 1549, 1549,
     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1553, 1553, 1554, 1554, 1555, 1556, 1556, 1556, 1557, 1558,

     1559, 1560, 1561, 1562, 1563, 1564, 1564, 1564, 1564, 1566,
     1566, 1567, 1567, 1567, 1567, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1569, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1571, 1572, 1572, 1572, 1572, 1572, 1573,
     1573, 1574, 1574, 1575, 1575, 1576, 1577, 1578, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1580, 1580, 1581, 1581, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583,

     1583, 1584, 1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1587, 1588, 1588, 1588, 1588, 1588, 1589,
     1589, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1593, 1593, 1593, 1593, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1595, 1595, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1597, 1597, 1598, 1598, 1598, 1598, 1598, 1598, 1599,

     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1606, 1606, 1606, 1606, 1606, 1606, 1607, 1607, 1607,
     1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,

     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,

     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,

     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   22,   23,    1,   24,
       25,   26,   27,   28,   29,   29,   30,   29,   29,   29,
       29,   29,   29,   29,   29,   31,   29,   29,   29,   29,
       29,   32,   29,   29,   33,   29,   29,   29,   29,   29,
       34,   35,   36,    1,   29,   37,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   47,   54,   55,   56,   57,   58,   47,   59,
       60,   47,   61,   10,   62,   63,    1,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,    1,    8,   13,   14,   15,   15,
       15,   15,    1,   16,    1,    1,    1,   17,   18,   18,
       18,   18,   18,    1,   19,    1,   20,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        1,    1,   20,    1
    } ;

static yyconst flex_int16_t yy_base[1637] =
    {   0,
        0,    4,    8,   72,  136,    0,  200,    0,  263,  271,
      281,  299,  363,    0,  426,  430,  436,  462,  466,  470,
      502,  506,  292,  534,  538,  553,  617,    0,  549,  680,
      716,    0,  776,    0,  840,    0,  275,  686,  517,  903,
      907,  911,  974, 1037,  918,  935, 1101,    0, 1164, 1227,
      942,  946,  989, 1016, 1027, 1031, 1291,    0, 1355,    0,
     1407,    0, 1169, 1179, 1207, 1466, 1502,    0, 1175, 1217,
     1561, 1624, 1576, 1595, 1688, 1752,    0,    0, 1815, 1878,
     4100, 7740, 7740, 7740, 7740,    1, 4068, 7740, 7740, 7740,
     1942, 7740, 7740, 7740,    2, 4059,   17,    0, 7740, 7740,

     7740, 7740, 7740,    3, 4054,    0, 4026, 4033,    2,    9,
     4016, 4014, 7740, 7740, 7740, 7740, 7740,   10, 4030,    0,
        5, 4013, 7740,    0,    0, 7740,    0, 7740, 4012,   11,
     4019,    0,    0,    0,    0, 7740,   16, 4014,    0,    0,
     7740, 7740, 7740, 7740, 7740, 4001,   26, 3991, 4004,   58,
      308,  318,   28,  513,  582, 7740, 7740, 7740,    0,    0,
     7740,   27, 3980,    0,    0,    0,    0,   51, 3978,    0,
        0,    0, 7740,   53, 3977,    0,    0,    0,    0, 7740,
      273, 3970,    0,    0,    0,    0,    0,    0, 3980,  300,
     3950,    0,   16,  302,  317,  324,  322,  325,   54, 3963,

     3958, 7740, 3957,  340,  265,  267, 3952,  443,  333, 3952,
     3948, 3936, 3921,  330, 3932, 7740, 7740,  292, 7740, 7740,
     7740, 3914, 7740,  323, 3894, 7740,    0,  348, 7740, 7740,
     7740, 7740, 7740,  341, 3892, 7740, 7740, 7740,  354, 7740,
     7740, 7740,  431, 3882, 7740,    0, 7740, 7740,    0, 3890,
      438, 3876, 1979, 7740,    0,  436,  545, 3865, 3835,    0,
        0, 7740,    0, 3872,  444, 3862,    0, 3849, 3848, 7740,
     3844, 3849,  468,  280,    0,  527, 3831, 3846,  465,  318,
      689, 1010, 3813, 3786,  458,    0, 7740,  494,  473,  496,
      555,  571,    0, 7740, 7740,    0, 3829,  532, 3810,    0,

        0, 7740,    0,  560, 3809,    0, 7740, 7740, 7740, 7740,
      574, 3804, 7740,    0,  523, 3788, 7740, 7740, 7740, 7740,
     7740,  582, 3799,    0, 3814, 7740, 7740,    0, 7740, 7740,
     7740, 7740,  587, 3790,    0, 7740, 7740, 7740, 7740, 7740,
      592, 3785,    0, 7740,    0, 7740, 7740, 7740,  593, 3784,
      564, 7740, 7740, 7740, 7740, 7740, 7740, 3772, 7740, 7740,
      598, 3767, 7740, 7740, 7740, 7740, 7740, 7740, 7740,  669,
     3766,  691, 7740, 7740, 7740,    0, 7740,  679, 3763, 7740,
        0,    0, 7740,    0, 7740,  687, 3751,  674,    0, 3763,
     3757,  706, 7740, 2038, 7740, 1056,    0, 2100,  439,    0,

     3727, 3721,  653, 3718,  949, 3705, 3714, 3709, 3695, 3720,
     3708,    0,  665, 3684, 1011,    0, 3712,  708, 1254,    0,
      707,  716, 1417, 7740, 3709,  718, 7740,  914, 7740,  953,
     1056, 3706, 7740, 3702,  992, 1244,    0, 3690, 3685, 1463,
     7740,    0, 3683, 3677, 1479,    0, 3676, 3667, 1496, 7740,
        0, 3670, 3662, 1632, 7740,    0, 3656, 3654, 3636, 3613,
     1649,  699, 7740,  917, 1001, 2128,  930, 7740,  951, 3626,
     7740,  481,  573, 2151, 7740, 3618, 1063, 7740, 7740, 1191,
     3617,  489, 3614, 3604, 3599, 3594, 3574,  683, 3564,  736,
     7740,  596, 3572, 3569,  727,   37,    0, 7740, 3566, 7740,

      732, 7740,    0, 7740,  892, 3551, 1715, 2138, 3515, 3509,
     3508, 3494, 3510, 3500, 3478, 3490, 3481, 1561, 1590, 3491,
     3464,  512, 3483, 3450,    0, 7740, 3491, 1779, 3472, 3471,
     7740,  948, 2192, 7740,  924, 7740, 3490, 3452, 1035, 1609,
     1667, 3464, 3436, 1019, 3457, 3425,  591,    0,    0, 3464,
     3451, 2226,  944, 3416,    0,  977, 3449, 3440, 1812,    0,
     3443, 3437, 1828,    0, 7740, 3438, 3398,    0, 7740,    0,
     3425, 3419, 7740,    0, 7740, 3432, 3419, 1006, 3414, 3406,
     3401, 7740, 7740, 3411,    0,    0,  921, 1051, 1845, 3361,
     3351, 3380, 7740, 7740,  986, 1080, 1067, 3377, 3340, 3333,

     3334, 3327, 3321, 7740, 3324, 3321, 3303, 3304, 3308, 3308,
        0, 3322,    0,    0, 3296, 3289, 3284, 7740, 3286, 3286,
     3312, 7740, 3294, 1079,    0,  980,    0, 1182, 1163,    0,
     1178,    0, 7740, 3289, 3288, 1196, 1270, 3282, 7740, 1605,
     3275,    0,    0, 3273,    0,    0, 3272,    0,    0, 3268,
        0,    0, 3272, 3264, 3241,    0,    0, 1233, 1198, 1231,
     7740, 1219, 3254, 3250, 1280,  424, 7740, 3219, 3225, 7740,
     3208, 7740, 7740, 3207,    0, 3167, 3166, 3161, 1227, 3150,
     3167, 3164, 3142, 3147, 3137, 1043, 1132, 3136, 3126, 3118,
     3116, 3123, 3094, 3094, 1673, 1533, 3105, 3077,    0,    0,

     3104, 3102, 3094, 7740, 1680, 1617, 3088, 3052, 3095,    0,
     1251,    0, 3049, 3049, 1255, 7740,    0,    0, 3079,    0,
        0, 3033, 7740, 3059, 7740, 3058, 1499, 3049, 7740, 3036,
     7740, 7740,    0, 3011, 7740, 1274, 3038, 1421, 3034, 1741,
     2997, 2987, 1579, 2252, 2990, 2989, 2986, 2967, 2958, 2963,
     2969,    0, 1589, 1726, 1665, 1856, 2994, 7740, 1504, 1465,
     7740, 7740, 1506, 1629, 2992, 1795,    0,    0,    0,    0,
     2983, 2981,    0, 1473, 2976, 7740, 7740, 2960, 1380, 1438,
     2936, 7740, 2921, 2913, 2904, 2902, 2890, 2892, 2887, 2887,
     2885, 1524, 2877, 2866, 2867, 2856, 2854, 2865, 2835,    0,

      673, 2848, 2813, 1836, 1602, 1183, 2838, 2808,    0, 2813,
     2820,    0, 2805, 2840, 7740, 1754, 2810, 2835, 2104, 1870,
     2133, 2145, 7740, 2806, 2799, 7740, 7740, 1470, 2792, 2316,
     1265, 2790, 2775, 2782, 2780, 2809, 7740, 1493, 1885, 1679,
     1695, 2791, 2789, 7740, 2786, 1897, 2769, 2197, 2767, 2763,
     2723, 2718, 2719, 1715, 2710, 2695, 2698, 2686, 2685, 2695,
     2681, 1805, 1778, 2679, 1907, 2678, 2671, 2659, 2662, 2661,
     2668, 2654, 2647, 2644, 2633, 2649, 2647, 2626, 2639, 2627,
     1911, 2630, 2659, 2653, 2609, 1563, 2332, 2343, 1534, 1573,
     2168, 2358, 2364, 2605, 2634, 1568, 2593, 7740, 1666, 7740,

     1697, 1824, 2581, 2616, 2615, 2573, 1914, 2600, 2379, 2604,
     2602, 2121, 2597, 2546, 1917, 2543, 2542, 2533, 2540, 2535,
     2546, 2531, 2519, 1920, 7740, 1929, 2524, 2519, 2516, 2513,
     2506, 2497, 2488, 2487, 2484, 1623, 2465, 2453, 2453, 2454,
     2436, 2432, 1932, 2424, 2405, 2385, 2392, 1615, 7740, 2369,
     2397, 2406, 2448, 2005, 1759, 7740, 2006, 7740, 1431, 2019,
     2101, 2435, 2409, 2415, 7740, 2436, 2434, 2371, 2428, 2366,
     2366, 2356, 2347, 2345, 2336, 2320, 2326, 2309, 1935, 2322,
     2324, 2315, 2309, 2299, 2298, 2303, 2278, 2205, 2206, 2192,
     2198, 2179, 2167, 2176, 2162, 1781, 2166, 2419, 2431, 2434,

     2445, 2456,    0, 2148, 2111, 2183, 2459, 2183, 2182, 2167,
     2108, 2031, 2118, 2119, 2110, 2100, 2087, 2083, 2082, 2058,
     2059,    0, 2050, 1983, 1977, 1966, 1964, 1951, 1890, 1878,
     1870, 1852, 1823, 7740,    0, 2470, 2473, 2484, 2495, 2498,
        0, 1858, 2181, 1877, 2507, 2519, 1880, 1871, 1820,    0,
     1805, 1811, 1805, 1796, 7740, 1785, 1780, 1771, 1760, 1762,
     1757, 1745, 1747, 7740, 2524, 2535, 2538, 2546, 2549, 1752,
     2208, 1757, 2559, 2423, 1761, 1741, 1696, 7740, 1682, 1686,
     1657, 1637, 1633, 1606, 1604, 1603, 1579, 2570, 2574, 2585,
     2598, 2601, 7740, 2218, 1609, 2610, 2622, 1608, 1600, 1541,

     1524, 1517, 1453, 1462, 1456, 2625, 2629, 2640, 2646, 2650,
     2221, 1486, 2653, 2636, 1479, 1425, 1367, 1371, 1229, 2671,
     2675, 2699, 2705, 2712, 2231, 1238, 2688, 2663, 1201, 1183,
     1126, 2716, 2738, 2722, 2749, 2752, 2759, 1155, 2775, 2743,
     1089, 1074,  990, 2785, 2788, 2764, 1034, 2802, 2781, 1005,
      998, 2791,  960, 2812, 2817,  961,  934, 2822,  902, 2825,
     2835,  736,  608, 2840,  417, 2850, 2855, 7740, 2862, 2865,
     2876, 2879, 2885, 2890, 2895, 2898, 2909, 2915, 2918, 2928,
     2931, 2935, 2945, 2949, 2953, 2959, 2963, 2969, 2979, 2982,
     2988, 2994, 2998, 3004, 3014, 3019, 3022, 3032, 3038, 3041,

     3053, 3056, 3059, 3069, 3073, 3077, 3083, 3087, 3091, 3101,
     3104, 3114, 3107, 3119, 3129, 3124, 3142, 3146, 3152, 3160,
     3166, 3156, 3176, 3179, 3189, 3192, 3196, 3206, 3211, 3217,
     3227, 3230, 3234, 3240, 3244, 3248, 3258, 3261, 3265, 3271,
     3277, 3280, 3293, 3299, 3303, 3309, 3313, 3317, 3330, 3333,
     3339, 3344, 3353, 3356, 3368, 3371, 3377, 3382, 3389, 3392,
     3403, 3406, 3409, 3419, 3422, 3428, 3441, 3444, 3447, 3457,
     3462, 3472, 3468, 3478, 3488, 3482, 3493, 3507, 3512, 3518,
     3532, 3521, 3542, 3548, 3537, 3553, 3559, 3571, 3574, 3580,
     3585, 3591, 3601, 3596, 3607, 3611, 3621, 3624, 3630, 3635,

     3640, 3644, 3650, 3655, 3661, 3666, 3671, 3674, 3684, 3689,
     3695, 3705, 3709, 3712, 3725, 3728, 3734, 3739, 3745, 3748,
     3758, 3764, 3767, 3777, 3780, 3784, 3794, 3798, 3801, 3811,
     3817, 3820, 3830, 3836, 3839, 3849, 3853, 3856, 3866, 3870,
     3873, 3883, 3889, 3892, 3902, 3908, 3911, 3921, 3925, 3928,
     3938, 3942, 3945, 3955,  272, 3961, 3966, 3971, 3976, 3981,
     3987, 3991, 3997, 4005, 4010, 4016, 4021, 4026, 4030, 4035,
     4040, 4046,  205, 4050, 4056, 4059, 4064, 4069, 4075, 4080,
     4085, 4089, 4094, 4099, 4105, 4109, 4118, 4123, 4128, 4134,
     4139, 4144, 4148, 4153, 4158, 4164, 4168, 4171, 4177, 4182,

     4187, 4193, 4198, 4203, 4207, 4212, 4217, 4223, 4230, 4236,
     4241, 4246, 4252, 4257, 4262, 4266, 4271, 4276, 4282, 4285,
     4289, 4295, 4300, 4305, 4311, 4316, 4321, 4325, 4330, 4335,
     4344, 4348, 4354, 4359, 4364, 4370, 4375, 4380, 4384, 4389,
     4394, 4397, 4403, 4407, 4413, 4418, 4423, 4429, 4434, 7740,
     4495, 4515, 4535, 4555, 4575, 4595, 4615, 4635, 4655, 4675,
     4695, 4715, 4735, 4755, 4775, 4795, 4815, 4835, 4855, 4875,
     4895, 4915, 4935, 4955, 1719, 1740, 1849, 4975, 4995, 5015,
     5035, 5055, 5073, 5091, 5111, 5131, 5151, 5171, 5191, 5211,
     5231, 5251, 5271, 5289, 5307, 5325, 5342, 1889, 5360, 5380,

     5398, 5418, 5438, 5458, 5478, 5498, 5518, 1912, 1997, 2008,
     5538, 2127, 5558, 5578, 5596, 5614, 2143, 2231, 5634, 5654,
     2339, 5674, 5694, 5714, 5734, 5754, 5774, 5794, 5812, 5830,
     5850, 5870, 5890, 5910, 5930, 5950, 5970, 5988, 6006, 6024,
     6041, 2388, 6059, 6079, 6097, 6117, 6137, 6157, 6177, 6197,
     6217, 2437, 2454, 2467, 2476, 6237, 6257, 6275, 6293, 6313,
     6333, 2490, 6353, 6373, 2498, 6393, 6413, 6433, 6453, 6473,
     6493, 6513, 6533, 6551, 6569, 6589, 6609, 6629, 6649, 6669,
     6689, 6709, 6729, 6747, 6767, 6787, 6807, 6827, 6847, 2515,
     6867, 6887, 6907, 6927, 6947, 2517, 6967, 6985, 7003, 7023,

     7043, 7063, 7083, 7103, 7123, 7143, 7163, 7183, 7203, 7221,
     7239, 7259, 7279, 2542, 7299, 7319, 7339, 7359, 7379, 7399,
     7419, 7439, 7459, 7479, 7499, 7519, 7539, 7559, 7579, 7599,
     7619, 7639, 7659, 7679, 7699, 7719
    } ;

static yyconst flex_int16_t yy_def[1637] =
    {   0,
     1451, 1451, 1451, 1450, 1450,    5, 1450,    7, 1452, 1452,
     1453, 1453, 1450,   13, 1454, 1454, 1455, 1455, 1456, 1456,
     1457, 1457, 1458, 1458, 1459, 1459, 1450,   27, 1460, 1460,
       27,   31, 1450,   33, 1450,   35, 1461, 1462, 1451, 1451,
     1451, 1451, 1463, 1463, 1464, 1464, 1450,   47, 1463, 1463,
     1465, 1465, 1466, 1466, 1467, 1467, 1450,   57, 1450,   59,
       59,   61, 1468, 1468, 1469, 1469,   31,   67, 1470, 1470,
     1471, 1471, 1472, 1472, 1473, 1473,   76,   76, 1474, 1474,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1475, 1475, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1477,
     1477, 1477, 1450, 1478, 1478, 1450, 1478, 1450, 1479, 1450,
     1478, 1478, 1480, 1480, 1480, 1450, 1480, 1480, 1481, 1480,
     1450, 1450, 1450, 1450, 1450, 1482, 1450, 1450, 1450, 1483,
     1483, 1483, 1450, 1483, 1483, 1450, 1450, 1450, 1484, 1484,
     1450, 1484, 1484, 1485, 1484, 1486, 1486, 1486, 1486, 1486,
     1487, 1487, 1450, 1487, 1487, 1488, 1487, 1489, 1489, 1450,
     1489, 1489, 1490, 1489, 1491, 1491, 1491, 1491, 1492, 1491,
     1491, 1491, 1493, 1493, 1493, 1493, 1493, 1493, 1494, 1495,

     1495, 1450, 1495, 1495, 1495, 1450, 1495, 1496, 1450, 1450,
     1450, 1450, 1450, 1497, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1498, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1499, 1450,
     1450, 1450, 1450, 1450, 1450, 1500, 1450, 1450, 1500, 1450,
     1450, 1500, 1450, 1450, 1500, 1500, 1450, 1450, 1450, 1501,
     1501, 1450, 1501, 1450, 1501, 1501, 1501, 1502, 1502, 1450,
     1502, 1450, 1502, 1502, 1498, 1502, 1502, 1450, 1450, 1450,
     1500, 1450, 1450, 1450, 1503, 1504, 1450, 1503, 1505, 1503,
     1450, 1503, 1506, 1450, 1450, 1506, 1450, 1506, 1506, 1506,

     1507, 1450, 1507, 1507, 1507, 1507, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1508, 1450, 1508, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1509, 1450, 1450, 1450, 1510, 1450, 1450,
     1450, 1450, 1450, 1450, 1511, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1511, 1450, 1512, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1513, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1514, 1450, 1450, 1450, 1515, 1450, 1450, 1450, 1450,
     1516, 1516, 1450, 1516, 1450, 1450, 1516, 1450, 1516, 1450,
     1450, 1450, 1450, 1450, 1450, 1517, 1517, 1517, 1517, 1518,

     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519,
     1520, 1521, 1521, 1521, 1521, 1522, 1523, 1524, 1522, 1525,
     1526, 1527, 1525, 1450, 1450, 1528, 1450, 1450, 1450, 1529,
     1529, 1530, 1450, 1450, 1529, 1529, 1531, 1531, 1531, 1531,
     1450, 1532, 1532, 1532, 1532, 1533, 1533, 1533, 1533, 1450,
     1534, 1534, 1534, 1534, 1450, 1535, 1536, 1536, 1535, 1535,
     1535, 1537, 1450, 1537, 1537, 1537, 1450, 1450, 1538, 1539,
     1450, 1539, 1539, 1539, 1450, 1450, 1450, 1450, 1450, 1540,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1541,
     1450, 1450, 1450, 1450, 1450, 1450, 1542, 1450, 1450, 1450,

     1543, 1450, 1544, 1450, 1450, 1450, 1544, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1544, 1450, 1450,
     1450, 1450, 1450, 1450, 1545, 1450, 1545, 1545, 1546, 1546,
     1450, 1546, 1546, 1450, 1546, 1450, 1450, 1450, 1450, 1544,
     1450, 1450, 1450, 1450, 1450, 1450, 1547, 1548, 1549, 1549,
     1549, 1547, 1450, 1450, 1550, 1450, 1450, 1550, 1550, 1551,
     1551, 1551, 1551, 1552, 1450, 1450, 1552, 1553, 1450, 1554,
     1450, 1450, 1450, 1555, 1450, 1450, 1556, 1557, 1450, 1450,
     1450, 1450, 1450, 1450, 1558, 1559, 1450, 1450, 1559, 1450,
     1450, 1450, 1450, 1450, 1450, 1560, 1450, 1561, 1562, 1562,

     1562, 1562, 1562, 1450, 1562, 1562, 1562, 1562, 1562, 1562,
     1563, 1563, 1564, 1564, 1565, 1565, 1565, 1450, 1565, 1565,
     1566, 1450, 1450, 1450, 1567, 1568, 1569, 1568, 1570, 1571,
     1570, 1572, 1450, 1450, 1450, 1450, 1450, 1573, 1450, 1574,
     1575, 1575, 1575, 1576, 1576, 1576, 1577, 1577, 1577, 1578,
     1578, 1578, 1579, 1579, 1580, 1580, 1580, 1581, 1581, 1581,
     1450, 1582, 1582, 1582, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1583, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1583, 1450, 1450, 1450, 1584, 1584,

     1585, 1585, 1450, 1450, 1583, 1450, 1450, 1450, 1586, 1586,
     1587, 1586, 1450, 1450, 1450, 1450, 1588, 1588, 1589, 1589,
     1589, 1590, 1450, 1591, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1592, 1450, 1450, 1593, 1594, 1450, 1595, 1450,
     1596, 1596, 1596, 1450, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1597, 1598, 1598, 1598, 1598, 1599, 1450, 1450, 1600,
     1450, 1450, 1450, 1450, 1601, 1574, 1575, 1576, 1577, 1578,
     1602, 1602, 1580, 1581, 1582, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1583,

     1450, 1450, 1450, 1450, 1583, 1450, 1450, 1450, 1586, 1450,
     1450, 1589, 1590, 1603, 1450, 1450, 1450, 1594, 1604, 1450,
     1450, 1450, 1450, 1596, 1596, 1450, 1450, 1450, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1450, 1450, 1598, 1598,
     1598, 1450, 1450, 1450, 1450, 1450, 1605, 1574, 1606, 1606,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1590, 1450, 1450, 1450, 1604, 1604, 1604, 1450, 1604,
     1450, 1450, 1450, 1596, 1596, 1450, 1450, 1450, 1450, 1450,

     1596, 1596, 1596, 1596, 1450, 1450, 1450, 1607, 1574, 1608,
     1608, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1609, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1590, 1450, 1604, 1604, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1610, 1450, 1450, 1450,
     1450, 1611, 1450, 1450, 1450, 1612, 1612, 1613, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1609, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1590, 1450, 1604, 1604, 1450,

     1450, 1450, 1614, 1450, 1450, 1615, 1450, 1450, 1616, 1616,
     1613, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1617, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1618, 1604, 1604, 1450, 1450, 1450,
     1614, 1450, 1450, 1619, 1450, 1450, 1620, 1620, 1450, 1621,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1604, 1604, 1450, 1450, 1450, 1450,
     1450, 1622, 1450, 1450, 1623, 1623, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1604, 1604, 1450,
     1450, 1450, 1450, 1450, 1624, 1450, 1450, 1625, 1625, 1450,

     1450, 1450, 1450, 1450, 1450, 1604, 1604, 1450, 1450, 1450,
     1450, 1626, 1450, 1450, 1627, 1627, 1450, 1450, 1450, 1604,
     1604, 1450, 1450, 1450, 1450, 1628, 1450, 1450, 1629, 1629,
     1450, 1604, 1604, 1450, 1450, 1450, 1450, 1630, 1450, 1450,
     1631, 1631, 1450, 1604, 1604, 1450, 1632, 1450, 1450, 1633,
     1633, 1450, 1634, 1450, 1450, 1635, 1635, 1450, 1636, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,    0,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450
    } ;

static yyconst flex_int16_t yy_nxt[7805] =
    {   0,
     1450,   83,  800,   84,   85,   83, 1450,   84,   85,   83,
     1450,   84,   85,  519,  390,  390,  390,   86,  391,  391,
      391,   86,  463,  410,  410,   86,   87,  411,  411,  421,
       87,  433,  434,  422,   87,  398,  398,  398,  398,  390,
      438,  463,  672,  391,  439,  398,  398,  398,  398,  398,
      403,  405,  404,  413,  673,  414,  467, 1450,  406,  407,
      428,  428,  428,   88,  443,  468,  447,   88,  444,  429,
      448,   88,   89,   90,   91,   92,   93,   89,   89,   94,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   95,
       89,   89,   89,   89,   89,   89,   89,   89,   96,   89,

       97,   97,   97,   97,   97,   89,   89,   89,   89,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   89,   89,   89,   99,  100,  101,  100,  102,
      103,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  104,  100,  100,  100,  100,  100,  100,
      100,  100,  105,  100,  106,  106,  106,  106,  106,  100,
      100,  100,  100,  106,  106,  107,  108,  109,  106,  106,
      106,  110,  106,  106,  106,  106,  106,  106,  111,  106,
      106,  106,  112,  106,  106,  106,  100,  100,  100,  113,

      114,  115,  114,  116,  117,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  118,  114,  114,
      114,  114,  114,  114,  114,  114,  119,  114,  120,  120,
      120,  120,  120,  114,  114,  114,  114,  120,  120,  120,
      120,  121,  120,  120,  120,  122,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      114,  114,  114,  123,  125,  965,  126,  127,  471,  128,
      475,  476,  125,  129,  126,  127,  231,  128,  232,  233,
      130,  129,  134,  429,   84,  135,  452,  136,  130,  131,
      453,  474,  234,  186,  492,  187,  188,  131,  137,  493,

      134,  235,   84,  135,  189,  136,  533,  138,  463,  190,
      428,  428,  428,  459,  530,  139,  137,  460,  191,  429,
      428,  428,  428,  463,  432,  138,  132,  463,  463,  429,
      463,  463,  488,  139,  132,  482,  495,  464,  236,  431,
      496,  465,  463,  471,  140,  483,  489,  463,  466,  463,
      463,  498,  499,  472,  410,  192,  501,  473,  411,  538,
      539,  502,  140,  141,  142,  141,  143,  144,  141,  145,
      141,  141,  141,  146,  141,  141,  141,  141,  141,  141,
      147,  141,  141,  141,  141,  141,  141,  141,  141,  148,
      149,  150,  150,  151,  152,  151,  141,  153,  141,  141,

      150,  150,  150,  150,  154,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  155,
      150,  150,  150,  156,  157,  141,  158,  160,  639,   84,
       85,  160,  161,   84,   85,  479,  161,  167,  518,   84,
       85,  597,  161,  162,  410,  477,  478,  162,  411,  519,
      598,  505,  163,  168,  479,  506,  163,  390,  481,  548,
      164,  527,  169,  167,  164,   84,   85,  172,  161,   84,
       85,  172,  520,   84,   85,  549,  173,  481,  537,  168,
      173,  390,  391,  174,  471,  532,  550,  174,  169,  165,
      551,  482,  175,  165,  662,  548,  175,  548,  521,  170,

      176,  483,  530,  179,  176,   84,   85,  179,  180,   84,
       85,  549,  180,  549,  696,  428,  428,  428,   83,  181,
       84,   85,  552,  181,  429,  170,  565,  566,  182,  177,
      534,  535,  182,  177,   86,  186,  183,  187,  188,  194,
      183,   84,  195,   87,   82,  557,  189,  522,  520,  558,
      201,  190,  202,  203,  194,  196,   84,  195,  519,   82,
      191,  530,  504,   82,  197,  184,  204,  575,  576,  184,
      196,  435,  548,  561,  521,  205,  471,  562,   82,  197,
       88,  520,  553,  206,  428,  428,  428,  390,  549,  553,
      663,  391,  548,  429,  554,  390,  511,  192,  492,  391,

      571,  198,  436,  493,  572,  390,  390,  521,  549,  391,
      391,  579,  207,  431, 1168,  391,  198,   82,   83,   82,
       84,   85,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   86,   82,   82,   82,   82,   82,
       82,   82,   82,   87,   82,  199,  199,  199,  199,  199,
       82,   82,   82,   82,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,   82,   82,   82,
       88,  201,  580,  202,  203,  488,  581,  238,  239,  240,
      241,  540,  390,  242,  583,  584,  391,  204,  601,  489,

      587,  590,  541,  243,  588,  463,  205,  602,  590,  520,
      615,  594,  244,  627,  206,  591,  594,  594,  594,  616,
      628,  594,  630,  594,  463,  542,  624,  624,  635,  594,
      594,  594,  670,  631,  501,  521,  636,  636,  488,  502,
      671,  627, 1168,  207,  208,  208,  208,  208,  208,  245,
      630,  543,  489,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   82,   83,  209,   84,
       85,   82,   82,   82,   82,   82,   82,  210,  211,   82,
      212,   82,  213,   86,   82,   82,   82,   82,   82,   82,

       82,   82,   87,   82,  214,  214,  214,  214,  214,   82,
      215,   82,   82,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,   82,   82,   82,   88,
      216,  217,  218,  219,  220,  216,  221,  222,  216,  216,
      223,  216,  216,  216,  216,  216,  216,  224,  216,  216,
      216,  216,  216,  216,  216,  216,  225,  226,  227,  227,
      227,  227,  227,  216,  228,  216,  216,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      216,  216,  216,  229,   83,  592,   84,   85,   83,  504,
       84,   85,   83,  639,   84,   85,  637,  637,  637,  261,
       86,  262,  263,  463,   86,  429,  729,  534,   86,   87,
      658,  264,  467,   87,  730,  265,  261,   87,  262,  263,
     1163,  468,  463,  286,  266,  287,  288,  286,  264,  287,
      288,  604,  265,  467,  604,  428,  428,  428,  530,  289,
      604,  266,  468,  289,  429,  701,   88, 1163,  290,  291,
       88,  639,  290,  291,   88,  247,  291,  248,  249,  715,
      291,  267,  530,  713,  716,  678,  627,  250,  595,  605,
      294,  251,  295,  296,  428,  428,  428,  596,  267,  606,

      252,  253,  297,  429, 1157,  292,  298,  463,  253,  292,
      254, 1157,  544,  618,  627,  299,  618,  294,  659,  295,
      296,  706,  618,  541,  727,  727,  463,  536,  302,  297,
      287,  303,  302,  298,  287,  303,  254,  255,  247,  256,
      248,  249,  299,  704,  304,  639,  542,  640,  304,  704,
      257,  619,  300,  305,  251,  542,  731,  305,  428,  428,
      428,  620,  432,  252,  253,  477,  478,  429,  732,  597,
      704,  253,  543,  258,  398,  398,  398,  398,  598,  300,
     1151,  543,  665,  789,  398,  398,  398,  398,  398,  758,
      306,  737,  738,  790,  306, 1151,  704,  759,  759,  259,

      255,  268,  269,  268,  270,  271,  268,  268,  268,  268,
      268,  268,  268,  268,  272,  268,  268,  268,  273,  268,
      268,  268,  268,  268,  268,  268,  268,  274,  268,  275,
      275,  275,  275,  275,  268,  276,  268,  268,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  268,  268,  268,  277,  247,  639,  248,  249,  630,
      330,  791,   84,  331, 1143,  332,  347,  278,  102,  348,
      330,  279,   84,  331,  630,  332,  333,  792,  627, 1142,
      252,  280,  349,  477,  478,  334,  333,  630,  280,  760,

      254,  350,  479,  335,  463,  334,  762, 1142,  338,  351,
       84,  339,  630,  335,  763,  763,  627,  340,  347,  542,
      102,  348,  471,  463,  341,  481,  254,  255,  247,  281,
      248,  249,  336,  342,  349,  782,  775,  463,  352,  463,
      282,  343,  336,  350,  279,  543,  428,  428,  428,  639,
      774,  351,  548,  252,  280,  429,  463,  715,  463,  625,
      782,  280,  716,  283,  594,  625,  625,  899,  549,  625,
      344,  594,  764,  764,  764,  431,  900,  625,  625,  625,
      352,  429,  776,  776,  776,  737,  738,  782,  704,  284,
      255,  307,  308,  307,  309,  310,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  311,  307,
      307,  307,  307,  307,  307,  307,  307,  312,  313,  314,
      314,  314,  314,  314,  307,  315,  307,  307,  314,  314,
      314,  316,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  307,  307,  307,  317,  318,  319,  318,  320,  321,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  322,  318,  318,  318,  318,  318,  318,  318,
      318,  323,  318,  324,  324,  324,  324,  324,  318,  325,
      318,  318,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  318,  318,  318,  326,  327,
      851, 1131,  632,  820,  821,  822,  854,  632,  632,  632,
      852, 1130,  632,  959,  632,  328,  328,  328,  328,  328,
      632,  632,  632,  823,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  338,  643,   84,
      339,  627,  896,  643,  643,  643,  340,  853,  643,  463,
      643,  823, 1004,  341,  646, 1130,  643,  643,  643,  646,
      646,  646,  342,  854,  646,  838,  646,  639,  463,  627,

      343,  649,  646,  646,  646,  704,  594,  649,  649,  815,
     1119,  649,  704,  649,  622,  897,  844,  816,  816,  649,
      649,  649,  843,  843,  845,  845,  865,  865,  865,  344,
      345,  345,  345,  345,  345,  801,  948,  949,  906,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  354,  695,  355,  356, 1450,  357, 1118,  520,
      896,  358,  359,  360,  519,  889, 1450,  366,  361,   84,
      367,  826,  368,  792,  826,  889,  369,  362,  363, 1117,
      826,  837,  522,  370,  837,  521,  366,  520,   84,  367,

      837,  368,  371,  519,  805,  369, 1116,  428,  428,  428,
      372,  705,  370,  897, 1116,  541,  429,  948,  949,  806,
      639,  371,  541,  521,  364,  354,  520,  355,  356,  372,
      357,  846,  846,  846,  358,  359,  360,  652,  704,  373,
      429,  361,  652,  652,  652,  542,  766,  652, 1105,  652,
      362,  363,  521,  542,  657,  652,  652,  652,  373,  657,
      657,  594,  989,  704,  657,  704,  657, 1450,  899,  544,
     1450,  543,  657,  657,  657,  800, 1450,  900,  704,  543,
      541, 1450,  805, 1104, 1450, 1103,  519,  364,  374,  375,
     1450,   84,  377,  541,  374,  374,  374,  618,  374,  955,

      618,  374,  374,  542, 1102,  378,  618,  840,  956,  520,
      374,  374,  374,  374,  379,  374,  542,  915,  915,  915,
      675,  374,  374,  374,  374,  675,  675,  675,  838,  543,
      675, 1450,  594,  399, 1101,  521,  399, 1450,  675,  675,
      675,  854,  543,  822,  822,  822, 1100, 1099,  374,  374,
      374,  380,  374,  375,  400,   84,  377,  400,  374,  374,
      374,  955,  374,  823,  725,  374,  374, 1099,  639,  378,
      956,  839,  884,  884,  374,  374,  374,  374,  379,  374,
      924,  925,  926, 1033,  700,  374,  374,  374,  374,  700,
      700,  700, 1034, 1093,  700, 1087,  700,  428,  428,  428,

     1086,  823,  700,  700,  700, 1085,  429,  865,  865,  865,
     1084, 1083,  374,  374,  374,  380,  382,  718,  383,  384,
      385, 1082,  718,  718,  718, 1033,  957,  718,  385,  718,
      958, 1081,  386,  721, 1034,  718,  718,  718,  721,  721,
      721,  387,  388,  721,  792,  721, 1080,  958,  848,  388,
      594,  721,  721,  721,  854,  733,  733,  733, 1450, 1079,
      733, 1450,  594,  412,  854,  923,  412, 1450,  733,  733,
      733, 1077,  891,  892,  893,  873,  874, 1076,  389,  382,
      875,  383,  384,  385,  876,  877, 1076, 1450,  639,  878,
     1450,  385,  823,  879,  880,  386, 1450, 1070,  841,  907,

      907,  907, 1063,  497,  387,  388,  497, 1062,  429,  865,
      865,  865,  388,  943,  925,  926,  961,  961,  961,  915,
      915,  915,  924,  925,  926,  429,  564,  753, 1061,  564,
      823,  926,  925,  926,  943,  925,  926,  865,  865,  865,
     1060,  389,  393,  393,  394,  393,  393,  393,  393,  395,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      396,  396,  396,  396,  396,  393,  393,  393,  393,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  393,  393,  393,  393,  508,  826,  957, 1059,
      826,  568,  958,  508,  568, 1058,  826, 1057,  509,  510,
      511,  837,  570,  512,  837,  570,  792,  513,  514,  958,
      837, 1056,  515,  915,  915,  915,  516,  517,  393,  393,
      394,  393,  393,  393,  393,  395,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  396,  396,  396,  396,
      396,  393,  393,  393,  393,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  393,  393,

      393,  393,  595, 1005, 1005, 1005,  887,  821,  888,  792,
     1054,  596,  429, 1043, 1043, 1043,  889,  854,  398,  398,
      398,  398,  429,  915,  915,  915,  890, 1053,  398,  398,
      398,  398,  398,  660,  463,  893,  893,  893,  660,  660,
      660,  574,  854,  660,  574,  660,  854,  893,  893,  893,
     1052,  660,  660,  661,  471,  823,  664,  399, 1051, 1050,
      399,  664,  664,  664,  890, 1049,  664,  823,  664, 1012,
      950,  951,  952, 1048,  664,  664,  664,  676,  677,  678,
      679,  968,  680, 1071, 1071, 1071,  681,  682, 1048, 1046,
      823,  683,  429,  823,  639,  684,  685,  702, 1042,  428,

      428,  428,  702,  702,  702,  823, 1035,  702,  429,  702,
     1094, 1094, 1094, 1032, 1031,  702,  702,  702, 1030,  429,
     1111, 1111, 1111, 1125, 1125, 1125,  530,  548,  823,  429,
     1029,  711,  429, 1137, 1137, 1137,  711,  711,  711, 1028,
     1027,  711,  429,  712, 1026,  400,  704,  909,  400,  711,
      711,  711,  827,  827,  828,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      400,  400,  400,  400,  827,  827,  827,  827,  827,  827,
      400,  400,  400,  400,  400,  827,  827,  827,  827,  400,
      400,  400,  400,  400,  400,  400,  400,  829,  400,  400,

      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  827,  827,  827,  827,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  946,  892,  947,  792,  898,  898,
      898,  898,  898,  898,  889,  947,  893,  947, 1025,  898,
      898,  898,  898,  412,  890,  889,  412,  792,  792, 1024,
      952,  952,  952, 1023, 1022,  890,  952,  952,  952, 1021,
      979, 1000, 1001, 1002, 1020, 1019,  898,  898,  898,  898,
      823,  963,  963,  963, 1018,  964,  823,  998,  951,  999,
      429,  823,  890, 1017,  999,  952,  999,  889, 1016, 1002,

     1002, 1002,  497,  890,  889,  497, 1015,  890, 1002, 1002,
     1002, 1007, 1007, 1007,  890,  964, 1014, 1013,  823,  823,
      429, 1036, 1001, 1037,  823, 1097, 1097, 1097,  823,  823,
      969,  889, 1012, 1037, 1002, 1037, 1038, 1039, 1040,  965,
     1010,  890, 1010,  889, 1008,  890,  639, 1040, 1040, 1040,
      953,  564,  890,  890,  564,  997,  823,  823, 1040, 1040,
     1040, 1045, 1045, 1045,  996,  964,  823,  823,  568,  965,
      429,  568, 1065, 1039, 1066, 1066, 1040, 1066,  823,  890,
      995,  570,  889,  965,  570,  889, 1067, 1068, 1069,  994,
      574,  890,  890,  574,  823,  890,  993, 1069, 1069, 1069,

     1069, 1069, 1069,  992,  400,  823,  823,  400,  991, 1073,
     1073, 1073,  412,  964,  990,  412,  823,  823,  429,  965,
      823, 1074, 1074, 1074,  988,  964, 1088, 1068, 1089,  564,
      890,  400,  564,  890,  400,  987,  889, 1089, 1069, 1089,
     1090, 1091, 1092,  986,  823,  985,  890,  889, 1092, 1092,
     1092, 1092, 1092, 1092,  984,  823, 1041,  890,  823, 1041,
      823, 1096, 1096, 1096,  983,  964,  982,  965,  823,  981,
      429,  823, 1106, 1091, 1107,  980, 1107, 1092, 1107,  965,
      979,  977,  889,  976,  890,  975,  889, 1108, 1109, 1110,
      974,  973,  890,  972,  971,  890,  890,  970,  823,  969,

     1110, 1110, 1110, 1110, 1110, 1110,  823,  823,  967,  823,
      967,  639, 1113, 1113, 1113,  960,  964,  905,  959,  965,
      823,  429,  902,  823, 1114, 1114, 1114, 1120, 1109, 1121,
      890, 1121, 1110, 1121,  890,  954,  953,  889, 1128, 1128,
     1128,  889, 1122, 1123, 1124,  823,  402,  890, 1124, 1124,
     1124,  890, 1124, 1124, 1124, 1127, 1127, 1127,  823,  964,
      945,  823,  823,  725,  429, 1140, 1140, 1140,  823,  725,
      965,  944,  823, 1132, 1123, 1133,  942, 1133, 1124, 1133,
      941,  940,  965,  889,  939,  890,  938,  889,  937,  890,
     1139, 1139, 1139,  890,  964,  936,  965,  890,  935,  429,

      823, 1134, 1135, 1136,  934,  933,  823, 1136, 1136, 1136,
      823,  932,  931,  965, 1136, 1136, 1136,  930, 1144, 1135,
     1145,  823,  929,  965, 1134, 1135, 1136,  823,  889,  928,
      927,  890,  922,  921,  823,  890,  920,  919,  890,  918,
     1145, 1136, 1145,  917,  823, 1149, 1149, 1149,  965,  916,
      889, 1136, 1136, 1136, 1136, 1136, 1136,  914,  913,  823,
      890, 1146, 1146, 1146,  912,  823, 1152, 1152, 1152,  911,
      429,  823,  823,  911,  823,  429,  890, 1148, 1148, 1148,
      639,  964,  823, 1155, 1155, 1155,  429, 1144, 1135, 1145,
     1145, 1136, 1145, 1158, 1158, 1158,  844,  889,  890,  622,

      889,  622,  429,  965, 1154, 1154, 1154,  890,  964,  823,
      890,  905,  823,  429, 1160, 1160, 1160,  904,  964, 1161,
     1161, 1161,  903,  429, 1164, 1164, 1164, 1166, 1166, 1166,
      902,  964,  901,  429,  743,  965,  429, 1167, 1167, 1167,
      895,  965, 1169, 1169, 1169,  890,  894,  819,  890,  885,
      725,  429, 1170, 1170, 1170,  882,  964, 1171, 1171, 1171,
      881,  429,  965,  852, 1172, 1172, 1172, 1173, 1173, 1173,
      808,  964,  965,  429,  807,  803,  429,  965, 1174, 1174,
     1174, 1175, 1175, 1175,  802,  965,  872, 1176, 1176, 1176,
      429,  964, 1177, 1177, 1177,  965,  429, 1178, 1178, 1178,

     1179, 1179, 1179,  871,  964,  870,  429,  869,  868,  429,
      965, 1180, 1180, 1180,  867,  965,  866, 1181, 1181, 1181,
     1182, 1182, 1182,  864,  964,  965,  429,  863,  862,  429,
     1183, 1183, 1183, 1184, 1184, 1184,  965, 1185, 1185, 1185,
      861,  964,  429,  860,  859,  965,  429, 1186, 1186, 1186,
      965, 1187, 1187, 1187,  858, 1188, 1188, 1188,  965,  964,
      429, 1189, 1189, 1189,  429, 1190, 1190, 1190,  857,  965,
      856, 1191, 1191, 1191,  429,  964,  855,  778,  965,  471,
      429, 1192, 1192, 1192, 1193, 1193, 1193,  850,  965,  850,
     1194, 1194, 1194,  429,  964,  965, 1195, 1195, 1195,  429,

     1196, 1196, 1196,  639,  622,  965, 1197, 1197, 1197,  429,
      964,  836,  835,  965,  834,  429, 1198, 1198, 1198,  965,
      833, 1199, 1199, 1199, 1200, 1200, 1200,  832,  964,  965,
      429,  831,  830,  429, 1201, 1201, 1201,  825,  824,  965,
     1202, 1202, 1202, 1203, 1203, 1203,  740,  964,  965,  429,
      819,  817,  429,  735,  965, 1204, 1204, 1204, 1205, 1205,
     1205, 1206, 1206, 1206,  965,  964,  735,  429,  725,  725,
      429, 1207, 1207, 1207,  965, 1208, 1208, 1208,  813, 1209,
     1209, 1209,  965,  964,  429, 1210, 1210, 1210,  429, 1211,
     1211, 1211,  965, 1212, 1212, 1212,  812,  964,  429,  811,

      810,  965,  429, 1213, 1213, 1213, 1214, 1214, 1214, 1216,
     1216, 1216,  809,  965,  808,  429, 1215, 1215, 1215,  965,
      964, 1217, 1217, 1217,  807,  429, 1219, 1219, 1219,  965,
      429, 1218, 1218, 1218,  804,  964,  530,  965,  530,  803,
      429,  802,  799,  965, 1220, 1220, 1220,  798, 1221, 1221,
     1221,  965,  964,  429, 1222, 1222, 1222,  429, 1225, 1225,
     1225,  965, 1223, 1223, 1223,  797,  796,  965, 1224, 1224,
     1224,  429,  964,  795,  965,  794,  793,  429, 1226, 1226,
     1226, 1227, 1227, 1227,  965,  964,  788,  429,  787,  965,
      429, 1228, 1228, 1228, 1229, 1229, 1229,  786, 1230, 1230,

     1230,  785,  964,  429,  784,  783,  965,  429, 1231, 1231,
     1231,  781,  965, 1232, 1232, 1232,  965,  780,  779, 1233,
     1233, 1233,  429,  964,  778,  735,  965,  669,  429, 1234,
     1234, 1234, 1235, 1235, 1235,  777, 1236, 1236, 1236,  965,
      964,  429, 1237, 1237, 1237,  429, 1238, 1238, 1238,  965,
     1239, 1239, 1239,  471,  964,  429,  965,  471,  773,  429,
     1240, 1240, 1240, 1241, 1241, 1241,  965, 1242, 1242, 1242,
      772,  964,  429, 1243, 1243, 1243,  429,  965,  772, 1244,
     1244, 1244, 1245, 1245, 1245,  770,  964,  965,  429,  769,
      768,  429,  767,  639,  965, 1246, 1246, 1246,  761,  761,

      965, 1247, 1247, 1247,  622, 1248, 1248, 1248,  965,  964,
      429, 1249, 1249, 1249,  429, 1250, 1250, 1250,  965, 1251,
     1251, 1251,  622,  964,  429,  965,  619,  756,  429,  755,
      754,  965, 1252, 1252, 1252, 1253, 1253, 1253,  753,  752,
      965, 1254, 1254, 1254,  429,  964, 1255, 1255, 1255,  751,
      429,  750,  749,  965,  748, 1256, 1256, 1256, 1257, 1257,
     1257,  747,  964,  965,  429,  746,  745,  429,  744,  965,
     1258, 1258, 1258, 1259, 1259, 1259,  743,  965,  742, 1260,
     1260, 1260,  429,  964, 1261, 1261, 1261,  741,  429,  740,
      965, 1262, 1262, 1262, 1263, 1263, 1263,  735,  964,  965,

      429,  734,  678,  429,  965, 1264, 1264, 1264, 1265, 1265,
     1265, 1266, 1266, 1266,  583,  964,  965,  429,  593,  592,
      429, 1267, 1267, 1267, 1268, 1268, 1268,  728,  965,  725,
     1269, 1269, 1269,  429,  964,  575,  723,  965,  592,  429,
      722,  565,  965, 1270, 1270, 1270, 1271, 1271, 1271, 1272,
     1272, 1272,  965,  964,  720,  429,  719,  717,  429, 1273,
     1273, 1273,  592,  965, 1274, 1274, 1274,  714,  710,  965,
     1276, 1276, 1276,  429, 1275, 1275, 1275,  709,  964,  965,
     1277, 1277, 1277,  429, 1279, 1279, 1279,  708,  965,  429,
     1278, 1278, 1278,  707,  964, 1280, 1280, 1280,  546,  429,

      545,  965,  703,  592,  429,  530,  530,  965,  699, 1281,
     1281, 1281,  698,  964, 1282, 1282, 1282,  965,  429,  697,
     1283, 1283, 1283, 1285, 1285, 1285,  524,  523,  965,  429,
      694,  693,  965,  692, 1284, 1284, 1284,  691,  964, 1288,
     1288, 1288,  965,  429, 1286, 1286, 1286,  690,  965,  689,
     1287, 1287, 1287,  429,  964, 1289, 1289, 1289,  688,  429,
      687, 1290, 1290, 1290,  429,  964,  686,  965,  674,  498,
      429,  669,  965, 1291, 1291, 1291, 1292, 1292, 1292,  494,
      668,  965, 1293, 1293, 1293,  429,  964, 1294, 1294, 1294,
      667,  429,  965, 1295, 1295, 1295,  486,  965, 1297, 1297,

     1297,  485,  429, 1296, 1296, 1296,  484,  964,  965, 1298,
     1298, 1298,  429, 1299, 1299, 1299,  485,  964,  429,  965,
      666,  475,  429, 1300, 1300, 1300, 1301, 1301, 1301,  471,
      656,  965, 1302, 1302, 1302,  429,  964, 1303, 1303, 1303,
      965,  429, 1304, 1304, 1304,  965, 1305, 1305, 1305,  655,
      964,  429, 1306, 1306, 1306,  429,  965, 1307, 1307, 1307,
      654,  965,  654, 1308, 1308, 1308,  429,  964, 1309, 1309,
     1309,  965,  429, 1310, 1310, 1310, 1311, 1311, 1311,  651,
      964,  965,  429,  650,  648,  429, 1312, 1312, 1312,  647,
      965, 1313, 1313, 1313,  645,  965,  644, 1314, 1314, 1314,

      429,  964,  642,  641,  965,  433,  429, 1315, 1315, 1315,
      965, 1316, 1316, 1316, 1317, 1317, 1317,  639,  964,  633,
      429,  965,  622,  429,  617,  614,  965, 1318, 1318, 1318,
     1319, 1319, 1319,  612,  965,  610, 1320, 1320, 1320,  429,
      964, 1321, 1321, 1321,  965,  429,  609, 1322, 1322, 1322,
     1323, 1323, 1323,  608,  964,  965,  429,  607,  603,  429,
     1324, 1324, 1324,  600,  599,  965, 1325, 1325, 1325, 1326,
     1326, 1326,  965,  964,  593,  429,  592,  589,  429, 1327,
     1327, 1327, 1328, 1328, 1328,  965, 1329, 1329, 1329,  392,
      964,  429,  392,  392,  965,  429, 1330, 1330, 1330,  965,

     1331, 1331, 1331, 1332, 1332, 1332,  578,  964,  965,  429,
      392,  392,  429, 1333, 1333, 1333,  392,  569,  965, 1334,
     1334, 1334, 1335, 1335, 1335,  392,  964,  965,  429,  567,
      392,  429, 1336, 1336, 1336,  563,  559,  965, 1337, 1337,
     1337, 1338, 1338, 1338,  965,  964,  556,  429,  546,  545,
      429, 1339, 1339, 1339,  965, 1340, 1340, 1340, 1341, 1341,
     1341,  965,  964,  536,  429,  530,  531,  429, 1342, 1342,
     1342,  965, 1343, 1343, 1343, 1344, 1344, 1344,  530,  964,
      965,  429,  530,  530,  429, 1345, 1345, 1345,  528,  526,
      965, 1346, 1346, 1346, 1347, 1347, 1347,  524,  964,  965,

      429,  523,  507,  429, 1348, 1348, 1348,  504,  392,  965,
     1349, 1349, 1349, 1350, 1350, 1350,  965,  964,  392,  429,
      392,  494,  429, 1351, 1351, 1351,  965, 1352, 1352, 1352,
     1353, 1353, 1353,  965,  964,  491,  429,  487,  486,  429,
     1354, 1354, 1354,  965, 1355, 1355, 1355, 1356, 1356, 1356,
      485,  964,  965,  429,  484,  471,  429, 1357, 1357, 1357,
      471,  471,  965, 1358, 1358, 1358,  471,  964, 1359, 1359,
     1359,  965,  429, 1360, 1360, 1360,  461,  964, 1361, 1361,
     1361,  965,  429, 1362, 1362, 1362,  458,  964,  965, 1363,
     1363, 1363,  429, 1364, 1364, 1364,  454,  964,  965, 1365,

     1365, 1365,  429,  449,  445,  965,  440, 1366, 1366, 1366,
      427,  964, 1367, 1367, 1367,  965,  429,  392, 1368, 1368,
     1368,  965,  964, 1369, 1369, 1369,  965,  429, 1370, 1370,
     1370,  965, 1371, 1371, 1371,  426,  965, 1372, 1372, 1372,
      423,  965, 1373, 1373, 1373,  419,  418,  965, 1374, 1374,
     1374,  965, 1375, 1375, 1375,  415,  392,  965, 1376, 1376,
     1376, 1377, 1377, 1377,  409,  965, 1378, 1378, 1378,  408,
      965, 1379, 1379, 1379,  402,  401,  965, 1380, 1380, 1380,
      392,  965, 1381, 1381, 1381,  392,  965, 1382, 1382, 1382,
      965, 1383, 1383, 1383,  392,  965, 1384, 1384, 1384, 1450,

      965, 1385, 1385, 1385, 1450, 1450,  965, 1386, 1386, 1386,
      965, 1387, 1387, 1387, 1450, 1450,  965, 1450, 1450,  965,
     1388, 1388, 1388, 1450,  965, 1389, 1389, 1389, 1450,  965,
     1390, 1390, 1390, 1450, 1450,  965, 1391, 1391, 1391, 1450,
      965, 1392, 1392, 1392, 1450,  965, 1393, 1393, 1393,  965,
     1394, 1394, 1394, 1450,  965, 1395, 1395, 1395, 1450,  965,
     1396, 1396, 1396, 1450, 1450,  965, 1397, 1397, 1397,  965,
     1398, 1398, 1398, 1399, 1399, 1399, 1450, 1450,  965, 1400,
     1400, 1400, 1450,  965, 1401, 1401, 1401, 1450,  965, 1402,
     1402, 1402, 1450, 1450,  965, 1403, 1403, 1403, 1450,  965,

     1404, 1404, 1404, 1450,  965, 1405, 1405, 1405,  965, 1406,
     1406, 1406, 1450,  965, 1407, 1407, 1407, 1450,  965, 1408,
     1408, 1408, 1450, 1450,  965, 1409, 1409, 1409,  965, 1450,
     1450,  965, 1410, 1410, 1410, 1450, 1450,  965, 1411, 1411,
     1411, 1450,  965, 1412, 1412, 1412, 1450,  965, 1413, 1413,
     1413, 1450, 1450,  965, 1414, 1414, 1414, 1450,  965, 1415,
     1415, 1415, 1450,  965, 1416, 1416, 1416,  965, 1417, 1417,
     1417, 1450,  965, 1418, 1418, 1418, 1450,  965, 1419, 1419,
     1419, 1450, 1450,  965, 1420, 1420, 1420, 1421, 1421, 1421,
      965, 1422, 1422, 1422, 1450, 1450,  965, 1423, 1423, 1423,

     1450,  965, 1424, 1424, 1424, 1450,  965, 1425, 1425, 1425,
     1450, 1450,  965, 1426, 1426, 1426, 1450,  965, 1427, 1427,
     1427, 1450,  965, 1428, 1428, 1428,  965, 1429, 1429, 1429,
     1450,  965, 1430, 1430, 1430, 1450,  965, 1431, 1431, 1431,
     1450, 1450,  965, 1450, 1450,  965, 1432, 1432, 1432,  965,
     1433, 1433, 1433, 1450, 1450,  965, 1434, 1434, 1434, 1450,
      965, 1435, 1435, 1435, 1450,  965, 1436, 1436, 1436, 1450,
     1450,  965, 1437, 1437, 1437, 1450,  965, 1438, 1438, 1438,
     1450,  965, 1439, 1439, 1439,  965, 1440, 1440, 1440, 1450,
      965, 1441, 1441, 1441, 1450,  965, 1442, 1442, 1442, 1443,

     1443, 1443, 1450, 1450,  965, 1444, 1444, 1444,  965, 1445,
     1445, 1445, 1450, 1450,  965, 1446, 1446, 1446, 1450,  965,
     1447, 1447, 1447, 1450,  965, 1448, 1448, 1448, 1450, 1450,
      965, 1449, 1449, 1449, 1450,  965, 1373, 1373, 1373, 1450,
      965, 1450, 1450, 1450,  965, 1450, 1450, 1450, 1450,  965,
     1450, 1450, 1450, 1450,  965, 1450, 1450,  965, 1450, 1450,
     1450, 1450, 1450,  965, 1450, 1450, 1450,  965, 1450, 1450,
     1450, 1450, 1450,  965, 1450, 1450, 1450, 1450,  965, 1450,
     1450, 1450, 1450,  965, 1450, 1450, 1450, 1450, 1450,  965,
     1450, 1450, 1450, 1450,  965,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  416,  416,  416, 1450,  416,
      416, 1450,  416, 1450,  416,  416,  416,  416, 1450,  416,
      416,  416,  416,  416,  416,  417,  417,  417, 1450,  417,

      417,  417,  417, 1450,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  420,  420,  420, 1450,  420,
      420, 1450,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420, 1450,  420,  424,  424,  424, 1450,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  425,  425,  425, 1450,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  430,  430,  430, 1450, 1450,
     1450, 1450,  430, 1450, 1450, 1450, 1450,  430, 1450, 1450,
      430,  437,  437,  437, 1450, 1450,  437, 1450,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437, 1450,
      437,  441,  441,  441, 1450,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  442,  442,  442, 1450, 1450,  442, 1450,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  446,  446,  446, 1450, 1450,  446,  446,  446, 1450,
      446,  446,  446,  446,  446,  446,  446,  446,  446, 1450,
      446,  450,  450,  450, 1450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  451, 1450, 1450,  451, 1450,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451, 1450,
      451,  455,  455,  455, 1450,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456, 1450,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  457,  457, 1450,  457,  457,  457,  457,  457,  457,
     1450, 1450,  457,  457,  457,  457,  457,  457,  457, 1450,
      457,  462,  462,  462, 1450,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  469, 1450, 1450, 1450, 1450, 1450, 1450,  469, 1450,

     1450, 1450, 1450,  469, 1450, 1450,  469,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470, 1450,  470,  480,  480, 1450,
     1450, 1450, 1450, 1450,  480, 1450, 1450, 1450, 1450,  480,
     1450, 1450,  480,  480,  490, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450,  490, 1450,  490, 1450, 1450,  490,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      503, 1450,  503, 1450,  503,  503,  503,  503,  503,  503,
      503, 1450,  503, 1450,  503,  503, 1450,  503,  525,  525,

      525, 1450,  525,  525,  525,  525,  525,  525,  525, 1450,
      525,  525,  525,  525,  525,  525,  525,  525,  529,  529,
      529, 1450,  529,  529,  529,  529,  529,  529,  529, 1450,
      529,  529,  529,  529,  529, 1450,  529,  529,  547,  547,
      547, 1450,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547, 1450,  547, 1450,  547,  548,  548,
      548, 1450,  548,  548,  548,  548,  548,  548,  548,  548,
      548, 1450,  548,  548, 1450,  548, 1450,  548,  549, 1450,
      549, 1450,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549, 1450,  549, 1450,  549,  555, 1450,

      555, 1450,  555,  555,  555,  555,  555,  555,  555, 1450,
      555,  555,  555,  555,  555,  555,  555,  555,  560, 1450,
      560, 1450,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  573,  573,
      573, 1450,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  577,  577,
      577, 1450,  577,  577,  577,  577, 1450,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  585, 1450,

     1450,  585, 1450,  585, 1450,  585,  585, 1450,  585, 1450,
      585, 1450, 1450,  585,  586,  586,  586, 1450,  586, 1450,
      586,  586,  586,  586,  586, 1450,  586, 1450,  586,  586,
     1450,  586, 1450,  586,  611,  611,  611, 1450,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  613,  613,  613, 1450,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  416,  416,  416, 1450,  416,  416,
     1450,  416, 1450,  416,  416,  416,  416, 1450,  416,  416,
      416,  416,  416,  416,  621,  621,  621, 1450,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621, 1450,  621,  623,  623,  623, 1450,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  420,  420,  420, 1450,  420,  420,
     1450,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420, 1450,  420,  626,  626,  626, 1450,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  629,  629,  629, 1450,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  634,  634,  634, 1450,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  430,  430,  430, 1450, 1450, 1450,
     1450,  430, 1450, 1450, 1450, 1450,  430, 1450, 1450,  430,
      638,  638, 1450,  638,  638,  638,  638,  638,  638,  638,
     1450,  638,  638,  638,  638,  638,  638,  638, 1450,  638,
      437,  437,  437, 1450, 1450,  437, 1450,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437, 1450,  437,
      442,  442,  442, 1450, 1450,  442, 1450,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      446,  446,  446, 1450, 1450,  446,  446,  446, 1450,  446,

      446,  446,  446,  446,  446,  446,  446,  446, 1450,  446,
      451,  451,  451, 1450, 1450,  451, 1450,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451, 1450,  451,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
     1450,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      653,  653, 1450,  653,  653,  653,  653,  653,  653, 1450,
     1450,  653,  653,  653,  653,  653,  653,  653, 1450,  653,
      462,  462,  462, 1450,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      469, 1450, 1450, 1450, 1450, 1450, 1450,  469, 1450, 1450,

     1450, 1450,  469, 1450, 1450,  469,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470, 1450,  470,  480,  480, 1450, 1450,
     1450, 1450, 1450,  480, 1450, 1450, 1450, 1450,  480, 1450,
     1450,  480,  480,  490, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450,  490, 1450,  490, 1450, 1450,  490,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  503,
     1450,  503, 1450,  503,  503,  503,  503,  503,  503,  503,
     1450,  503, 1450,  503,  503, 1450,  503,  525,  525,  525,

     1450,  525,  525,  525,  525,  525,  525,  525, 1450,  525,
      525,  525,  525,  525,  525,  525,  525,  529,  529,  529,
     1450,  529,  529,  529,  529,  529,  529,  529, 1450,  529,
      529,  529,  529,  529, 1450,  529,  529,  547,  547,  547,
     1450,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547, 1450,  547, 1450,  547,  548,  548,  548,
     1450,  548,  548,  548,  548,  548,  548,  548,  548,  548,
     1450,  548,  548, 1450,  548, 1450,  548,  549, 1450,  549,
     1450,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549, 1450,  549, 1450,  549,  555, 1450,  555,

     1450,  555,  555,  555,  555,  555,  555,  555, 1450,  555,
      555,  555,  555,  555,  555,  555,  555,  560, 1450,  560,
     1450,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  724,  724,  724,
     1450,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724, 1450,  724,  726,  726,  726,
     1450,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  585, 1450, 1450,
      585, 1450,  585, 1450,  585,  585, 1450,  585, 1450,  585,
     1450, 1450,  585,  586,  586,  586, 1450,  586, 1450,  586,

      586,  586,  586,  586, 1450,  586, 1450,  586,  586, 1450,
      586, 1450,  586,  736,  736,  736, 1450,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  739,  739,  739, 1450,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  611,  611,  611, 1450,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  613,  613,  613, 1450,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  757,  757,  757, 1450,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757, 1450,  757,  416,  416,  416, 1450,  416,  416, 1450,
      416, 1450,  416,  416,  416,  416, 1450,  416,  416,  416,
      416,  416,  416,  626,  626,  626, 1450,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  627,  627,  627, 1450,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  629,  629,  629, 1450,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  630,  630,  630, 1450,  630,  630,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  420,  420,  420, 1450,  420,  420, 1450,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420, 1450,  420,  765,  765, 1450,  765,  765,  765,  765,
      765,  765,  765, 1450,  765,  765,  765,  765,  765,  765,
      765, 1450,  765,  430,  430,  430, 1450, 1450, 1450, 1450,
      430, 1450, 1450, 1450, 1450,  430, 1450, 1450,  430,  437,
      437,  437, 1450, 1450,  437, 1450,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437, 1450,  437,  442,
      442,  442, 1450, 1450,  442, 1450,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442,  446,
      446,  446, 1450, 1450,  446,  446,  446, 1450,  446,  446,
      446,  446,  446,  446,  446,  446,  446, 1450,  446,  451,
      451,  451, 1450, 1450,  451, 1450,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451, 1450,  451,  771,
      771, 1450,  771,  771,  771,  771,  771,  771, 1450, 1450,
      771,  771,  771,  771,  771,  771,  771, 1450,  771,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456, 1450,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  462,
      462,  462, 1450,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470, 1450,  470,  503,
     1450,  503, 1450,  503,  503,  503,  503,  503,  503,  503,
     1450,  503, 1450,  503,  503, 1450,  503,  525,  525,  525,
     1450,  525,  525,  525,  525,  525,  525,  525, 1450,  525,
      525,  525,  525,  525,  525,  525,  525,  529,  529,  529,
     1450,  529,  529,  529,  529,  529,  529,  529, 1450,  529,
      529,  529,  529,  529, 1450,  529,  529,  549, 1450,  549,
     1450,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549, 1450,  549, 1450,  549,  547,  547,  547,
     1450,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547, 1450,  547, 1450,  547,  555, 1450,  555,
     1450,  555,  555,  555,  555,  555,  555,  555, 1450,  555,
      555,  555,  555,  555,  555,  555,  555,  560, 1450,  560,
     1450,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  814,  814,  814,
     1450,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814, 1450,  814,  586,  586,  586,
     1450,  586, 1450,  586,  586,  586,  586,  586, 1450,  586,

     1450,  586,  586, 1450,  586, 1450,  586,  736,  736,  736,
     1450,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  818,  818,  818,
     1450,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  739,  739,  739,
     1450,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  611,  611,  611,
     1450,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  412, 1450, 1450,
      412, 1450, 1450, 1450,  412, 1450, 1450, 1450, 1450,  412,

     1450, 1450,  412,  842,  842,  842, 1450,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842, 1450,  842,  626,  626,  626, 1450,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  847,  847, 1450,  847,  847,  847,  847,
      847,  847,  847, 1450,  847,  847,  847,  847,  847,  847,
      847, 1450,  847,  849,  849, 1450,  849,  849,  849,  849,
      849,  849, 1450, 1450,  849,  849,  849,  849,  849,  849,
      849, 1450,  849,  883,  883,  883, 1450,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,

      883, 1450,  883,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  908,  908, 1450,  908,  908,  908,  908,
      908,  908,  908, 1450,  908,  908,  908,  908,  908,  908,
      908, 1450,  908,  910,  910, 1450,  910,  910,  910,  910,
      910,  910, 1450, 1450,  910,  910,  910,  910,  910,  910,
      910, 1450,  910,  962,  962, 1450,  962,  962,  962,  962,
      962,  962,  962, 1450,  962,  962,  962,  962,  962,  962,
      962, 1450,  962,  966,  966, 1450,  966,  966,  966,  966,
      966,  966, 1450, 1450,  966,  966,  966,  966,  966,  966,

      966, 1450,  966,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978, 1003, 1450, 1450, 1450, 1003, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1003, 1450, 1003, 1006,
     1006, 1450, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1450,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1450, 1006, 1009,
     1009, 1450, 1009, 1009, 1009, 1009, 1009, 1009, 1450, 1450,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1450, 1009, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1044,

     1044, 1450, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1450,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1450, 1044, 1047,
     1047, 1450, 1047, 1047, 1047, 1047, 1047, 1047, 1450, 1450,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1450, 1047, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1450, 1055, 1055, 1450, 1055, 1055, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1450, 1064, 1064, 1450, 1064, 1064, 1072,
     1072, 1450, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1450,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1450, 1072, 1075,

     1075, 1450, 1075, 1075, 1075, 1075, 1075, 1075, 1450, 1450,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1450, 1075, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1450, 1078, 1078, 1450, 1078, 1078, 1095,
     1095, 1450, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1450,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1450, 1095, 1098,
     1098, 1450, 1098, 1098, 1098, 1098, 1098, 1098, 1450, 1450,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1450, 1098, 1112,
     1112, 1450, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1450,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1450, 1112, 1115,

     1115, 1450, 1115, 1115, 1115, 1115, 1115, 1115, 1450, 1450,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1450, 1115, 1126,
     1126, 1450, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1450,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1450, 1126, 1129,
     1129, 1450, 1129, 1129, 1129, 1129, 1129, 1129, 1450, 1450,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1450, 1129, 1138,
     1138, 1450, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1450,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1450, 1138, 1141,
     1141, 1450, 1141, 1141, 1141, 1141, 1141, 1141, 1450, 1450,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1450, 1141, 1147,

     1147, 1450, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1450,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1450, 1147, 1150,
     1150, 1450, 1150, 1150, 1150, 1150, 1150, 1150, 1450, 1450,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1450, 1150, 1153,
     1153, 1450, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1450,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1450, 1153, 1156,
     1156, 1450, 1156, 1156, 1156, 1156, 1156, 1156, 1450, 1450,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1450, 1156, 1159,
     1159, 1450, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1450,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1450, 1159, 1162,

     1162, 1450, 1162, 1162, 1162, 1162, 1162, 1162, 1450, 1450,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1450, 1162, 1165,
     1165, 1450, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1450,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1450, 1165,   81,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450
    } ;

static yyconst flex_int16_t yy_chk[7805] =
    {   0,
        0,    1,  800,    1,    1,    2,    0,    2,    2,    3,
        0,    3,    3,  800,   86,   95,  104,    1,   86,   95,
      104,    2,  193,  118,  130,    3,    1,  118,  130,  137,
        2,  153,  153,  137,    3,   97,   97,   97,   97,  147,
      162,  193,  496,  147,  162,   97,   97,   97,   97,   97,
      109,  110,  109,  121,  496,  121,  199,    0,  110,  110,
      150,  150,  150,    1,  168,  199,  174,    2,  168,  150,
      174,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    9, 1373,    9,    9,  205,    9,
      206,  206,   10,    9,   10,   10,   37,   10,   37,   37,
        9,   10,   11, 1355,   11,   11,  181,   11,   10,    9,
      181,  205,   37,   23,  218,   23,   23,   10,   11,  218,

       12,   37,   12,   12,   23,   12,  274,   11,  194,   23,
      151,  151,  151,  190,  274,   11,   12,  190,   23,  151,
      152,  152,  152,  195,  152,   12,    9,  194,  197,  152,
      196,  198,  214,   12,   10,  209,  224,  196,   37,  151,
      224,  196,  195,  204,   11,  209,  214,  197,  197,  196,
      198,  228,  228,  204,  234,   23,  239,  204,  234,  280,
      280,  239,   12,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15, 1165,   15,
       15,   16,   15,   16,   16,  666,   16,   17,  256,   17,
       17,  399,   17,   15,  243,  208,  208,   16,  243,  256,
      399,  251,   15,   17,  208,  251,   16,  265,  666,  285,
       15,  265,   17,   18,   16,   18,   18,   19,   18,   19,
       19,   20,  256,   20,   20,  285,   19,  208,  279,   18,
       20,  273,  279,   19,  472,  273,  289,   20,   18,   15,
      289,  482,   19,   16,  472,  288,   20,  290,  256,   17,

       19,  482,  273,   21,   20,   21,   21,   22,   21,   22,
       22,  288,   22,  290,  522,  154,  154,  154,   39,   21,
       39,   39,  290,   22,  154,   18,  315,  315,   21,   19,
      276,  276,   22,   20,   39,   24,   21,   24,   24,   25,
       22,   25,   25,   39,   25,  298,   24,  257,  522,  298,
       29,   24,   29,   29,   26,   25,   26,   26,  257,   26,
       24,  276,  257,   25,   25,   21,   29,  351,  351,   22,
       26,  154,  292,  304,  522,   29,  473,  304,   26,   26,
       39,  257,  291,   29,  155,  155,  155,  311,  292,  291,
      473,  311,  547,  155,  291,  322,  291,   24,  492,  322,

      333,   25,  155,  492,  333,  341,  349,  257,  547,  341,
      349,  361,   29,  155, 1163,  361,   26,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   30,  370,   30,   30,  488,  370,   38,   38,   38,
       38,  281,  378,   38,  372,  372,  378,   30,  403,  488,

      386,  388,  281,   38,  386,  462,   30,  403,  388,  801,
      413,  392,   38,  421,   30,  388,  392,  392,  392,  413,
      421,  392,  422,  392,  462,  281,  418,  418,  426,  392,
      392,  392,  495,  422,  501,  801,  426,  426,  490,  501,
      495,  421, 1162,   30,   31,   31,   31,   31,   31,   38,
      422,  281,  490,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   40,  505,   40,   40,   41,  505,
       41,   41,   42, 1159,   42,   42,  428,  428,  428,   45,
       40,   45,   45,  464,   41,  428,  587,  535,   42,   40,
      464,   45,  467,   41,  587,   45,   46,   42,   46,   46,
     1157,  467,  464,   51,   45,   51,   51,   52,   46,   52,
       52,  405,   46,  469,  405,  430,  430,  430,  535,   51,
      405,   46,  469,   52,  430,  532,   40, 1156,   51,   51,
       41, 1153,   52,   52,   42,   43,   51,   43,   43,  556,
       52,   45,  532,  553,  556,  553,  626,   43,  595,  405,
       53,   43,   53,   53,  435,  435,  435,  595,   46,  405,

       43,   43,   53,  435, 1151,   51,   53,  465,   43,   52,
       43, 1150,  282,  415,  626,   53,  415,   54,  465,   54,
       54,  544,  415,  282,  578,  578,  465,  282,   55,   54,
       55,   55,   56,   54,   56,   56,   43,   43,   44,   44,
       44,   44,   54,  539,   55, 1147,  282,  435,   56, 1143,
       44,  415,   53,   55,   44,  544,  588,   56,  431,  431,
      431,  415,  431,   44,   44,  477,  477,  431,  588,  597,
      539,   44,  282,   44,  396,  396,  396,  396,  597,   54,
     1142,  544,  477,  686,  396,  396,  396,  396,  396,  624,
       55,  596,  596,  686,   56, 1141,  539,  624,  624,   44,

       44,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   49, 1138,   49,   49,  629,
       63,  687,   63,   63, 1131,   63,   69,   49,   69,   69,
       64,   49,   64,   64,  631,   64,   63,  687,  628, 1130,
       49,   49,   69,  480,  480,   63,   64,  629,   49,  628,

       49,   69,  480,   63,  659,   64,  636, 1129,   65,   69,
       65,   65,  631,   64,  636,  636,  628,   65,   70,  806,
       70,   70,  662,  659,   65,  480,   49,   49,   50,   50,
       50,   50,   63,   65,   70,  679,  662,  660,   69,  658,
       50,   65,   64,   70,   50,  806,  436,  436,  436, 1126,
      658,   70,  711,   50,   50,  436,  660,  715,  658,  419,
      679,   50,  715,   50,  419,  419,  419,  831,  711,  419,
       65,  419,  637,  637,  637,  436,  831,  419,  419,  419,
       70,  637,  665,  665,  665,  736,  736,  679, 1119,   50,
       50,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   61,
      779, 1118,  423,  738,  738,  738, 1117,  423,  423,  423,
      779, 1116,  423,  959,  423,   61,   61,   61,   61,   61,
      423,  423,  423,  738,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   66,  440,   66,
       66,  760,  828,  440,  440,  440,   66,  780,  440,  774,
      440,  738,  959,   66,  445, 1115,  440,  440,  440,  445,
      445,  445,   66,  780,  445,  838,  445, 1112,  774,  760,

       66,  449,  445,  445,  445, 1105,  449,  449,  449,  727,
     1104,  449, 1103,  449,  759,  828,  763,  727,  727,  449,
      449,  449,  759,  759,  763,  763,  792,  792,  792,   66,
       67,   67,   67,   67,   67,  696,  889,  889,  838,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   71,  518,   71,   71,  886,   71, 1102,  696,
      896,   71,   71,   71,  518,  886,  890,   73,   71,   73,
       73,  743,   73, 1101,  743,  890,   73,   71,   71, 1100,
      743,  753,  519,   73,  753,  696,   74,  518,   74,   74,

      753,   74,   73,  519,  805,   74, 1099,  640,  640,  640,
       73,  540,   74,  896, 1098,  805,  640,  948,  948,  706,
     1095,   74,  540,  518,   71,   72,  519,   72,   72,   74,
       72,  764,  764,  764,   72,   72,   72,  454, 1087,   73,
      764,   72,  454,  454,  454,  540,  640,  454, 1086,  454,
       72,   72,  519,  706,  461,  454,  454,  454,   74,  461,
      461,  461,  936, 1085,  461, 1084,  461,  755,  899,  541,
      755,  540,  461,  461,  461,  695,  755,  899,  936,  706,
      541,  840,  705, 1083,  840, 1082,  695,   72,   75,   75,
      840,   75,   75,  705,   75,   75,   75,  841,   75,  901,

      841,   75,   75,  541, 1081,   75,  841,  755,  901,  695,
       75,   75,   75,   75,   75,   75,  705,  854,  854,  854,
      507,   75,   75,   75,   75,  507,  507,  507,  754,  541,
      507,  754,  507, 1475, 1080,  695, 1475,  754,  507,  507,
      507, 1079,  705,  740,  740,  740, 1077, 1076,   75,   75,
       75,   75,   76,   76, 1476,   76,   76, 1476,   76,   76,
       76,  955,   76,  740,  816,   76,   76, 1075, 1072,   76,
      955,  754,  816,  816,   76,   76,   76,   76,   76,   76,
      863,  863,  863,  996,  528,   76,   76,   76,   76,  528,
      528,  528,  996, 1070,  528, 1063,  528,  766,  766,  766,

     1062,  740,  528,  528,  528, 1061,  766,  862,  862,  862,
     1060, 1059,   76,   76,   76,   76,   79,  559,   79,   79,
       79, 1058,  559,  559,  559, 1033,  902,  559,   79,  559,
      902, 1057,   79,  563, 1033,  559,  559,  559,  563,  563,
      563,   79,   79,  563, 1056,  563, 1054,  902,  766,   79,
      589,  563,  563,  563, 1053,  589,  589,  589,  756, 1052,
      589,  756,  589, 1477, 1051,  862, 1477,  756,  589,  589,
      589, 1049,  820,  820,  820,  804,  804, 1048,   79,   80,
      804,   80,   80,   80,  804,  804, 1047,  839, 1044,  804,
      839,   80,  820,  804,  804,   80,  839, 1042,  756,  846,

      846,  846, 1032, 1498,   80,   80, 1498, 1031,  846,  865,
      865,  865,   80,  881,  881,  881,  907,  907,  907,  915,
      915,  915,  924,  924,  924,  907, 1508,  839, 1030, 1508,
      820,  926,  926,  926,  943,  943,  943,  979,  979,  979,
     1029,   80,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,  253,  954,  957, 1028,
      954, 1509,  957,  253, 1509, 1027,  954, 1026,  253,  253,
      253,  960, 1510,  253,  960, 1510, 1025,  253,  253,  957,
      960, 1024,  253, 1012, 1012, 1012,  253,  253,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  398,  961,  961,  961,  819,  819,  819, 1023,
     1021,  398,  961, 1005, 1005, 1005,  819, 1020,  398,  398,
      398,  398, 1005,  912,  912,  912,  819, 1019,  398,  398,
      398,  398,  398,  466,  466,  821,  821,  821,  466,  466,
      466, 1512, 1018,  466, 1512,  466, 1017,  822,  822,  822,
     1016,  466,  466,  466,  474,  821,  474, 1517, 1015, 1014,
     1517,  474,  474,  474,  819, 1013,  474,  822,  474, 1011,
      891,  891,  891, 1010,  474,  474,  474,  508,  508,  508,
      508,  912,  508, 1043, 1043, 1043,  508,  508, 1009, 1008,
      891,  508, 1043,  821, 1006,  508,  508,  533, 1004,  848,

      848,  848,  533,  533,  533,  822,  997,  533,  848,  533,
     1071, 1071, 1071,  995,  994,  533,  533,  533,  993, 1071,
     1094, 1094, 1094, 1111, 1111, 1111,  533,  552,  891, 1094,
      992,  552, 1111, 1125, 1125, 1125,  552,  552,  552,  991,
      990,  552, 1125,  552,  989, 1518,  988,  848, 1518,  552,
      552,  552,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  887,  887,  887,  987,  830,  830,
      830,  830,  830,  830,  887,  888,  888,  888,  986,  830,
      830,  830,  830, 1521,  887,  888, 1521,  985,  984,  983,
      892,  892,  892,  982,  981,  888,  893,  893,  893,  980,
      978,  950,  950,  950,  977,  976,  830,  830,  830,  830,
      892,  909,  909,  909,  975,  909,  893,  946,  946,  946,
      909,  950,  887,  974,  947,  947,  947,  946,  973,  951,

      951,  951, 1542,  888,  947, 1542,  972,  946,  952,  952,
      952,  963,  963,  963,  947,  963,  971,  970,  892,  951,
      963,  998,  998,  998,  893, 1074, 1074, 1074,  952,  950,
      969,  998,  968,  999,  999,  999, 1000, 1000, 1000,  909,
      967,  998,  966,  999,  964,  946,  962, 1001, 1001, 1001,
      953, 1552,  947,  999, 1552,  945, 1000,  951, 1002, 1002,
     1002, 1007, 1007, 1007,  944, 1007,  952, 1001, 1553,  963,
     1007, 1553, 1036, 1036, 1036, 1037, 1037, 1037, 1002,  998,
      942, 1554, 1036, 1074, 1554, 1037, 1038, 1038, 1038,  941,
     1555,  999, 1036, 1555, 1000, 1037,  940, 1039, 1039, 1039,

     1040, 1040, 1040,  939, 1562, 1001, 1038, 1562,  938, 1045,
     1045, 1045, 1565, 1045,  937, 1565, 1002, 1039, 1045, 1007,
     1040, 1046, 1046, 1046,  935, 1046, 1065, 1065, 1065, 1590,
     1036, 1596, 1590, 1037, 1596,  934, 1065, 1066, 1066, 1066,
     1067, 1067, 1067,  933, 1038,  932, 1065, 1066, 1068, 1068,
     1068, 1069, 1069, 1069,  931, 1039, 1614, 1066, 1040, 1614,
     1067, 1073, 1073, 1073,  930, 1073,  929, 1045, 1068,  928,
     1073, 1069, 1088, 1088, 1088,  927, 1089, 1089, 1089, 1046,
      923,  922, 1088,  921, 1065,  920, 1089, 1090, 1090, 1090,
      919,  918, 1088,  917,  916, 1066, 1089,  914, 1067,  913,

     1091, 1091, 1091, 1092, 1092, 1092, 1068, 1090,  911, 1069,
      910,  908, 1096, 1096, 1096,  906, 1096,  905,  904, 1073,
     1091, 1096,  903, 1092, 1097, 1097, 1097, 1106, 1106, 1106,
     1088, 1107, 1107, 1107, 1089,  897,  895, 1106, 1114, 1114,
     1114, 1107, 1108, 1108, 1108, 1090,  894, 1106, 1109, 1109,
     1109, 1107, 1110, 1110, 1110, 1113, 1113, 1113, 1091, 1113,
      885, 1092, 1108,  884, 1113, 1128, 1128, 1128, 1109,  883,
     1096,  882, 1110, 1120, 1120, 1120,  880, 1121, 1121, 1121,
      879,  878, 1097, 1120,  877, 1106,  876, 1121,  875, 1107,
     1127, 1127, 1127, 1120, 1127,  874, 1114, 1121,  873, 1127,

     1108, 1122, 1122, 1122,  872,  871, 1109, 1123, 1123, 1123,
     1110,  870,  869, 1113, 1124, 1124, 1124,  868, 1132, 1132,
     1132, 1122,  867, 1128, 1134, 1134, 1134, 1123, 1132,  866,
      864, 1120,  861,  860, 1124, 1121,  859,  858, 1132,  857,
     1133, 1133, 1133,  856, 1134, 1140, 1140, 1140, 1127,  855,
     1133, 1135, 1135, 1135, 1136, 1136, 1136,  853,  852, 1122,
     1133, 1137, 1137, 1137,  851, 1123, 1146, 1146, 1146,  850,
     1137, 1135, 1124,  849, 1136, 1146, 1132, 1139, 1139, 1139,
      847, 1139, 1134, 1149, 1149, 1149, 1139, 1144, 1144, 1144,
     1145, 1145, 1145, 1152, 1152, 1152,  845, 1144, 1133,  843,

     1145,  842, 1152, 1140, 1148, 1148, 1148, 1144, 1148, 1135,
     1145,  836, 1136, 1148, 1154, 1154, 1154,  835, 1154, 1155,
     1155, 1155,  834, 1154, 1158, 1158, 1158, 1160, 1160, 1160,
      833, 1160,  832, 1158,  829, 1139, 1160, 1161, 1161, 1161,
      825, 1149, 1164, 1164, 1164, 1144,  824,  818, 1145,  817,
      814, 1164, 1166, 1166, 1166,  813, 1166, 1167, 1167, 1167,
      811, 1166, 1148,  810, 1169, 1169, 1169, 1170, 1170, 1170,
      808, 1170, 1154, 1169,  807,  803, 1170, 1155, 1171, 1171,
     1171, 1172, 1172, 1172,  802, 1160,  799, 1173, 1173, 1173,
     1172, 1173, 1174, 1174, 1174, 1161, 1173, 1175, 1175, 1175,

     1176, 1176, 1176,  798, 1176,  797, 1175,  796,  795, 1176,
     1166, 1177, 1177, 1177,  794, 1167,  793, 1178, 1178, 1178,
     1179, 1179, 1179,  791, 1179, 1170, 1178,  790,  789, 1179,
     1180, 1180, 1180, 1181, 1181, 1181, 1171, 1182, 1182, 1182,
      788, 1182, 1181,  787,  786, 1173, 1182, 1183, 1183, 1183,
     1174, 1184, 1184, 1184,  785, 1185, 1185, 1185, 1176, 1185,
     1184, 1186, 1186, 1186, 1185, 1187, 1187, 1187,  784, 1177,
      783, 1188, 1188, 1188, 1187, 1188,  781,  778, 1179,  775,
     1188, 1189, 1189, 1189, 1190, 1190, 1190,  772, 1180,  771,
     1191, 1191, 1191, 1190, 1191, 1182, 1192, 1192, 1192, 1191,

     1193, 1193, 1193,  765,  757, 1183, 1194, 1194, 1194, 1193,
     1194,  751,  750, 1185,  749, 1194, 1195, 1195, 1195, 1186,
      748, 1196, 1196, 1196, 1197, 1197, 1197,  747, 1197, 1188,
     1196,  746,  745, 1197, 1198, 1198, 1198,  742,  741, 1189,
     1199, 1199, 1199, 1200, 1200, 1200,  739, 1200, 1191, 1199,
      737,  734, 1200,  730, 1192, 1201, 1201, 1201, 1202, 1202,
     1202, 1203, 1203, 1203, 1194, 1203,  728, 1202,  726,  724,
     1203, 1204, 1204, 1204, 1195, 1205, 1205, 1205,  722, 1206,
     1206, 1206, 1197, 1206, 1205, 1207, 1207, 1207, 1206, 1208,
     1208, 1208, 1198, 1209, 1209, 1209,  719, 1209, 1208,  714,

      713, 1200, 1209, 1210, 1210, 1210, 1211, 1211, 1211, 1213,
     1213, 1213,  709, 1201,  708, 1211, 1212, 1212, 1212, 1203,
     1212, 1214, 1214, 1214,  707, 1212, 1216, 1216, 1216, 1204,
     1214, 1215, 1215, 1215,  703, 1215,  702, 1206,  701,  698,
     1215,  697,  694, 1207, 1217, 1217, 1217,  693, 1218, 1218,
     1218, 1209, 1218, 1217, 1219, 1219, 1219, 1218, 1222, 1222,
     1222, 1210, 1220, 1220, 1220,  692,  691, 1213, 1221, 1221,
     1221, 1220, 1221,  690, 1212,  689,  688, 1221, 1223, 1223,
     1223, 1224, 1224, 1224, 1216, 1224,  685, 1223,  684, 1215,
     1224, 1225, 1225, 1225, 1226, 1226, 1226,  683, 1227, 1227,

     1227,  682, 1227, 1226,  681,  680, 1218, 1227, 1228, 1228,
     1228,  678, 1219, 1229, 1229, 1229, 1222,  677,  676, 1230,
     1230, 1230, 1229, 1230,  674,  671, 1221,  669, 1230, 1231,
     1231, 1231, 1232, 1232, 1232,  668, 1233, 1233, 1233, 1224,
     1233, 1232, 1234, 1234, 1234, 1233, 1235, 1235, 1235, 1225,
     1236, 1236, 1236,  664, 1236, 1235, 1227,  663,  655, 1236,
     1237, 1237, 1237, 1238, 1238, 1238, 1228, 1239, 1239, 1239,
      654, 1239, 1238, 1240, 1240, 1240, 1239, 1230,  653, 1241,
     1241, 1241, 1242, 1242, 1242,  650, 1242, 1231, 1241,  647,
      644, 1242,  641,  638, 1233, 1243, 1243, 1243,  635,  634,

     1234, 1244, 1244, 1244,  623, 1245, 1245, 1245, 1236, 1245,
     1244, 1246, 1246, 1246, 1245, 1247, 1247, 1247, 1237, 1248,
     1248, 1248,  621, 1248, 1247, 1239,  620,  619, 1248,  617,
      616, 1240, 1249, 1249, 1249, 1250, 1250, 1250,  615,  612,
     1242, 1251, 1251, 1251, 1250, 1251, 1252, 1252, 1252,  610,
     1251,  609,  608, 1243,  607, 1253, 1253, 1253, 1254, 1254,
     1254,  606, 1254, 1245, 1253,  605,  603, 1254,  602, 1246,
     1255, 1255, 1255, 1256, 1256, 1256,  601, 1248,  600, 1257,
     1257, 1257, 1256, 1257, 1258, 1258, 1258,  599, 1257,  598,
     1249, 1259, 1259, 1259, 1260, 1260, 1260,  592, 1260, 1251,

     1259,  591,  590, 1260, 1252, 1261, 1261, 1261, 1262, 1262,
     1262, 1263, 1263, 1263,  584, 1263, 1254, 1262,  581,  580,
     1263, 1264, 1264, 1264, 1265, 1265, 1265,  579, 1255,  577,
     1266, 1266, 1266, 1265, 1266,  576,  572, 1257,  571, 1266,
      567,  566, 1258, 1267, 1267, 1267, 1268, 1268, 1268, 1269,
     1269, 1269, 1260, 1269,  562, 1268,  561,  558, 1269, 1270,
     1270, 1270,  557, 1261, 1271, 1271, 1271,  554,  551, 1263,
     1273, 1273, 1273, 1271, 1272, 1272, 1272,  550, 1272, 1264,
     1274, 1274, 1274, 1272, 1276, 1276, 1276,  546, 1266, 1274,
     1275, 1275, 1275,  545, 1275, 1277, 1277, 1277,  543, 1275,

      542, 1267,  538,  537, 1277,  530,  529, 1269,  527, 1278,
     1278, 1278,  524, 1278, 1279, 1279, 1279, 1270, 1278,  523,
     1280, 1280, 1280, 1282, 1282, 1282,  521,  520, 1273, 1280,
      517,  516, 1272,  515, 1281, 1281, 1281,  514, 1281, 1285,
     1285, 1285, 1276, 1281, 1283, 1283, 1283,  513, 1275,  512,
     1284, 1284, 1284, 1283, 1284, 1286, 1286, 1286,  511, 1284,
      510, 1287, 1287, 1287, 1286, 1287,  509, 1278,  506,  499,
     1287,  494, 1279, 1288, 1288, 1288, 1289, 1289, 1289,  493,
      489, 1282, 1290, 1290, 1290, 1289, 1290, 1291, 1291, 1291,
      487, 1290, 1281, 1292, 1292, 1292,  486, 1285, 1294, 1294,

     1294,  485, 1292, 1293, 1293, 1293,  484, 1293, 1284, 1295,
     1295, 1295, 1293, 1296, 1296, 1296,  483, 1296, 1295, 1287,
      481,  476, 1296, 1297, 1297, 1297, 1298, 1298, 1298,  470,
      460, 1288, 1299, 1299, 1299, 1298, 1299, 1300, 1300, 1300,
     1290, 1299, 1301, 1301, 1301, 1291, 1302, 1302, 1302,  459,
     1302, 1301, 1303, 1303, 1303, 1302, 1294, 1304, 1304, 1304,
      458, 1293,  457, 1305, 1305, 1305, 1304, 1305, 1306, 1306,
     1306, 1296, 1305, 1307, 1307, 1307, 1308, 1308, 1308,  453,
     1308, 1297, 1307,  452,  448, 1308, 1309, 1309, 1309,  447,
     1299, 1310, 1310, 1310,  444, 1300,  443, 1311, 1311, 1311,

     1310, 1311,  439,  438, 1302,  434, 1311, 1312, 1312, 1312,
     1303, 1313, 1313, 1313, 1314, 1314, 1314,  432, 1314,  425,
     1313, 1305,  417, 1314,  414,  411, 1306, 1315, 1315, 1315,
     1316, 1316, 1316,  410, 1308,  409, 1317, 1317, 1317, 1316,
     1317, 1318, 1318, 1318, 1309, 1317,  408, 1319, 1319, 1319,
     1320, 1320, 1320,  407, 1320, 1311, 1319,  406,  404, 1320,
     1321, 1321, 1321,  402,  401, 1312, 1322, 1322, 1322, 1323,
     1323, 1323, 1314, 1323,  391, 1322,  390,  387, 1323, 1324,
     1324, 1324, 1325, 1325, 1325, 1315, 1326, 1326, 1326,  379,
     1326, 1325,  371,  362, 1317, 1326, 1327, 1327, 1327, 1318,

     1328, 1328, 1328, 1329, 1329, 1329,  358, 1329, 1320, 1328,
      350,  342, 1329, 1330, 1330, 1330,  334,  325, 1321, 1331,
     1331, 1331, 1332, 1332, 1332,  323, 1332, 1323, 1331,  316,
      312, 1332, 1333, 1333, 1333,  305,  299, 1324, 1334, 1334,
     1334, 1335, 1335, 1335, 1326, 1335,  297, 1334,  284,  283,
     1335, 1336, 1336, 1336, 1327, 1337, 1337, 1337, 1338, 1338,
     1338, 1329, 1338,  278, 1337,  277,  272, 1338, 1339, 1339,
     1339, 1330, 1340, 1340, 1340, 1341, 1341, 1341,  271, 1341,
     1332, 1340,  269,  268, 1341, 1342, 1342, 1342,  266,  264,
     1333, 1343, 1343, 1343, 1344, 1344, 1344,  259, 1344, 1335,

     1343,  258,  252, 1344, 1345, 1345, 1345,  250,  244, 1336,
     1346, 1346, 1346, 1347, 1347, 1347, 1338, 1347,  235, 1346,
      225,  222, 1347, 1348, 1348, 1348, 1339, 1349, 1349, 1349,
     1350, 1350, 1350, 1341, 1350,  215, 1349,  213,  212, 1350,
     1351, 1351, 1351, 1342, 1352, 1352, 1352, 1353, 1353, 1353,
      211, 1353, 1344, 1352,  210,  207, 1353, 1354, 1354, 1354,
      203,  201, 1345, 1356, 1356, 1356,  200, 1356, 1357, 1357,
     1357, 1347, 1356, 1358, 1358, 1358,  191, 1358, 1359, 1359,
     1359, 1348, 1358, 1360, 1360, 1360,  189, 1360, 1350, 1361,
     1361, 1361, 1360, 1362, 1362, 1362,  182, 1362, 1351, 1363,

     1363, 1363, 1362,  175,  169, 1353,  163, 1364, 1364, 1364,
      149, 1364, 1365, 1365, 1365, 1354, 1364,  148, 1366, 1366,
     1366, 1356, 1366, 1367, 1367, 1367, 1357, 1366, 1368, 1368,
     1368, 1358, 1369, 1369, 1369,  146, 1359, 1370, 1370, 1370,
      138, 1360, 1371, 1371, 1371,  131,  129, 1361, 1372, 1372,
     1372, 1362, 1374, 1374, 1374,  122,  119, 1363, 1375, 1375,
     1375, 1376, 1376, 1376,  112, 1364, 1377, 1377, 1377,  111,
     1365, 1378, 1378, 1378,  108,  107, 1366, 1379, 1379, 1379,
      105, 1367, 1380, 1380, 1380,   96, 1368, 1381, 1381, 1381,
     1369, 1382, 1382, 1382,   87, 1370, 1383, 1383, 1383,   81,

     1371, 1384, 1384, 1384,    0,    0, 1372, 1385, 1385, 1385,
     1374, 1386, 1386, 1386,    0,    0, 1375,    0,    0, 1376,
     1387, 1387, 1387,    0, 1377, 1388, 1388, 1388,    0, 1378,
     1389, 1389, 1389,    0,    0, 1379, 1390, 1390, 1390,    0,
     1380, 1391, 1391, 1391,    0, 1381, 1392, 1392, 1392, 1382,
     1393, 1393, 1393,    0, 1383, 1394, 1394, 1394,    0, 1384,
     1395, 1395, 1395,    0,    0, 1385, 1396, 1396, 1396, 1386,
     1397, 1397, 1397, 1398, 1398, 1398,    0,    0, 1387, 1399,
     1399, 1399,    0, 1388, 1400, 1400, 1400,    0, 1389, 1401,
     1401, 1401,    0,    0, 1390, 1402, 1402, 1402,    0, 1391,

     1403, 1403, 1403,    0, 1392, 1404, 1404, 1404, 1393, 1405,
     1405, 1405,    0, 1394, 1406, 1406, 1406,    0, 1395, 1407,
     1407, 1407,    0,    0, 1396, 1408, 1408, 1408, 1397,    0,
        0, 1398, 1409, 1409, 1409,    0,    0, 1399, 1410, 1410,
     1410,    0, 1400, 1411, 1411, 1411,    0, 1401, 1412, 1412,
     1412,    0,    0, 1402, 1413, 1413, 1413,    0, 1403, 1414,
     1414, 1414,    0, 1404, 1415, 1415, 1415, 1405, 1416, 1416,
     1416,    0, 1406, 1417, 1417, 1417,    0, 1407, 1418, 1418,
     1418,    0,    0, 1408, 1419, 1419, 1419, 1420, 1420, 1420,
     1409, 1421, 1421, 1421,    0,    0, 1410, 1422, 1422, 1422,

        0, 1411, 1423, 1423, 1423,    0, 1412, 1424, 1424, 1424,
        0,    0, 1413, 1425, 1425, 1425,    0, 1414, 1426, 1426,
     1426,    0, 1415, 1427, 1427, 1427, 1416, 1428, 1428, 1428,
        0, 1417, 1429, 1429, 1429,    0, 1418, 1430, 1430, 1430,
        0,    0, 1419,    0,    0, 1420, 1431, 1431, 1431, 1421,
     1432, 1432, 1432,    0,    0, 1422, 1433, 1433, 1433,    0,
     1423, 1434, 1434, 1434,    0, 1424, 1435, 1435, 1435,    0,
        0, 1425, 1436, 1436, 1436,    0, 1426, 1437, 1437, 1437,
        0, 1427, 1438, 1438, 1438, 1428, 1439, 1439, 1439,    0,
     1429, 1440, 1440, 1440,    0, 1430, 1441, 1441, 1441, 1442,

     1442, 1442,    0,    0, 1431, 1443, 1443, 1443, 1432, 1444,
     1444, 1444,    0,    0, 1433, 1445, 1445, 1445,    0, 1434,
     1446, 1446, 1446,    0, 1435, 1447, 1447, 1447,    0,    0,
     1436, 1448, 1448, 1448,    0, 1437, 1449, 1449, 1449,    0,
     1438,    0,    0,    0, 1439,    0,    0,    0,    0, 1440,
        0,    0,    0,    0, 1441,    0,    0, 1442,    0,    0,
        0,    0,    0, 1443,    0,    0,    0, 1444,    0,    0,
        0,    0,    0, 1445,    0,    0,    0,    0, 1446,    0,
        0,    0,    0, 1447,    0,    0,    0,    0,    0, 1448,
        0,    0,    0,    0, 1449, 1451, 1451, 1451, 1451, 1451,

     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456,

     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461,

     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466,

     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,

     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1478, 1478, 1478,    0, 1478,
     1478,    0, 1478,    0, 1478, 1478, 1478, 1478,    0, 1478,
     1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479,    0, 1479,

     1479, 1479, 1479,    0, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480,    0, 1480,
     1480,    0, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480,    0, 1480, 1481, 1481, 1481,    0, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482,    0, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483,    0,    0,
        0,    0, 1483,    0,    0,    0,    0, 1483,    0,    0,
     1483, 1484, 1484, 1484,    0,    0, 1484,    0, 1484, 1484,

     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,    0,
     1484, 1485, 1485, 1485,    0, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1486, 1486, 1486,    0,    0, 1486,    0, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1487, 1487, 1487,    0,    0, 1487, 1487, 1487,    0,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,    0,
     1487, 1488, 1488, 1488,    0, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1489, 1489, 1489,    0,    0, 1489,    0, 1489, 1489,

     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,    0,
     1489, 1490, 1490, 1490,    0, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491,    0, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1492, 1492,    0, 1492, 1492, 1492, 1492, 1492, 1492,
        0,    0, 1492, 1492, 1492, 1492, 1492, 1492, 1492,    0,
     1492, 1493, 1493, 1493,    0, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1494,    0,    0,    0,    0,    0,    0, 1494,    0,

        0,    0,    0, 1494,    0,    0, 1494, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1495,    0, 1495, 1496, 1496,    0,
        0,    0,    0,    0, 1496,    0,    0,    0,    0, 1496,
        0,    0, 1496, 1496, 1497,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1497,    0, 1497,    0,    0, 1497,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1500,    0, 1500,    0, 1500, 1500, 1500, 1500, 1500, 1500,
     1500,    0, 1500,    0, 1500, 1500,    0, 1500, 1501, 1501,

     1501,    0, 1501, 1501, 1501, 1501, 1501, 1501, 1501,    0,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502,
     1502,    0, 1502, 1502, 1502, 1502, 1502, 1502, 1502,    0,
     1502, 1502, 1502, 1502, 1502,    0, 1502, 1502, 1503, 1503,
     1503,    0, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503,    0, 1503,    0, 1503, 1504, 1504,
     1504,    0, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504,    0, 1504, 1504,    0, 1504,    0, 1504, 1505,    0,
     1505,    0, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505,    0, 1505,    0, 1505, 1506,    0,

     1506,    0, 1506, 1506, 1506, 1506, 1506, 1506, 1506,    0,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1507,    0,
     1507,    0, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1511, 1511,
     1511,    0, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1513, 1513,
     1513,    0, 1513, 1513, 1513, 1513,    0, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1515,    0,

        0, 1515,    0, 1515,    0, 1515, 1515,    0, 1515,    0,
     1515,    0,    0, 1515, 1516, 1516, 1516,    0, 1516,    0,
     1516, 1516, 1516, 1516, 1516,    0, 1516,    0, 1516, 1516,
        0, 1516,    0, 1516, 1519, 1519, 1519,    0, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1520, 1520, 1520,    0, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1522, 1522, 1522,    0, 1522, 1522,
        0, 1522,    0, 1522, 1522, 1522, 1522,    0, 1522, 1522,
     1522, 1522, 1522, 1522, 1523, 1523, 1523,    0, 1523, 1523,

     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523,    0, 1523, 1524, 1524, 1524,    0, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1525, 1525, 1525,    0, 1525, 1525,
        0, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1525,    0, 1525, 1526, 1526, 1526,    0, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1527, 1527, 1527,    0, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1528, 1528, 1528,    0, 1528, 1528,

     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1529, 1529, 1529,    0,    0,    0,
        0, 1529,    0,    0,    0,    0, 1529,    0,    0, 1529,
     1530, 1530,    0, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
        0, 1530, 1530, 1530, 1530, 1530, 1530, 1530,    0, 1530,
     1531, 1531, 1531,    0,    0, 1531,    0, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,    0, 1531,
     1532, 1532, 1532,    0,    0, 1532,    0, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
     1533, 1533, 1533,    0,    0, 1533, 1533, 1533,    0, 1533,

     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,    0, 1533,
     1534, 1534, 1534,    0,    0, 1534,    0, 1534, 1534, 1534,
     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534,    0, 1534,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
        0, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1536, 1536,    0, 1536, 1536, 1536, 1536, 1536, 1536,    0,
        0, 1536, 1536, 1536, 1536, 1536, 1536, 1536,    0, 1536,
     1537, 1537, 1537,    0, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1538,    0,    0,    0,    0,    0,    0, 1538,    0,    0,

        0,    0, 1538,    0,    0, 1538, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539,    0, 1539, 1540, 1540,    0,    0,
        0,    0,    0, 1540,    0,    0,    0,    0, 1540,    0,
        0, 1540, 1540, 1541,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1541,    0, 1541,    0,    0, 1541, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544,
        0, 1544,    0, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
        0, 1544,    0, 1544, 1544,    0, 1544, 1545, 1545, 1545,

        0, 1545, 1545, 1545, 1545, 1545, 1545, 1545,    0, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546, 1546, 1546,
        0, 1546, 1546, 1546, 1546, 1546, 1546, 1546,    0, 1546,
     1546, 1546, 1546, 1546,    0, 1546, 1546, 1547, 1547, 1547,
        0, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547,    0, 1547,    0, 1547, 1548, 1548, 1548,
        0, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
        0, 1548, 1548,    0, 1548,    0, 1548, 1549,    0, 1549,
        0, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1549,    0, 1549,    0, 1549, 1550,    0, 1550,

        0, 1550, 1550, 1550, 1550, 1550, 1550, 1550,    0, 1550,
     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1551,    0, 1551,
        0, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1556, 1556, 1556,
        0, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556,    0, 1556, 1557, 1557, 1557,
        0, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1558,    0,    0,
     1558,    0, 1558,    0, 1558, 1558,    0, 1558,    0, 1558,
        0,    0, 1558, 1559, 1559, 1559,    0, 1559,    0, 1559,

     1559, 1559, 1559, 1559,    0, 1559,    0, 1559, 1559,    0,
     1559,    0, 1559, 1560, 1560, 1560,    0, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1561, 1561, 1561,    0, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1563, 1563, 1563,    0, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1564, 1564, 1564,    0, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1566, 1566, 1566,    0, 1566, 1566, 1566,

     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566,    0, 1566, 1567, 1567, 1567,    0, 1567, 1567,    0,
     1567,    0, 1567, 1567, 1567, 1567,    0, 1567, 1567, 1567,
     1567, 1567, 1567, 1568, 1568, 1568,    0, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1569, 1569, 1569,    0, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1570, 1570, 1570,    0, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1571, 1571, 1571,    0, 1571, 1571, 1571,

     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1572, 1572, 1572,    0, 1572, 1572,    0,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572,    0, 1572, 1573, 1573,    0, 1573, 1573, 1573, 1573,
     1573, 1573, 1573,    0, 1573, 1573, 1573, 1573, 1573, 1573,
     1573,    0, 1573, 1574, 1574, 1574,    0,    0,    0,    0,
     1574,    0,    0,    0,    0, 1574,    0,    0, 1574, 1575,
     1575, 1575,    0,    0, 1575,    0, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575,    0, 1575, 1576,
     1576, 1576,    0,    0, 1576,    0, 1576, 1576, 1576, 1576,

     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1577,
     1577, 1577,    0,    0, 1577, 1577, 1577,    0, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577,    0, 1577, 1578,
     1578, 1578,    0,    0, 1578,    0, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578,    0, 1578, 1579,
     1579,    0, 1579, 1579, 1579, 1579, 1579, 1579,    0,    0,
     1579, 1579, 1579, 1579, 1579, 1579, 1579,    0, 1579, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,    0,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1581,
     1581, 1581,    0, 1581, 1581, 1581, 1581, 1581, 1581, 1581,

     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582,    0, 1582, 1583,
        0, 1583,    0, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
        0, 1583,    0, 1583, 1583,    0, 1583, 1584, 1584, 1584,
        0, 1584, 1584, 1584, 1584, 1584, 1584, 1584,    0, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1585, 1585, 1585,
        0, 1585, 1585, 1585, 1585, 1585, 1585, 1585,    0, 1585,
     1585, 1585, 1585, 1585,    0, 1585, 1585, 1586,    0, 1586,
        0, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1586, 1586,    0, 1586,    0, 1586, 1587, 1587, 1587,
        0, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587,    0, 1587,    0, 1587, 1588,    0, 1588,
        0, 1588, 1588, 1588, 1588, 1588, 1588, 1588,    0, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1589,    0, 1589,
        0, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1591, 1591, 1591,
        0, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591,    0, 1591, 1592, 1592, 1592,
        0, 1592,    0, 1592, 1592, 1592, 1592, 1592,    0, 1592,

        0, 1592, 1592,    0, 1592,    0, 1592, 1593, 1593, 1593,
        0, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594,
        0, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1595, 1595, 1595,
        0, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1597, 1597, 1597,
        0, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1598,    0,    0,
     1598,    0,    0,    0, 1598,    0,    0,    0,    0, 1598,

        0,    0, 1598, 1599, 1599, 1599,    0, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599,    0, 1599, 1600, 1600, 1600,    0, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1601, 1601,    0, 1601, 1601, 1601, 1601,
     1601, 1601, 1601,    0, 1601, 1601, 1601, 1601, 1601, 1601,
     1601,    0, 1601, 1602, 1602,    0, 1602, 1602, 1602, 1602,
     1602, 1602,    0,    0, 1602, 1602, 1602, 1602, 1602, 1602,
     1602,    0, 1602, 1603, 1603, 1603,    0, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603,    0, 1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1605, 1605,    0, 1605, 1605, 1605, 1605,
     1605, 1605, 1605,    0, 1605, 1605, 1605, 1605, 1605, 1605,
     1605,    0, 1605, 1606, 1606,    0, 1606, 1606, 1606, 1606,
     1606, 1606,    0,    0, 1606, 1606, 1606, 1606, 1606, 1606,
     1606,    0, 1606, 1607, 1607,    0, 1607, 1607, 1607, 1607,
     1607, 1607, 1607,    0, 1607, 1607, 1607, 1607, 1607, 1607,
     1607,    0, 1607, 1608, 1608,    0, 1608, 1608, 1608, 1608,
     1608, 1608,    0,    0, 1608, 1608, 1608, 1608, 1608, 1608,

     1608,    0, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1610,    0,    0,    0, 1610,    0,    0,
        0,    0,    0,    0,    0,    0, 1610,    0, 1610, 1611,
     1611,    0, 1611, 1611, 1611, 1611, 1611, 1611, 1611,    0,
     1611, 1611, 1611, 1611, 1611, 1611, 1611,    0, 1611, 1612,
     1612,    0, 1612, 1612, 1612, 1612, 1612, 1612,    0,    0,
     1612, 1612, 1612, 1612, 1612, 1612, 1612,    0, 1612, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1615,

     1615,    0, 1615, 1615, 1615, 1615, 1615, 1615, 1615,    0,
     1615, 1615, 1615, 1615, 1615, 1615, 1615,    0, 1615, 1616,
     1616,    0, 1616, 1616, 1616, 1616, 1616, 1616,    0,    0,
     1616, 1616, 1616, 1616, 1616, 1616, 1616,    0, 1616, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617,    0, 1617, 1617,    0, 1617, 1617, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618,    0, 1618, 1618,    0, 1618, 1618, 1619,
     1619,    0, 1619, 1619, 1619, 1619, 1619, 1619, 1619,    0,
     1619, 1619, 1619, 1619, 1619, 1619, 1619,    0, 1619, 1620,

     1620,    0, 1620, 1620, 1620, 1620, 1620, 1620,    0,    0,
     1620, 1620, 1620, 1620, 1620, 1620, 1620,    0, 1620, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621,    0, 1621, 1621,    0, 1621, 1621, 1622,
     1622,    0, 1622, 1622, 1622, 1622, 1622, 1622, 1622,    0,
     1622, 1622, 1622, 1622, 1622, 1622, 1622,    0, 1622, 1623,
     1623,    0, 1623, 1623, 1623, 1623, 1623, 1623,    0,    0,
     1623, 1623, 1623, 1623, 1623, 1623, 1623,    0, 1623, 1624,
     1624,    0, 1624, 1624, 1624, 1624, 1624, 1624, 1624,    0,
     1624, 1624, 1624, 1624, 1624, 1624, 1624,    0, 1624, 1625,

     1625,    0, 1625, 1625, 1625, 1625, 1625, 1625,    0,    0,
     1625, 1625, 1625, 1625, 1625, 1625, 1625,    0, 1625, 1626,
     1626,    0, 1626, 1626, 1626, 1626, 1626, 1626, 1626,    0,
     1626, 1626, 1626, 1626, 1626, 1626, 1626,    0, 1626, 1627,
     1627,    0, 1627, 1627, 1627, 1627, 1627, 1627,    0,    0,
     1627, 1627, 1627, 1627, 1627, 1627, 1627,    0, 1627, 1628,
     1628,    0, 1628, 1628, 1628, 1628, 1628, 1628, 1628,    0,
     1628, 1628, 1628, 1628, 1628, 1628, 1628,    0, 1628, 1629,
     1629,    0, 1629, 1629, 1629, 1629, 1629, 1629,    0,    0,
     1629, 1629, 1629, 1629, 1629, 1629, 1629,    0, 1629, 1630,

     1630,    0, 1630, 1630, 1630, 1630, 1630, 1630, 1630,    0,
     1630, 1630, 1630, 1630, 1630, 1630, 1630,    0, 1630, 1631,
     1631,    0, 1631, 1631, 1631, 1631, 1631, 1631,    0,    0,
     1631, 1631, 1631, 1631, 1631, 1631, 1631,    0, 1631, 1632,
     1632,    0, 1632, 1632, 1632, 1632, 1632, 1632, 1632,    0,
     1632, 1632, 1632, 1632, 1632, 1632, 1632,    0, 1632, 1633,
     1633,    0, 1633, 1633, 1633, 1633, 1633, 1633,    0,    0,
     1633, 1633, 1633, 1633, 1633, 1633, 1633,    0, 1633, 1634,
     1634,    0, 1634, 1634, 1634, 1634, 1634, 1634, 1634,    0,
     1634, 1634, 1634, 1634, 1634, 1634, 1634,    0, 1634, 1635,

     1635,    0, 1635, 1635, 1635, 1635, 1635, 1635,    0,    0,
     1635, 1635, 1635, 1635, 1635, 1635, 1635,    0, 1635, 1636,
     1636,    0, 1636, 1636, 1636, 1636, 1636, 1636, 1636,    0,
     1636, 1636, 1636, 1636, 1636, 1636, 1636,    0, 1636, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 26 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"
#include "condparser.h"
#include "config.h"
#include "filedef.h"
#include "memberdef.h"
#include "membername.h"

#define YY_NO_UNISTD_H 1

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

static const char *stateToString(int state);

struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};

struct FileState
{
  FileState(int size) : lineNr(1), curlyCount(0),fileBuf(size),
                        oldFileBuf(0), oldFileBufPos(0), bufState(0) {}
  int lineNr;
  int curlyCount;
  BufStr fileBuf;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/** @brief Singleton that manages the defines available while 
 *  preprocessing files. 
 */
class DefineManager
{
  /** Local class used to hold the defines for a single file */
  class DefinesPerFile
  {
    public:
      /** Creates an empty container for defines */
      DefinesPerFile(DefineManager *parent) 
         : m_parent(parent), m_defines(257), m_includedFiles(17)
      {
        m_defines.setAutoDelete(TRUE);
      }
      /** Destroys the object */
      virtual ~DefinesPerFile()
      {
      }
      /** Adds a define in the context of a file. Will replace 
       *  an existing define with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(Define *def)
      {
	Define *d = m_defines.find(def->name);
	if (d!=0) // redefine
	{
	  m_defines.remove(d->name);
	}
	m_defines.insert(def->name,def);
      }
      /** Adds an include file for this file 
       *  @param fileName The name of the include file
       */
      void addInclude(const char *fileName)
      {
	m_includedFiles.insert(fileName,(void*)0x8);
      }
      void collectDefines(DefineDict *dict,QDict<void> &includeStack);
    private:
      DefineManager *m_parent;
      DefineDict m_defines;
      QDict<void> m_includedFiles;
  };

  public:
    friend class DefinesPerFile;

    /** Creates a new DefineManager object */
    DefineManager() : m_fileMap(1009), m_contextDefines(1009)
    {
      m_fileMap.setAutoDelete(TRUE);
    }

    /** Destroys the object */
    virtual ~DefineManager() 
    {
    }

    /** Starts a context in which defines are collected. 
     *  Called at the start of a new file that is preprocessed.
     *  @param fileName the name of the file to process.
     */
    void startContext(const char *fileName)
    {
      //printf("DefineManager::startContext()\n");
      m_contextDefines.clear();
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile(this);
	m_fileMap.insert(fileName,dpf);
      }
    }
    /** Ends the context started with startContext() freeing any
     *  defines collected within in this context.
     */
    void endContext()
    {
      //printf("DefineManager::endContext()\n");
      m_contextDefines.clear();
    }
    /** Add an included file to the current context.
     *  If the file has been pre-processed already, all defines are added
     *  to the context.
     *  @param fileName The name of the include file to add to the context.
     */
    void addFileToContext(const char *fileName)
    {
      if (fileName==0) return;
      //printf("DefineManager::addFileToContext(%s)\n",fileName);
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile(this);
	m_fileMap.insert(fileName,dpf);
      }
      else
      {
	//printf("existing file!\n");
	QDict<void> includeStack(17);
	dpf->collectDefines(&m_contextDefines,includeStack);
      }
    }

    /** Add a define to the manager object.
     *  @param fileName The file in which the define was found
     *  @param def The Define object to add.
     */
    void addDefine(const char *fileName,Define *def)
    {
      if (fileName==0) return;
      //printf("DefineManager::addDefine(%s,%s)\n",fileName,def->name.data());
      Define *d = m_contextDefines.find(def->name);
      if (d!=0) // redefine
      {
	m_contextDefines.remove(d->name);
      }
      m_contextDefines.insert(def->name,def);

      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile(this);
	m_fileMap.insert(fileName,dpf);
      }
      dpf->addDefine(def);
    }

    /** Add an include relation to the manager object.
     *  @param fromFileName file name in which the include was found.
     *  @param toFileName file name that is included.
     */
    void addInclude(const char *fromFileName,const char *toFileName)
    {
      //printf("DefineManager::addInclude(%s,%s)\n",fromFileName,toFileName);
      if (fromFileName==0 || toFileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fromFileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile(this);
	m_fileMap.insert(fromFileName,dpf);
      }
      dpf->addInclude(toFileName);
    }
    /** Returns a Define object given its name or 0 if the Define does
     *  not exist.
     */
    Define *isDefined(const char *name) const
    {
      Define *d = m_contextDefines.find(name);
      if (d && d->undef) d=0;
      //printf("isDefined(%s)=%p\n",name,d);
      return d;
    }
    /** Returns a reference to the defines found in the current context. */
    const DefineDict &defineContext() const
    {
      return m_contextDefines;
    }

  private:
    /** Helper function to collect all define for a given file */
    void collectDefinesForFile(const char *fileName,DefineDict *dict)
    {
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf)
      {
	QDict<void> includeStack(17);
	dpf->collectDefines(dict,includeStack);
      }
    }

    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(const char *fileName) const
    {
      if (fileName==0) return 0;
      return m_fileMap.find(fileName);
    }

    QDict<DefinesPerFile> m_fileMap;
    DefineDict m_contextDefines;
};


/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(
                     DefineDict *dict,QDict<void> &includeStack)
{
  //printf("DefinesPerFile::collectDefines #defines=%d\n",m_defines.count());
  {
    QDictIterator<void> di(m_includedFiles);
    for (di.toFirst();(di.current());++di)
    {
      QCString incFile = di.currentKey();
      DefinesPerFile *dpf = m_parent->find(incFile);
      if (dpf && includeStack.find(incFile)==0) 
      {
        //printf("  processing include %s\n",incFile.data());
	includeStack.insert(incFile,(void*)0x8);
	dpf->collectDefines(dict,includeStack);
      }
    }
  }
  {
    QDictIterator<Define> di(m_defines);
    Define *def;
    for (di.toFirst();(def=di.current());++di)
    {
      Define *d = dict->find(def->name);
      if (d!=0) // redefine
      {
	dict->remove(d->name);
      }
      dict->insert(def->name,def);
      //printf("  adding define %s\n",def->name.data());
    }
  }
}

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

struct preYY_state
{
  preYY_state() :    allIncludes(10009) {}
  int                yyLineNr   = 1;
  int                yyMLines   = 1;
  int                yyColNr   = 1;
  QCString           yyFileName;
  FileDef           *yyFileDef;
  FileDef           *inputFileDef;
  int                ifcount    = 0;
  QStrList          *pathList = 0;
  QStack<FileState>  includeStack;
  QDict<int>        *argDict = 0;
  int                defArgs = -1;
  QCString           defName;
  QCString           defText;
  QCString           defLitText;
  QCString           defArgsStr;
  QCString           defExtraSpacing;
  bool               defVarArgs;
  int                level;
  int                lastCContext;
  int                lastCPPContext;
  QArray<int>        levelGuard;
  BufStr            *inputBuf = 0;
  int                inputBufPos;
  BufStr            *outputBuf = 0;
  int                roundCount;
  bool               quoteArg;
  DefineDict        *expandedDict = 0;
  int                findDefArgContext;
  bool               expectGuard;
  QCString           guardName;
  QCString           lastGuardName;
  QCString           incName;
  QCString           guardExpr;
  int                curlyCount;
  bool               nospaces; // add extra spaces during macro expansion

  bool               macroExpansion; // from the configuration
  bool               expandOnlyPredef; // from the configuration
  int                commentCount;
  bool               insideComment;
  bool               isImported;
  QCString           blockName;
  int                condCtx;
  bool               skip;
  QStack<CondCtx>    condStack;
  bool               insideCS; // C# has simpler preprocessor
  bool               isSource;

  int                fenceSize = 0;
  bool               ccomment;
  QCString           delimiter;
  QDict<void>        allIncludes;
  QDict<void>        expansionDict;
  DefineManager      defineManager;
  ConstExpressionParser constExpParser;
};

// stateless functions
static QCString escapeAt(const char *text);
static QCString extractTrailingComment(const char *s);
static char resolveTrigraph(char c);

// statefull functions
static inline void outputArray(yyscan_t yyscanner,const char *a,int len);
static inline void  outputChar(yyscan_t yyscanner,char c);
static QCString    expandMacro(yyscan_t yyscanner,const QCString &name);
static void    readIncludeFile(yyscan_t yyscanner,const QCString &inc);
static void          incrLevel(yyscan_t yyscanner);
static void          decrLevel(yyscan_t yyscanner);
static void        setCaseDone(yyscan_t yyscanner,bool value);
static bool      otherCaseDone(yyscan_t yyscanner);
static bool  computeExpression(yyscan_t yyscanner,const QCString &expr);
static void   startCondSection(yyscan_t yyscanner,const char *sectId);
static void     endCondSection(yyscan_t yyscanner);
static void          addDefine(yyscan_t yyscanner);
static Define *      newDefine(yyscan_t yyscanner);
static void        setFileName(yyscan_t yyscanner,const char *name);
static int              yyread(yyscan_t yyscanner,char *buf,int max_size);

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

/* ----------------------------------------------------------------- */








































#line 3316 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pre.cpp"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringCs 8
#define CopyStringFtn 9
#define CopyStringFtnDouble 10
#define CopyRawString 11
#define Include 12
#define IncludeID 13
#define EndImport 14
#define DefName 15
#define DefineArg 16
#define DefineText 17
#define SkipCPPBlock 18
#define Ifdef 19
#define Ifndef 20
#define SkipCComment 21
#define ArgCopyCComment 22
#define CopyCComment 23
#define SkipVerbatim 24
#define SkipCPPComment 25
#define RemoveCComment 26
#define RemoveCPPComment 27
#define Guard 28
#define DefinedExpr1 29
#define DefinedExpr2 30
#define SkipDoubleQuote 31
#define SkipSingleQuote 32
#define UndefName 33
#define IgnoreLine 34
#define FindDefineArgs 35
#define ReadString 36
#define CondLineC 37
#define CondLineCpp 38
#define SkipCond 39

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct preYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int preYYlex_init (yyscan_t* scanner);

int preYYlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (yyscan_t yyscanner );

int preYYget_debug (yyscan_t yyscanner );

void preYYset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE preYYget_extra (yyscan_t yyscanner );

void preYYset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *preYYget_in (yyscan_t yyscanner );

void preYYset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *preYYget_out (yyscan_t yyscanner );

void preYYset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t preYYget_leng (yyscan_t yyscanner );

char *preYYget_text (yyscan_t yyscanner );

int preYYget_lineno (yyscan_t yyscanner );

void preYYset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (yyscan_t yyscanner );
#else
extern int preYYwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (yyscan_t yyscanner);

#define YY_DECL int preYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 470 "pre.l"


#line 3591 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pre.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		preYY_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1451 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1450 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 472 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 473 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 474 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 475 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(yytext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 478 "pre.l"
{ BEGIN(Command); yyextra->yyColNr+=yyleng; yyextra->yyMLines=0;}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 479 "pre.l"
{
 					  outputArray(yyscanner,yytext,(int)yyleng);
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 483 "pre.l"
{ // constructors?
					  int i;
					  for (i=(int)yyleng-1;i>=0;i--)
					  {
					    unput(yytext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 492 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 492 "pre.l"
{ // function like macro
  					  bool skipFuncMacros = Config_getBool(SKIP_FUNCTION_MACROS);
					  QCString name(yytext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (yyextra->includeStack.isEmpty() || yyextra->curlyCount>0) &&
					         yyextra->macroExpansion &&
					         (def=yyextra->defineManager.isDefined(name)) &&
						 /*macroIsAccessible(def) &&*/
					         (!yyextra->expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar(yyscanner,'\n');
					    yyextra->yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=(int)yyleng-1;i>=0;i--)
					    {
					      unput(yytext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 522 "pre.l"
{
                                          QCString text=yytext;
  					  yyextra->yyLineNr+=text.contains('\n');
					  outputArray(yyscanner,yytext,(int)yyleng);
  					}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 527 "pre.l"
{
                                          yyextra->delimiter = yytext+2;
                                          yyextra->delimiter=yyextra->delimiter.left(yyextra->delimiter.length()-1);
					  outputArray(yyscanner,yytext,(int)yyleng);
                                          BEGIN(CopyRawString);
                                        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 533 "pre.l"
{ // count brackets inside the main file
  					  if (yyextra->includeStack.isEmpty()) 
					  {
					    yyextra->curlyCount++;
					  }
					  outputChar(yyscanner,*yytext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 540 "pre.l"
{ // count brackets inside the main file
  					  if (yyextra->includeStack.isEmpty() && yyextra->curlyCount>0) 
					  {
					    yyextra->curlyCount--;
					  }
					  outputChar(yyscanner,*yytext);
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 547 "pre.l"
{ 
  					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 550 "pre.l"
{ 
  					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 553 "pre.l"
{ 
  					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 556 "pre.l"
{
                                          if (getLanguageFromFileName(yyextra->yyFileName)!=SrcLangExt_CSharp) REJECT;
					  outputArray(yyscanner,yytext,(int)yyleng);
					  BEGIN( CopyStringCs );
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 561 "pre.l"
{
					  outputChar(yyscanner,*yytext);
                                          if (getLanguageFromFileName(yyextra->yyFileName)!=SrcLangExt_Fortran)
                                          {
					    BEGIN( CopyString );
                                          }
                                          else
                                          {
					    BEGIN( CopyStringFtnDouble );
                                          }
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 572 "pre.l"
{
                                          if (getLanguageFromFileName(yyextra->yyFileName)!=SrcLangExt_Fortran) REJECT;
					  outputChar(yyscanner,*yytext);
					  BEGIN( CopyStringFtn );
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 577 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 580 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 583 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 586 "pre.l"
{
					  outputChar(yyscanner,*yytext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 590 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 593 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 596 "pre.l"
{
					  outputChar(yyscanner,*yytext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 600 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 603 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 606 "pre.l"
{
					  outputChar(yyscanner,*yytext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 610 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
                                          QCString delimiter = yytext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==yyextra->delimiter)
                                          {
                                            BEGIN( CopyLine );
                                          }
                                        }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 619 "pre.l"
{
					  outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 622 "pre.l"
{
					  outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 625 "pre.l"
{
  					  yyextra->expectGuard = FALSE;
  					  Define *def=0;
					  //def=yyextra->globalDefineDict->find(yytext);
					  //def=yyextra->defineManager.isDefined(yytext);
					  //printf("Search for define %s found=%d yyextra->includeStack.isEmpty()=%d "
					  //       "yyextra->curlyCount=%d yyextra->macroExpansion=%d yyextra->expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",yytext,def ? 1 : 0,
					  //	 yyextra->includeStack.isEmpty(),yyextra->curlyCount,yyextra->macroExpansion,yyextra->expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((yyextra->includeStack.isEmpty() || yyextra->curlyCount>0) &&
					      yyextra->macroExpansion &&
					      (def=yyextra->defineManager.isDefined(yytext)) &&
				              /*(def->isPredefined || macroIsAccessible(def)) && */
					      (!yyextra->expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    yyextra->roundCount=0;
					    yyextra->defArgsStr=yytext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(yyscanner,yyextra->defArgsStr);
					      outputArray(yyscanner,result,result.length());
					    }
					    else // zero or more arguments
					    {
					      yyextra->findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(yyscanner,yytext,(int)yyleng);
					  }
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 662 "pre.l"
{
                                          Define *def=0;
  					  if ((yyextra->includeStack.isEmpty() || yyextra->curlyCount>0) && 
					      yyextra->macroExpansion &&
					      (def=yyextra->defineManager.isDefined(yytext)) &&
					      def->nargs==-1 &&
				              /*(def->isPredefined || macroIsAccessible(def)) &&*/
					      (!yyextra->expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(yyscanner,yytext); 
					    outputArray(yyscanner,result,result.length());
					  }
					  else
					  {
					    outputArray(yyscanner,yytext,(int)yyleng);
					  }
  					}
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 680 "pre.l"
{ // strip line continuation characters
                                          if (getLanguageFromFileName(yyextra->yyFileName)==SrcLangExt_Fortran) outputChar(yyscanner,*yytext);
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 683 "pre.l"
{
  					  outputChar(yyscanner,*yytext);
  					}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 686 "pre.l"
{
  					  outputChar(yyscanner,'\n');
					  BEGIN(Start);
					  yyextra->yyLineNr++;
					  yyextra->yyColNr=1;
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 692 "pre.l"
{
  					  yyextra->defArgsStr+='(';
  					  yyextra->roundCount++;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 696 "pre.l"
{
  					  yyextra->defArgsStr+=')';
					  yyextra->roundCount--;
					  if (yyextra->roundCount==0)
					  {
					    QCString result=expandMacro(yyscanner,yyextra->defArgsStr);
					    //printf("yyextra->defArgsStr='%s'->'%s'\n",yyextra->defArgsStr.data(),result.data());
					    if (yyextra->findDefArgContext==CopyLine)
					    {
					      outputArray(yyscanner,result,result.length());
					      BEGIN(yyextra->findDefArgContext);
					    }
					    else // yyextra->findDefArgContext==IncludeID
					    {
					      readIncludeFile(yyscanner,result);
					      yyextra->nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  yyextra->defArgsStr+=yytext;
  					}
  */
case 40:
YY_RULE_SETUP
#line 721 "pre.l"
{
  					  yyextra->defArgsStr+=yytext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 724 "pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                          BEGIN(ArgCopyCComment);
                                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 728 "pre.l"
{
  					  yyextra->defArgsStr+=*yytext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 732 "pre.l"
{
                                          if (getLanguageFromFileName(yyextra->yyFileName)!=SrcLangExt_Fortran) REJECT;
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(ReadString);
                                        }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 737 "pre.l"
{
                                          yyextra->defArgsStr+=' ';
  					  yyextra->yyLineNr++;
					  outputChar(yyscanner,'\n');
  					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 742 "pre.l"
{
  					  yyextra->defArgsStr+="@@";
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 745 "pre.l"
{
  					  yyextra->defArgsStr+=*yytext;
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 748 "pre.l"
{
					  yyextra->defArgsStr+=yytext;
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 751 "pre.l"
{
					  yyextra->defArgsStr+=yytext;
  					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 755 "pre.l"
{ 
                                          yyextra->defArgsStr+=' ';
  					  yyextra->yyLineNr++;
					  outputChar(yyscanner,'\n');
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 760 "pre.l"
{ 
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 763 "pre.l"
{
  					  yyextra->defArgsStr+=*yytext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 767 "pre.l"
{
                                          if (getLanguageFromFileName(yyextra->yyFileName)!=SrcLangExt_Fortran) REJECT;
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 773 "pre.l"
{
  					  yyextra->defArgsStr+=yytext;
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 776 "pre.l"
{ // line continuation
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 778 "pre.l"
{
  					  yyextra->defArgsStr+=yytext;
  					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 781 "pre.l"
{
  					  yyextra->defArgsStr+=*yytext;
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 784 "pre.l"
{
  					  yyextra->isImported = yytext[1]=='m';
  					  if (yyextra->macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 789 "pre.l"
{ 
  					  yyextra->isImported = yytext[1]=='m';
					  char c[2];
					  c[0]=yytext[yyleng-1];c[1]='\0';
					  yyextra->incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 796 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
					  yyextra->yyColNr+=yyleng;
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 60:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 801 "pre.l"
{
  					  incrLevel(yyscanner);
					  yyextra->guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 61:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 806 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel(yyscanner);
					  yyextra->guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 62:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 812 "pre.l"
{
  					  incrLevel(yyscanner);
					  yyextra->guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 63:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 817 "pre.l"
{
  					  incrLevel(yyscanner);
					  yyextra->guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 64:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 822 "pre.l"
{
  					  incrLevel(yyscanner);
					  yyextra->guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 65:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 827 "pre.l"
{
  					  if (!otherCaseDone(yyscanner))
					  {
					    yyextra->guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    yyextra->ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 839 "pre.l"
{
					  //printf("else yyextra->levelGuard[%d]=%d\n",yyextra->level-1,yyextra->levelGuard[yyextra->level-1]);
  					  if (otherCaseDone(yyscanner))
					  {
					    yyextra->ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(yyscanner,TRUE);
					    //yyextra->levelGuard[yyextra->level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 852 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 68:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 855 "pre.l"
{
  					  if (!otherCaseDone(yyscanner))
					  {
					    yyextra->guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 862 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel(yyscanner);
  					}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 866 "pre.l"
{
  					  outputChar(yyscanner,'\n');
  					  BEGIN(Start);
					  yyextra->yyLineNr++;
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 871 "pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 874 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 877 "pre.l"
{
  					  outputChar(yyscanner,'\n');
					  yyextra->yyLineNr++;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 881 "pre.l"

	YY_BREAK
case 75:
YY_RULE_SETUP
#line 882 "pre.l"
{yyextra->yyColNr+=yyleng;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 883 "pre.l"
{
  					  Define *def;
  					  if ((def=yyextra->defineManager.isDefined(yytext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",yytext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 895 "pre.l"
{
  					  outputChar(yyscanner,'\n');
  					  yyextra->guardExpr+=' ';
					  yyextra->yyLineNr++;
  					}
	YY_BREAK
case 78:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 900 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 79:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 903 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 906 "pre.l"
{ yyextra->guardExpr+=yytext; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 907 "pre.l"
{ yyextra->guardExpr+="@@"; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 908 "pre.l"
{ yyextra->guardExpr+=*yytext; }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 909 "pre.l"
{
  					  unput(*yytext);
  					  //printf("Guard: '%s'\n",
					  //    yyextra->guardExpr.data());
					  bool guard=computeExpression(yyscanner,yyextra->guardExpr);
					  setCaseDone(yyscanner,guard);
					  //printf("if yyextra->levelGuard[%d]=%d\n",yyextra->level-1,yyextra->levelGuard[yyextra->level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    yyextra->ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 926 "pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 927 "pre.l"
{
  					  if (yyextra->defineManager.isDefined(yytext) || yyextra->guardName==yytext)
					    yyextra->guardExpr+=" 1L ";
					  else
					    yyextra->guardExpr+=" 0L ";
					  yyextra->lastGuardName=yytext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 935 "pre.l"
{
  					  if (yyextra->defineManager.isDefined(yytext) || yyextra->guardName==yytext)
					    yyextra->guardExpr+=" 1L ";
					  else
					    yyextra->guardExpr+=" 0L ";
					  yyextra->lastGuardName=yytext;
  					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 942 "pre.l"
{ // should not happen, handle anyway
                                          yyextra->yyLineNr++;
  					  yyextra->ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 947 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 950 "pre.l"

	YY_BREAK
case 90:
YY_RULE_SETUP
#line 951 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 91:
/* rule 91 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 952 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 953 "pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 954 "pre.l"

	YY_BREAK
case 94:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 955 "pre.l"
{ 
  					  incrLevel(yyscanner);
                                          yyextra->ifcount++; 
  					  //printf("#if... depth=%d\n",yyextra->ifcount);
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 960 "pre.l"
{
					  //printf("Else! yyextra->ifcount=%d otherCaseDone=%d\n",yyextra->ifcount,otherCaseDone());
  					  if (yyextra->ifcount==0 && !otherCaseDone(yyscanner))
					  {
					    setCaseDone(yyscanner,TRUE);
  					    //outputChar(yyscanner,'\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 96:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 969 "pre.l"
{
  					  if (yyextra->ifcount==0) 
					  {
  					    if (!otherCaseDone(yyscanner))
					    {
					      yyextra->guardExpr.resize(0);
					      yyextra->lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 984 "pre.l"
{ 
					  yyextra->expectGuard = FALSE;
  					  decrLevel(yyscanner);
  				          if (--yyextra->ifcount<0)
  					  {
  					    //outputChar(yyscanner,'\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 993 "pre.l"
{ 
  					  outputChar(yyscanner,'\n');
  					  yyextra->yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 998 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1001 "pre.l"

	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1002 "pre.l"

	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1003 "pre.l"
{ }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1004 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1007 "pre.l"

	YY_BREAK
case 105:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1008 "pre.l"
{ 
                                        }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1010 "pre.l"
{
  					  yyextra->lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 107:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1014 "pre.l"
{ 
                                        }
	YY_BREAK
case 108:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1016 "pre.l"
{
					  yyextra->lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1020 "pre.l"
{
  					  outputChar(yyscanner,'\n');
					  yyextra->yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1025 "pre.l"
{ }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1026 "pre.l"
{ }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1027 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1030 "pre.l"
{ }
	YY_BREAK
case 114:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1031 "pre.l"
{
  					  yyextra->nospaces=TRUE;
				          yyextra->roundCount=0;
					  yyextra->defArgsStr=yytext;
					  yyextra->findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1038 "pre.l"
{
  					  yyextra->nospaces=TRUE;
                                          readIncludeFile(yyscanner,expandMacro(yyscanner,yytext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1043 "pre.l"
{ 
					  yyextra->incName+=yytext;
					  readIncludeFile(yyscanner,yyextra->incName);
					  if (yyextra->isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1055 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1058 "pre.l"
{ 
					  outputChar(yyscanner,'\n');
					  yyextra->yyLineNr++;
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1062 "pre.l"
{
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1064 "pre.l"
{ // define with argument
  					  //printf("Define() '%s'\n",yytext);
					  delete yyextra->argDict;
					  yyextra->argDict = new QDict<int>(31);
					  yyextra->argDict->setAutoDelete(TRUE);
					  yyextra->defArgs = 0; 
                                          yyextra->defArgsStr.resize(0);
					  yyextra->defText.resize(0);
					  yyextra->defLitText.resize(0);
					  yyextra->defName = yytext;
					  yyextra->defVarArgs = FALSE;
					  yyextra->defExtraSpacing.resize(0);
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1078 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define '%s'\n",yytext);
					  delete yyextra->argDict; yyextra->argDict=0;
					  yyextra->defArgs = -1;
                                          yyextra->defArgsStr.resize(0);
					  yyextra->defName = yytext;
					  yyextra->defName = yyextra->defName.left(yyextra->defName.length()-1).stripWhiteSpace();
					  yyextra->defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    yyextra->defName.data(),yyextra->lastGuardName.data(),yyextra->expectGuard);
					  if (yyextra->curlyCount>0 || yyextra->defName!=yyextra->lastGuardName || !yyextra->expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+yyextra->defName;
					    outputArray(yyscanner,tmp.data(),tmp.length());
					    yyextra->quoteArg=FALSE;
					    yyextra->insideComment=FALSE;
					    yyextra->lastGuardName.resize(0);
				            yyextra->defText="1"; 
					    yyextra->defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",yytext);
					    yyextra->defText.resize(0);
					    yyextra->defLitText.resize(0);
					    BEGIN(Start);
					  }
					  yyextra->expectGuard=FALSE;
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1108 "pre.l"
{ // empty define
					  delete yyextra->argDict; yyextra->argDict=0;
					  yyextra->defArgs = -1;
					  yyextra->defName = yytext;
                                          yyextra->defArgsStr.resize(0);
					  yyextra->defText.resize(0);
					  yyextra->defLitText.resize(0);
					  yyextra->defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    yyextra->defName.data(),yyextra->lastGuardName.data(),yyextra->expectGuard);
					  if (yyextra->curlyCount>0 || yyextra->defName!=yyextra->lastGuardName || !yyextra->expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+yyextra->defName;
					    outputArray(yyscanner,tmp.data(),tmp.length());
					    yyextra->quoteArg=FALSE;
					    yyextra->insideComment=FALSE;
					    if (yyextra->insideCS) yyextra->defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",yytext);
					    yyextra->guardName = yytext;
					    yyextra->lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  yyextra->expectGuard=FALSE;
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1136 "pre.l"
{ // define with content
  					  //printf("Define '%s'\n",yytext);
					  delete yyextra->argDict; yyextra->argDict=0;
					  yyextra->defArgs = -1;
                                          yyextra->defArgsStr.resize(0);
					  yyextra->defText.resize(0);
					  yyextra->defLitText.resize(0);
					  yyextra->defName = yytext;
					  yyextra->defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+yyextra->defName+yyextra->defArgsStr;
					  outputArray(yyscanner,tmp.data(),tmp.length());
					  yyextra->quoteArg=FALSE;
					  yyextra->insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1151 "pre.l"
{
  					  yyextra->defExtraSpacing+="\n";
					  yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1155 "pre.l"
{ yyextra->defArgsStr+=yytext; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1156 "pre.l"
{ yyextra->defArgsStr+=yytext; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1157 "pre.l"
{
                                          yyextra->defArgsStr+=yytext; 
					  QCString tmp=(QCString)"#define "+yyextra->defName+yyextra->defArgsStr+yyextra->defExtraSpacing;
					  outputArray(yyscanner,tmp.data(),tmp.length());
					  yyextra->quoteArg=FALSE;
					  yyextra->insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1165 "pre.l"
{ // Variadic macro
					  yyextra->defVarArgs = TRUE;
					  yyextra->defArgsStr+=yytext;
					  yyextra->argDict->insert("__VA_ARGS__",new int(yyextra->defArgs));
					  yyextra->defArgs++;
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1171 "pre.l"
{
  					  //printf("Define addArg(%s)\n",yytext);
  					  QCString argName=yytext;
  					  yyextra->defVarArgs = yytext[yyleng-1]=='.';
					  if (yyextra->defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          yyextra->defArgsStr+=yytext;
					  yyextra->argDict->insert(argName,new int(yyextra->defArgs)); 
					  yyextra->defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  yyextra->defText+=yytext;
					  yyextra->defLitText+=yytext;
					  yyextra->insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  yyextra->defText+=yytext;
					  yyextra->defLitText+=yytext;
					  yyextra->insideComment=FALSE;
  					}
  */
case 130:
YY_RULE_SETUP
#line 1196 "pre.l"
{
					  yyextra->defText+=yytext;
					  yyextra->defLitText+=yytext;
					  yyextra->lastCContext=YY_START;
					  yyextra->commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1203 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					  yyextra->lastCPPContext=YY_START;
					  yyextra->defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1209 "pre.l"
{
  					  if (yytext[0]=='/') outputChar(yyscanner,'/');
  					  outputChar(yyscanner,'*');outputChar(yyscanner,'/');
					  if (--yyextra->commentCount<=0)
					  {
					    if (yyextra->lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(yyextra->lastCContext);  
					  }
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1223 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1226 "pre.l"
{
  					  outputChar(yyscanner,'/');outputChar(yyscanner,'*');
					  //yyextra->commentCount++;
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1230 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1233 "pre.l"
{
                                          bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(yyscanner,yytext,(int)yyleng);
                                            yyextra->fenceSize=yyleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1246 "pre.l"
{
                                          bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(yyscanner,yytext,(int)yyleng);
                                            yyextra->fenceSize=yyleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1259 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					  yyextra->yyLineNr+=QCString(yytext).contains('\n');
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1263 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					  yyextra->yyLineNr+=QCString(yytext).contains('\n');
                                          yyextra->fenceSize=0;
					  if (yytext[1]=='f')
					  {
					    yyextra->blockName="f";
					  }
					  else
					  {
                                            QCString bn=&yytext[1];
                                            int i = bn.find('{'); // for \code{.c}
                                            if (i!=-1) bn=bn.left(i);
					    yyextra->blockName=bn.stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1280 "pre.l"
{ // escaped @cond
  					  outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1283 "pre.l"
{ // conditional section
                                          yyextra->ccomment=TRUE;  
                                          yyextra->condCtx=YY_START;
  					  BEGIN(CondLineCpp);
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1288 "pre.l"
{ // conditional section
                                          yyextra->ccomment=FALSE;  
                                          yyextra->condCtx=YY_START;
  					  BEGIN(CondLineC);
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1293 "pre.l"
{
  				          startCondSection(yyscanner,yytext);
                                          if (yyextra->skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray(yyscanner,"*/",2);
                                              yyextra->ccomment=TRUE;
                                            }
                                            else
                                            {
                                              yyextra->ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
  					    BEGIN(yyextra->condCtx);
                                          }
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1314 "pre.l"
{ // non-guard character
  					  unput(*yytext);
  					  startCondSection(yyscanner," ");
                                          if (yyextra->skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray(yyscanner,"*/",2);
                                              yyextra->ccomment=TRUE;
                                            }
                                            else
                                            {
                                              yyextra->ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
					    BEGIN(yyextra->condCtx);
                                          }
  					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1336 "pre.l"
{ // no guard
                                          if (YY_START==SkipCComment)
                                          {
                                            yyextra->ccomment=TRUE;
                                            // end C comment
  					    outputArray(yyscanner,"*/",2);
                                          }
                                          else
                                          {
                                            yyextra->ccomment=FALSE;
                                          }
                                          yyextra->condCtx=YY_START;
                                          startCondSection(yyscanner," ");
                                          BEGIN(SkipCond);
  					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1351 "pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1352 "pre.l"
{ }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1353 "pre.l"
{ }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1354 "pre.l"
{ yyextra->ccomment=FALSE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1355 "pre.l"
{ yyextra->ccomment=TRUE; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1356 "pre.l"
{
                                          if (!yyextra->skip)
                                          {
  					    outputArray(yyscanner,yytext,(int)yyleng);
                                          }
                                        }
	YY_BREAK
case 152:
/* rule 152 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1362 "pre.l"
{ 
                                          bool oldSkip = yyextra->skip;
                                          endCondSection(yyscanner);
                                          if (oldSkip && !yyextra->skip)
                                          {
                                            if (yyextra->ccomment)
                                            {
                                              outputArray(yyscanner,"/** ",4);
                                            }
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 153:
/* rule 153 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1374 "pre.l"
{
                                          bool oldSkip = yyextra->skip;
  					  endCondSection(yyscanner);
                                          if (oldSkip && !yyextra->skip) 
                                          {
                                            BEGIN(yyextra->condCtx);
                                          }
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1382 "pre.l"
{ /* end of verbatim block */
  					  outputArray(yyscanner,yytext,(int)yyleng);
					  if (yytext[1]=='f' && yyextra->blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&yytext[4]==yyextra->blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1393 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
                                          if (yyextra->fenceSize==yyleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1400 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
                                          if (yyextra->fenceSize==yyleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1407 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1410 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1413 "pre.l"
{ 
  					  yyextra->yyLineNr++;
  					  outputChar(yyscanner,'\n');
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1417 "pre.l"
{
  					  outputChar(yyscanner,*yytext);
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1420 "pre.l"
{
					  yyextra->defLitText+=yytext;
					  yyextra->defText+=escapeAt(yytext);
					}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1424 "pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=" ";
                                          yyextra->yyLineNr++;
                                          yyextra->yyMLines++;
                                        }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1430 "pre.l"
{
					  yyextra->defLitText+=yytext;
					  yyextra->defText+=yytext;
  					  BEGIN(yyextra->lastCContext);
  					}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1435 "pre.l"
{ 
  					  yyextra->yyLineNr++;
					  yyextra->defLitText+=yytext;
					  yyextra->defText+=' ';
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1440 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (yyextra->lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1450 "pre.l"
{ BEGIN(yyextra->lastCContext); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1451 "pre.l"

	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1452 "pre.l"

	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1453 "pre.l"

	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1454 "pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1455 "pre.l"

	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1456 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 1459 "pre.l"
{
  					  unput(*yytext);
  					  BEGIN(yyextra->lastCPPContext);
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1463 "pre.l"
{
  					  outputChar(yyscanner,'/');outputChar(yyscanner,'*');
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1466 "pre.l"
{
  					  outputChar(yyscanner,'/');outputChar(yyscanner,'/');
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1469 "pre.l"
{
  					  outputArray(yyscanner,yytext,(int)yyleng);
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1472 "pre.l"
{
  					  outputChar(yyscanner,*yytext);
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1475 "pre.l"

	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1476 "pre.l"

	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1477 "pre.l"

	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1478 "pre.l"

	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1479 "pre.l"
{
  					  yyextra->quoteArg=TRUE;
					  yyextra->defLitText+=yytext;
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1483 "pre.l"
{
					  yyextra->defLitText+=yytext;
  					  if (yyextra->quoteArg)
					  {
					    yyextra->defText+="\"";
					  }
					  if (yyextra->defArgs>0)
					  {
					    int *n;
					    if ((n=(*yyextra->argDict)[yytext]))
					    {
					      //if (!yyextra->quoteArg) yyextra->defText+=' ';
					      yyextra->defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      yyextra->defText+=numStr;
					      //if (!yyextra->quoteArg) yyextra->defText+=' ';
					    }
					    else
					    {
					      yyextra->defText+=yytext;
					    }
					  }
					  else
					  {
					    yyextra->defText+=yytext;
					  }
					  if (yyextra->quoteArg)
					  {
					    yyextra->defText+="\"";
					  }
					  yyextra->quoteArg=FALSE;
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1516 "pre.l"
{
					  yyextra->defLitText+=yytext;
					  yyextra->defText+=yytext;
  					}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 1520 "pre.l"
{
					  yyextra->defLitText+=yytext;
					  outputChar(yyscanner,'\n');
					  yyextra->defText += ' ';
					  yyextra->yyLineNr++;
					  yyextra->yyMLines++;
					}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 1527 "pre.l"
{
					  QCString comment=extractTrailingComment(yyextra->defLitText);
					  yyextra->defLitText+=yytext;
					  if (!comment.isEmpty())
					  {
					    outputArray(yyscanner,comment,comment.length());
					    yyextra->defLitText=yyextra->defLitText.left(yyextra->defLitText.length()-comment.length()-1);
					  }
  					  outputChar(yyscanner,'\n');
  					  Define *def=0;
					  //printf("Define name='%s' text='%s' litTexti='%s'\n",yyextra->defName.data(),yyextra->defText.data(),yyextra->defLitText.data());
					  if (yyextra->includeStack.isEmpty() || yyextra->curlyCount>0) 
					  {
					    addDefine(yyscanner);
					  }
					  def=yyextra->defineManager.isDefined(yyextra->defName);
					  if (def==0) // new define
					  {
					    //printf("new define '%s'!\n",yyextra->defName.data());
					    Define *nd = newDefine(yyscanner);
					    yyextra->defineManager.addDefine(yyextra->yyFileName,nd);

					    // also add it to the local file list if it is a source file
					    //if (yyextra->isSource && yyextra->includeStack.isEmpty())
					    //{
					    //  yyextra->fileDefineDict->insert(yyextra->defName,nd);
					    //}
					  }
					  else if (def /*&& macroIsAccessible(def)*/)
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = yyextra->defName;
					      def->definition = yyextra->defText.stripWhiteSpace();
					      def->nargs = yyextra->defArgs;
					      def->fileName = yyextra->yyFileName.copy(); 
					      def->lineNr = yyextra->yyLineNr-yyextra->yyMLines;
					      def->columnNr = yyextra->yyColNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",yyextra->defName.data());
					    }
					  }
					  delete yyextra->argDict; yyextra->argDict=0;
					  yyextra->yyLineNr++;
					  yyextra->yyColNr=1;
					  yyextra->lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1581 "pre.l"
{ yyextra->defText += ' '; yyextra->defLitText+=yytext; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1582 "pre.l"
{ yyextra->defText += "##"; yyextra->defLitText+=yytext; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1583 "pre.l"
{ yyextra->defText += "@@"; yyextra->defLitText+=yytext; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1584 "pre.l"
{ 
                                          yyextra->defText += *yytext; 
  					  yyextra->defLitText+=yytext; 
					  if (!yyextra->insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1592 "pre.l"
{ yyextra->defText += *yytext;
  					  yyextra->defLitText+=yytext; 
					  if (!yyextra->insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1599 "pre.l"
{ yyextra->defText += yytext; yyextra->defLitText+=yytext; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1600 "pre.l"
{ yyextra->defText += yytext; yyextra->defLitText+=yytext; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1601 "pre.l"
{
  					  yyextra->defText += *yytext; yyextra->defLitText+=yytext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1605 "pre.l"
{
  					  yyextra->defText += yytext; yyextra->defLitText+=yytext;
					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1608 "pre.l"
{
  					  yyextra->defText += *yytext; yyextra->defLitText+=yytext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1612 "pre.l"
{ yyextra->defText += *yytext; yyextra->defLitText+=yytext; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1613 "pre.l"
{ yyextra->defText += *yytext; yyextra->defLitText+=yytext; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1614 "pre.l"
{ yyextra->defText += *yytext; yyextra->defLitText+=yytext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringCs):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(CopyStringFtnDouble):
case YY_STATE_EOF(CopyRawString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
#line 1615 "pre.l"
{
                                          DBG_CTX((stderr,"End of include file\n"));
					  //printf("Include stack depth=%d\n",yyextra->includeStack.count());
  					  if (yyextra->includeStack.isEmpty())
					  {
					    DBG_CTX((stderr,"Terminating scanner!\n"));
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=yyextra->includeStack.pop();
					    //fileDefineCache->merge(yyextra->yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState,yyscanner );
					    preYY_delete_buffer(oldBuf,yyscanner );
					    yyextra->yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            yyextra->inputBuf    = fs->oldFileBuf;
					    yyextra->inputBufPos = fs->oldFileBufPos;
                                            yyextra->curlyCount = fs->curlyCount;
					    setFileName(yyscanner,fs->fileName);
					    DBG_CTX((stderr,"######## FileName %s\n",yyextra->yyFileName.data()));
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+yyextra->yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",yyextra->yyLineNr,yyextra->yyFileName.data());
                                            outputArray(yyscanner,lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 200:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 1648 "pre.l"
case 201:
YY_RULE_SETUP
#line 1648 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(yyscanner,yytext,(int)yyleng);
  					    yyextra->lastCContext=YY_START;
					    yyextra->commentCount=1;
					    if (yyleng==3) yyextra->lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCComment);
                                          }
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1662 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond || getLanguageFromFileName(yyextra->yyFileName)==SrcLangExt_Fortran)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(yyscanner,yytext,(int)yyleng);
  					    yyextra->lastCPPContext=YY_START;
					    if (yyleng==3) yyextra->lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCPPComment);
                                          }
					}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1675 "pre.l"
{ 
  					  outputChar(yyscanner,'\n');
  					  yyextra->yyLineNr++; 
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1679 "pre.l"
{
  					  yyextra->expectGuard = FALSE;
  					  outputChar(yyscanner,*yytext);
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1684 "pre.l"
ECHO;
	YY_BREAK
#line 5906 "/Users/Raj/Desktop/Catan-tracker/documentation/generated_src/pre.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( preYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 64);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1451 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 64;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1451 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1450);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	preYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void preYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf ,yyscanner );

	preYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	preYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack(yyscanner);

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void preYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)preYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE preYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int preYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int preYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *preYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *preYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t preYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *preYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void preYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void preYYset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "preYYset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void preYYset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "preYYset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void preYYset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int preYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void preYYset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* preYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int preYYlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) preYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* preYYlex_init_extra has the same functionality as preYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to preYYalloc in
 * the yyextra field.
 */

int preYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    preYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) preYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    preYYset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	preYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        preYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    preYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    preYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1684 "pre.l"



/////////////////////////////////////////////////////////////////////////////////////

static int yyread(yyscan_t yyscanner,char *buf,int max_size)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  int bytesInBuf = state->inputBuf->curPos()-state->inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,state->inputBuf->data()+state->inputBufPos,bytesToCopy);
  state->inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

static void setFileName(yyscan_t yyscanner,const char *name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  bool ambig;
  QFileInfo fi(name);
  state->yyFileName=fi.absFilePath().utf8();
  state->yyFileDef=findFileDef(Doxygen::inputNameDict,state->yyFileName,ambig);
  if (state->yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    state->yyFileDef=findFileDef(Doxygen::includeNameDict,state->yyFileName,ambig);
  }
  //printf("setFileName(%s) state->yyFileName=%s state->yyFileDef=%p\n",
  //    name,state->yyFileName.data(),state->yyFileDef);
  if (state->yyFileDef && state->yyFileDef->isReference()) state->yyFileDef=0;
  state->insideCS = getLanguageFromFileName(state->yyFileName)==SrcLangExt_CSharp;
  state->isSource = guessSection(state->yyFileName);
}

static void incrLevel(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  state->level++;
  state->levelGuard.resize(state->level);
  state->levelGuard[state->level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",yyextra->yyFileName.data(),yyextra->yyLineNr,yyextra->level);
}

static void decrLevel(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("%s line %d: decrLevel %d\n",state->yyFileName.data(),state->yyLineNr,state->level);
  if (state->level > 0)
  {
    state->level--;
    state->levelGuard.resize(state->level);
  }
  else
  {
    warn(state->yyFileName,state->yyLineNr,"More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->level==0)
  {
    warn(state->yyFileName,state->yyLineNr,"Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return state->levelGuard[state->level-1];
  }
}

static void setCaseDone(yyscan_t yyscanner,bool value)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  state->levelGuard[state->level-1]=value;
}


static FileState *checkAndOpenFile(yyscan_t yyscanner,const QCString &fileName,bool &alreadyIncluded)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    const QStrList &exclPatterns = Config_getList(EXCLUDE_PATTERNS);
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = fi.absFilePath().utf8();

    // global guard
    if (state->curlyCount==0) // not #include inside { ... }
    {
      if (state->allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      state->allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    state->includeStack.setAutoDelete(FALSE);
    while ((fs=state->includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      state->includeStack.push(fs);
    }
    state->includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = state->inputBuf;
      fs->oldFileBufPos = state->inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(yyscan_t yyscanner, const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("** findFile(%s,%d) state->yyFileName=%s\n",fileName,localInclude,state->yyFileName.data());
  if (Portable::isAbsolutePath(fileName))
  {
    FileState *fs = checkAndOpenFile(yyscanner,fileName,alreadyIncluded);
    if (fs)
    {
      setFileName(yyscanner,fileName);
      state->yyLineNr=1;
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }
  }
  if (localInclude && !state->yyFileName.isEmpty())
  {
    QFileInfo fi(state->yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(yyscanner,absName,alreadyIncluded);
      if (fs)
      {
	setFileName(yyscanner,absName);
	state->yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (state->pathList==0) 
  {
    return 0;
  }
  char *s=state->pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    //printf("  Looking for %s in %s\n",fileName,s);
    FileState *fs = checkAndOpenFile(yyscanner,absName,alreadyIncluded);
    if (fs)
    {
      setFileName(yyscanner,absName);
      state->yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=state->pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) 
	    {
	      i++;
	    }
	    // only /*!< or /**< are treated as a comment for the macro name,
	    // otherwise the comment is treated as part of the macro definition
	    return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : ""; 
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint pos);
static void unputChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos,char c);
static bool expandExpression(yyscan_t yyscanner,QCString &expr,QCString *rest,int pos,int level);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize '%s'->'%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in='%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: '%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found '%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out='%s'\n",expr.data());
}

static void returnCharToStream(yyscan_t yyscanner,char c)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  unput(c);
}

static inline void addTillEndOfString(yyscan_t yyscanner,const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(yyscanner,expr,rest,pos))!=EOF && cc!=0)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(yyscanner,expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(yyscan_t yyscanner,const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result,int level)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf(">replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s') level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),state->level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(yyscanner,expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(yyscanner,expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(yyscanner,expr,rest,j,cc); 
    return FALSE; 
  }
  getNextChar(yyscanner,expr,rest,j); // eat the '(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(yyscanner,expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(yyscanner,expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(yyscanner,expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else if (c=='/') // possible start of a comment
      {
        char prevChar = '\0';
        arg+=c;
        if ((cc=getCurrentChar(yyscanner,expr,rest,j)) == '*') // we have a comment
        {
          while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
          {
            c=(char)cc;
            arg+=c;
            if (c == '/' && prevChar == '*') break; // we have an end of comment
            prevChar = c;
          }
        }
      }
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || // same number of arguments
      (argCount>=def->nargs-1 && def->varArgs)) // variadic macro with at least as many
                                                // params as the non-variadic part (see bug731985)
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: '%s'\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg='%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash)
            {
              expandExpression(yyscanner,substArg,0,0,level+1);
            }
	    if (inString)
	    {
	      //printf("'%s'=stringize('%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (state->nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("<replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s',result='%s') level=%d return=TRUE\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),result.data(),state->level);
    return TRUE;
  }
  //printf("<replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s',result='%s') level=%d return=FALSE\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),result.data(),state->level);
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(p);
        if (c=='*')  // Start of C comment
        { 
	  p++;
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(p++);
	  }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

#define MAX_EXPANSION_DEPTH 50

/*! performs recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 */
static bool expandExpression(yyscan_t yyscanner,QCString &expr,QCString *rest,int pos,int level)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf(">expandExpression(expr='%s',rest='%s',pos=%d,level=%d)\n",expr.data(),rest ? rest->data() : "", pos, level);
  if (expr.isEmpty())
  {
    //printf("<expandExpression: empty\n");
    return TRUE;
  }
  if (state->expansionDict.find(expr)!=0 && level>MAX_EXPANSION_DEPTH) // check for too deep recursive expansions
  {
    //printf("<expandExpression: already expanded expr='%s'\n",expr.data());
    return FALSE;
  }
  else
  {
    state->expansionDict.insert(expr,(void*)0x8);
  }
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  int startPos = pos;
  int samePosCount=0;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf(" p=%d macroName=%s\n",p,macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (state->expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=state->defineManager.isDefined(macroName);
        if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }
	else if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro '%s'->'%s'\n",macroName.data(),def->definition.data());
	  if (state->nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion='%s'->'%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
          //printf(" >>>> call replaceFunctionMacro\n");
	  replaced=replaceFunctionMacro(yyscanner,expr,rest,p+l,len,def,expMacro,level);
          //printf(" <<<< call replaceFunctionMacro: replaced=%d\n",replaced);
	  len+=l;
	}
        //printf(" macroName='%s' expMacro='%s' replaced=%d\n",macroName.data(),expMacro.data(),replaced);

	if (replaced) // expand the macro and rescan the expression
	{
	  //printf(" replacing '%s'->'%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
          //printf(" macroName=%s restExpr='%s' def->nonRecursive=%d\n",macroName.data(),restExpr.data(),def->nonRecursive);
          bool expanded=false;
	  if (def && !def->nonRecursive)
	  {
	    state->expandedDict->insert(macroName,def);
	    expanded = expandExpression(yyscanner,resultExpr,&restExpr,0,level+1);
	    state->expandedDict->remove(macroName);
	  }
          if (expanded)
          {
	    expr=expr.left(p)+resultExpr+restExpr;
	    //printf(" new expression: '%s' old i=%d new i=%d\n",expr.data(),i,p);
	    i=p;
          }
          else
          {
	    expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
            i=p+l+2;
          }
	}
	else // move to the next macro name
	{
	  //printf(" moving to the next macro old i=%d new i=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
      // check for too many inplace expansions without making progress
      if (i==startPos)
      {
        samePosCount++;
      }
      else
      {
        startPos=i;
        samePosCount=0;
      }
      if (samePosCount>MAX_EXPANSION_DEPTH)
      {
        break;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
  //printf("<expandExpression(expr='%s',rest='%s',pos=%d,level=%d)\n",expr.data(),rest ? rest->data() : 0, pos,level);
  return TRUE;
}

/*! @brief Process string or character literal.
 *
 * \a inputStr should point to the start of a string or character literal.
 * the routine will return a pointer to just after the end of the literal
 * the character making up the literal will be added to \a result.
 */
static const char *processUntilMatchingTerminator(const char *inputStr,QCString &result)
{
  if (inputStr==0) return inputStr;
  char term = *inputStr; // capture start character of the literal
  if (term!='\'' && term!='"') return inputStr; // not a valid literal
  char c=term;
  // output start character
  result+=c;
  inputStr++;
  while ((c=*inputStr)) // while inside the literal
  {
    if (c==term) // found end marker of the literal
    {
      // output end character and stop
      result+=c;
      inputStr++;
      break;
    }
    else if (c=='\\') // escaped character, process next character
                      // as well without checking for end marker.
    {
      result+=c;
      inputStr++;
      c=*inputStr;
      if (c==0) break; // unexpected end of string after escape character
    }
    result+=c;
    inputStr++;
  }
  return inputStr;
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
static QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='\'') // quoted character
      {
        p = processUntilMatchingTerminator(p,result);
      }
      else if (c=='d' && !inNum) // identifier starting with a 'd'
      {
	if (qstrncmp(p,"defined ",8)==0 || qstrncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
	while ((c=*p) && isspace((uchar)c)) p++;
	if (*p=='(') // undefined function macro
	{
	  p++;
	  int count=1;
	  while ((c=*p++))
	  {
	    if (c=='(') count++;
	    else if (c==')')
	    {
	      count--;
	      if (count==0) break;
	    }
	    else if (c=='/')
	    {
	      char pc=c;
	      c=*++p;
	      if (c=='*') // start of C comment
	      {
		while (*p && !(pc=='*' && c=='/')) // search end of comment
		{
		  pc=c;
		  c=*++p;
		}
		p++;
	      }
	    }
	  }
	}
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
static QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p) result+=c,p++;
	    }
	  }
	  break;
	case '"': // skip string literals
	case '\'': // skip char literals
          p = processUntilMatchingTerminator(p,result);
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

static bool computeExpression(yyscan_t yyscanner,const QCString &expr)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  QCString e=expr;
  state->expansionDict.clear();
  expandExpression(yyscanner,e,0,0,0);
  //printf("after expansion '%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing '%s'\n",e.data());
  return state->constExpParser.parse(state->yyFileName,state->yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

static QCString expandMacro(yyscan_t yyscanner,const QCString &name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  QCString n=name;
  state->expansionDict.clear();
  expandExpression(yyscanner,n,0,0,0);
  n=removeMarkers(n);
  //printf("expandMacro '%s'->'%s'\n",name.data(),n.data());
  return n;
}

static Define *newDefine(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  Define *def=new Define;
  def->name       = state->defName;
  def->definition = state->defText.stripWhiteSpace();
  def->nargs      = state->defArgs;
  def->fileName   = state->yyFileName; 
  def->fileDef    = state->yyFileDef;
  def->lineNr     = state->yyLineNr-state->yyMLines;
  def->columnNr   = state->yyColNr;
  def->varArgs    = state->defVarArgs;
  //printf("newDefine: %s %s file: %s\n",def->name.data(),def->definition.data(),
  //    def->fileDef ? def->fileDef->name().data() : def->fileName.data());
  //printf("newDefine: '%s'->'%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

static void addDefine(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.

  //printf("addDefine '%s' '%s'\n",state->defName.data(),state->defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(state->defArgsStr,al);
  MemberDef *md=createMemberDef(
      state->yyFileName,state->yyLineNr-state->yyMLines,state->yyColNr,
      "#define",state->defName,state->defArgsStr,0,
      Public,Normal,FALSE,Member,MemberType_Define,ArgumentList(),ArgumentList(),"");
  if (!state->defArgsStr.isEmpty())
  {
    ArgumentList argList;
    //printf("addDefine() state->defName='%s' state->defArgsStr='%s'\n",state->defName.data(),state->defArgsStr.data());
    stringToArgumentList(SrcLangExt_Cpp, state->defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for '%s' to '%s'\n",state->defName.data(),state->defText.data());
  int l=state->defLitText.find('\n');
  if (l>0 && state->defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    state->defLitText = state->defLitText.right(state->defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=state->defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    state->defLitText=state->defLitText.mid(l+1,k-l-1)+state->defLitText.stripWhiteSpace();
  }
  QCString defLitTextStripped = state->defLitText.stripWhiteSpace();
  if (defLitTextStripped.contains('\n')>=1)
  {
    md->setInitializer(state->defLitText);
  }
  else
  {
    md->setInitializer(defLitTextStripped);
  }

  //printf("pre.l: md->setFileDef(%p)\n",state->inputFileDef);
  md->setFileDef(state->inputFileDef);
  md->setDefinition("#define "+state->defName);

  MemberName *mn=Doxygen::functionNameSDict->find(state->defName);
  if (mn==0)
  {
    mn = new MemberName(state->defName);
    Doxygen::functionNameSDict->append(state->defName,mn);
  }
  mn->append(md);
  if (state->yyFileDef) 
  {
    state->yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[state->defName])==0) defineDict.insert(state->defName,newDefine()); 
}

static inline void outputChar(yyscan_t yyscanner,char c)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.isEmpty() || state->curlyCount>0) state->outputBuf->addChar(c);
}

static inline void outputArray(yyscan_t yyscanner,const char *a,int len)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.isEmpty() || state->curlyCount>0) state->outputBuf->addArray(a,len);
}

static void readIncludeFile(yyscan_t yyscanner,const QCString &inc)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  static bool searchIncludes = Config_getBool(SEARCH_INCLUDES);
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = state->yyFileName;
    FileDef *oldFileDef  = state->yyFileDef;
    int oldLineNr        = state->yyLineNr;
    //printf("Searching for '%s'\n",incFileName.data());

    // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
    QCString absIncFileName = incFileName;
    {
      QFileInfo fi(state->yyFileName);
      if (fi.exists())
      {
	QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+incFileName;
        QFileInfo fi2(absName);
        if (fi2.exists())
        {
	  absIncFileName=fi2.absFilePath().utf8();
	}
	else if (searchIncludes) // search in INCLUDE_PATH as well
	{
	  QStrList &includePath = Config_getList(INCLUDE_PATH);
	  char *s=includePath.first();
	  while (s)
	  {
	    QFileInfo fi(s);
	    if (fi.exists() && fi.isDir())
	    {
	      QCString absName = QCString(fi.absFilePath().utf8())+"/"+incFileName;
	      //printf("trying absName=%s\n",absName.data());
	      QFileInfo fi2(absName);
	      if (fi2.exists())
	      {
		absIncFileName=fi2.absFilePath().utf8();
		break;
	      }
	      //printf( "absIncFileName = %s\n", absIncFileName.data() );
	    }
	    s=includePath.next();
	  }
	}
	//printf( "absIncFileName = %s\n", absIncFileName.data() );
      }
    }
    state->defineManager.addInclude(state->yyFileName,absIncFileName);
    state->defineManager.addFileToContext(absIncFileName);

    // findFile will overwrite state->yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(yyscanner,incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<state->includeStack.count();i++) 
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        //msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
	bool ambig;
	// change to absolute name for bug 641336 
        FileDef *incFd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
        oldFileDef->addIncludeDependency(ambig ? 0 : incFd,incFileName,localInclude,state->isImported,FALSE);
        // add included by dependency
        if (state->yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          state->yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,state->isImported);
        }
      }
      else if (state->inputFileDef)
      {
        state->inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,state->isImported,TRUE);
      }
      struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      fs->curlyCount = state->curlyCount;
      state->curlyCount = 0;
      // push the state on the stack
      state->includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(state->yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",state->yyFileName.data());
      outputArray(yyscanner,lineStr.data(),lineStr.length());

      DBG_CTX((stderr,"Switching to include file %s\n",incFileName.data()));
      state->expectGuard=TRUE;
      state->inputBuf   = &fs->fileBuf;
      state->inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE,yyscanner),yyscanner);
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	//QCString absPath = incFileName;
	//if (QDir::isRelativePath(incFileName))
	//{
	//  absPath = QDir::cleanDirPath(oldFileDef->getPath()+"/"+incFileName);
	//  //printf("%s + %s -> resolved path %s\n",oldFileDef->getPath().data(),incFileName.data(),absPath.data());
	//}

	// change to absolute name for bug 641336 
	FileDef *fd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
	//printf("%s::findFileDef(%s)=%p\n",oldFileDef->name().data(),incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(ambig ? 0 : fd,incFileName,localInclude,state->isImported,FALSE);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,state->isImported);
        }
      }
      else if (state->inputFileDef)
      {
        state->inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,state->isImported,TRUE);
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
	if (alreadyIncluded)
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: already included! skipping...\n",qPrint(incFileName));
	}
	else
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",qPrint(incFileName));
	}
        //printf("error: include file %s not found\n",yytext);
      }
      if (state->curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(state->yyFileName,state->yyLineNr,"include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(yyscan_t yyscanner,const char *sectId)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("startCondSection: skip=%d stack=%d\n",state->skip,state->condStack.count());
  CondParser prs;
  bool expResult = prs.parse(state->yyFileName,state->yyLineNr,sectId);
  state->condStack.push(new CondCtx(state->yyLineNr,sectId,state->skip));
  if (!expResult)
  {
    state->skip=TRUE;
  }
  //printf("  expResult=%d skip=%d\n",expResult,state->skip);
}

static void endCondSection(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->condStack.isEmpty())
  {
    state->skip=FALSE;
  }
  else
  {
    CondCtx *ctx = state->condStack.pop();
    state->skip=ctx->skip;
    delete ctx;
  }
  //printf("endCondSection: skip=%d stack=%d\n",state->skip,state->condStack.count());
}

static void forceEndCondSection(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  while (!state->condStack.isEmpty())
  {
    delete state->condStack.pop();
  }
  state->skip=FALSE;
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput(yyscanner);
    //printf("%d=yyinput() %d\n",cc,EOF);
    return cc;
  }
}
 
static int getCurrentChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput(yyscanner);
    returnCharToStream(yyscanner,cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(yyscanner,c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

///////////////////////////////////////////////////////////////////////////////////////////////

struct Preprocessor::Private
{
  yyscan_t yyscanner;
  preYY_state state;
  bool firstTime = FALSE;
};

void Preprocessor::addSearchDir(const char *dir)
{
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  QFileInfo fi(dir);
  if (fi.isDir()) state->pathList->append(fi.absFilePath().utf8());
} 

Preprocessor::Preprocessor() : p(std::make_unique<Private>())
{
  preYYlex_init_extra(&p->state,&p->yyscanner);
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  state->pathList = new QStrList;
  addSearchDir(".");
  state->expandedDict = new DefineDict(17);
}

Preprocessor::~Preprocessor()
{
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  delete state->expandedDict; 
  state->expandedDict=0;
  delete state->pathList; 
  state->pathList=0;
  preYYlex_destroy(p->yyscanner);
}

void Preprocessor::processFile(const char *fileName,BufStr &input,BufStr &output)
{
  yyscan_t yyscanner = p->yyscanner;
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;

#ifdef FLEX_DEBUG
  preYYset_debug(1,yyscanner);
#endif

  printlex(yy_flex_debug, TRUE, __FILE__, fileName);
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  state->macroExpansion = Config_getBool(MACRO_EXPANSION);
  state->expandOnlyPredef = Config_getBool(EXPAND_ONLY_PREDEF);
  state->skip=FALSE;
  state->curlyCount=0;
  state->nospaces=FALSE;
  state->inputBuf=&input;
  state->inputBufPos=0;
  state->outputBuf=&output;
  state->includeStack.setAutoDelete(TRUE);
  state->includeStack.clear();
  state->expandedDict->setAutoDelete(FALSE);
  state->expandedDict->clear();
  state->condStack.setAutoDelete(TRUE);
  state->condStack.clear();
  //state->fileDefineDict->clear();

  setFileName(yyscanner,fileName);
  state->inputFileDef = state->yyFileDef;
  state->defineManager.startContext(state->yyFileName);
  
  p->firstTime=TRUE;
  if (p->firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList(PREDEFINED);
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if ((i_obrace==0) || (i_equals==0) || (i_equals==1 && ds.at(i_equals-1)==':'))
      {
         continue; // no define name
      }

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
          if (l>0) // see bug375037
          {
	    argDict.insert(ds.mid(p,l),new int(count++));
	    i=p+l;
          }
          else
          {
            i++;
          }
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = state->yyFileDef;
	  def->fileName     = fileName;
	  state->defineManager.addDefine(state->yyFileName,def);

	  //printf("#define '%s' '%s' #nargs=%d\n",
	  //  def->name.data(),def->definition.data(),def->nargs);
	}

      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = state->yyFileDef;
	  def->fileName     = fileName;
	  state->defineManager.addDefine(state->yyFileName,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define '%s' '%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    //firstTime=FALSE;
  }
 
  state->yyLineNr = 1;
  state->yyColNr  = 1;
  state->level    = 0;
  state->ifcount  = 0;

  BEGIN( Start );
  
  state->expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  state->guardName.resize(0);
  state->lastGuardName.resize(0);
  state->guardExpr.resize(0);
  
  preYYlex(yyscanner);

  while (!state->condStack.isEmpty())
  {
    CondCtx *ctx = state->condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label '%s' ",ctx->sectionId.stripWhiteSpace().data());
    warn(fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
    delete ctx;
  }
  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection(yyscanner);

  // remove locally defined macros so they can be redefined in another source file
  //if (state->fileDefineDict->count()>0)
  //{
  //  QDictIterator<Define> di(*state->fileDefineDict);
  //  Define *d;
  //  for (di.toFirst();(d=di.current());++di)
  //  {
  //    state->globalDefineDict->remove(di.currentKey());
  //  }
  //  state->fileDefineDict->clear();
  //}

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output of %s (size: %d bytes):\n",fileName,newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (state->defineManager.defineContext().count()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file (%s):\n", fileName);
      Debug::print(Debug::Preprocessor,0,"---------\n");
      QDictIterator<Define> di(state->defineManager.defineContext());
      Define *def;
      for (di.toFirst();(def=di.current());++di)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",qPrint(def->name));
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file (%s).\n", fileName);
    }
  }
  state->defineManager.endContext();
  printlex(yy_flex_debug, FALSE, __FILE__, fileName);
}


#include "pre.l.h"

